
PWM_DAC_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e594  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800e834  0800e834  0000f834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e8f8  0800e8f8  0000f8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e900  0800e900  0000f900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e904  0800e904  0000f904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800e908  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800e96c  00010064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800e9cc  000100c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  24000124  0800ea2c  00010124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000a74  0800ea2c  00010a74  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00010124  2**0
                  CONTENTS, READONLY
 12 .debug_info   000281bc  00000000  00000000  00010152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eac  00000000  00000000  0003830e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  0003c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000177d  00000000  00000000  0003dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c599  00000000  00000000  0003f725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ad3  00000000  00000000  0007bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001850db  00000000  00000000  000a4791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022986c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008900  00000000  00000000  002298b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  002321b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e81c 	.word	0x0800e81c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800e81c 	.word	0x0800e81c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f001 faf8 	bl	8001c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f93e 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fc9e 	bl	8000fcc <MX_GPIO_Init>
  MX_ETH_Init();
 8000690:	f000 fa70 	bl	8000b74 <MX_ETH_Init>
  MX_I2C1_Init();
 8000694:	f000 faba 	bl	8000c0c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000698:	f000 fc1a 	bl	8000ed0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800069c:	f000 fc64 	bl	8000f68 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80006a0:	f000 f9b2 	bl	8000a08 <MX_ADC1_Init>
  MX_DAC1_Init();
 80006a4:	f000 fa34 	bl	8000b10 <MX_DAC1_Init>
  MX_TIM2_Init();
 80006a8:	f000 fb9c 	bl	8000de4 <MX_TIM2_Init>
  MX_TIM1_Init();
 80006ac:	f000 faee 	bl	8000c8c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
    //Parametros ADC e DAC.
    //inicializa o DAC
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80006b0:	2110      	movs	r1, #16
 80006b2:	481e      	ldr	r0, [pc, #120]	@ (800072c <main+0xac>)
 80006b4:	f003 f851 	bl	800375a <HAL_DAC_Start>

   //parametros PWM/Timers
    HAL_UART_Receive_IT(&huart3, rx_buffer, sizeof(rx_buffer));
 80006b8:	2209      	movs	r2, #9
 80006ba:	491d      	ldr	r1, [pc, #116]	@ (8000730 <main+0xb0>)
 80006bc:	481d      	ldr	r0, [pc, #116]	@ (8000734 <main+0xb4>)
 80006be:	f00a fbed 	bl	800ae9c <HAL_UART_Receive_IT>

    HAL_TIM_PWM_Init(&htim1);
 80006c2:	481d      	ldr	r0, [pc, #116]	@ (8000738 <main+0xb8>)
 80006c4:	f009 fa3f 	bl	8009b46 <HAL_TIM_PWM_Init>
    //TIM1->CCR1 = 50;
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   //pino PE9 - D6
 80006c8:	2100      	movs	r1, #0
 80006ca:	481b      	ldr	r0, [pc, #108]	@ (8000738 <main+0xb8>)
 80006cc:	f009 fa9c 	bl	8009c08 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Init(&htim2);
 80006d0:	481a      	ldr	r0, [pc, #104]	@ (800073c <main+0xbc>)
 80006d2:	f009 fa38 	bl	8009b46 <HAL_TIM_PWM_Init>
      //TIM1->CCR1 = 50;
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // pino PA0 - D32
 80006d6:	2100      	movs	r1, #0
 80006d8:	4818      	ldr	r0, [pc, #96]	@ (800073c <main+0xbc>)
 80006da:	f009 fa95 	bl	8009c08 <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */

  //escreve no sinal PWM o valor lido do potenciometro
  // um led deve ser conectado ao pino do timer 1 - pino D6/PE9
  // o brilho do led vai mudar em funcao do valor lido do potenciometro
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, POT);
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <main+0xc0>)
 80006e0:	781a      	ldrb	r2, [r3, #0]
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <main+0xb8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	635a      	str	r2, [r3, #52]	@ 0x34
  	HAL_Delay(5);
 80006e8:	2005      	movs	r0, #5
 80006ea:	f001 fb57 	bl	8001d9c <HAL_Delay>

  //leitura do LDR
  	Read_LDR();	   HAL_Delay(10);
 80006ee:	f000 f82d 	bl	800074c <Read_LDR>
 80006f2:	200a      	movs	r0, #10
 80006f4:	f001 fb52 	bl	8001d9c <HAL_Delay>
    Read_Pot();	   HAL_Delay(10);
 80006f8:	f000 f8bc 	bl	8000874 <Read_Pot>
 80006fc:	200a      	movs	r0, #10
 80006fe:	f001 fb4d 	bl	8001d9c <HAL_Delay>
    Read_Temp();   HAL_Delay(10);
 8000702:	f000 f86d 	bl	80007e0 <Read_Temp>
 8000706:	200a      	movs	r0, #10
 8000708:	f001 fb48 	bl	8001d9c <HAL_Delay>


    dac_value = (LDR);
 800070c:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <main+0xc4>)
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <main+0xc8>)
 8000712:	701a      	strb	r2, [r3, #0]

  	//Determinando a amplitude do DAC em funcao do valor do LDR normalizado.
    // DAC sera o PA5/D13
  	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_8B_R, dac_value);
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <main+0xc8>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2208      	movs	r2, #8
 800071a:	2110      	movs	r1, #16
 800071c:	4803      	ldr	r0, [pc, #12]	@ (800072c <main+0xac>)
 800071e:	f003 f873 	bl	8003808 <HAL_DAC_SetValue>
  	HAL_Delay(1);
 8000722:	2001      	movs	r0, #1
 8000724:	f001 fb3a 	bl	8001d9c <HAL_Delay>
  {
 8000728:	bf00      	nop
 800072a:	e7d8      	b.n	80006de <main+0x5e>
 800072c:	240001dc 	.word	0x240001dc
 8000730:	2400090c 	.word	0x2400090c
 8000734:	2400038c 	.word	0x2400038c
 8000738:	240002f4 	.word	0x240002f4
 800073c:	24000340 	.word	0x24000340
 8000740:	24000916 	.word	0x24000916
 8000744:	24000915 	.word	0x24000915
 8000748:	24000918 	.word	0x24000918

0800074c <Read_LDR>:

	}

}

void Read_LDR(){
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
	 // Read analog data from A0 (channel 0) of the PCF8591
		  LDR = PCF8591_ReadAnalog(0);
 8000752:	2000      	movs	r0, #0
 8000754:	f000 fd50 	bl	80011f8 <PCF8591_ReadAnalog>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <Read_LDR+0x7c>)
 800075e:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100); // Wait before next reading
 8000760:	2064      	movs	r0, #100	@ 0x64
 8000762:	f001 fb1b 	bl	8001d9c <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN0: ");
 8000766:	1d38      	adds	r0, r7, #4
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <Read_LDR+0x80>)
 800076a:	4a19      	ldr	r2, [pc, #100]	@ (80007d0 <Read_LDR+0x84>)
 800076c:	2108      	movs	r1, #8
 800076e:	f00d fb8f 	bl	800de90 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fdb3 	bl	80002e0 <strlen>
 800077a:	4603      	mov	r3, r0
 800077c:	b29a      	uxth	r2, r3
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4619      	mov	r1, r3
 8000782:	4814      	ldr	r0, [pc, #80]	@ (80007d4 <Read_LDR+0x88>)
 8000784:	f00a faf6 	bl	800ad74 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 8000788:	2064      	movs	r0, #100	@ 0x64
 800078a:	f001 fb07 	bl	8001d9c <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", LDR);
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <Read_LDR+0x7c>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	1d38      	adds	r0, r7, #4
 8000794:	4a10      	ldr	r2, [pc, #64]	@ (80007d8 <Read_LDR+0x8c>)
 8000796:	2104      	movs	r1, #4
 8000798:	f00d fb7a 	bl	800de90 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fd9e 	bl	80002e0 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	4809      	ldr	r0, [pc, #36]	@ (80007d4 <Read_LDR+0x88>)
 80007ae:	f00a fae1 	bl	800ad74 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 80007b2:	2064      	movs	r0, #100	@ 0x64
 80007b4:	f001 faf2 	bl	8001d9c <HAL_Delay>
		  execute_flag = '0';
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <Read_LDR+0x90>)
 80007ba:	2230      	movs	r2, #48	@ 0x30
 80007bc:	701a      	strb	r2, [r3, #0]


}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	24000915 	.word	0x24000915
 80007cc:	0800e834 	.word	0x0800e834
 80007d0:	0800e83c 	.word	0x0800e83c
 80007d4:	2400038c 	.word	0x2400038c
 80007d8:	0800e844 	.word	0x0800e844
 80007dc:	24000000 	.word	0x24000000

080007e0 <Read_Temp>:

void Read_Temp(){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
	 // Read analog data from A1 (channel 1) of the PCF8591
		  TEMP = PCF8591_ReadAnalog(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fd06 	bl	80011f8 <PCF8591_ReadAnalog>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <Read_Temp+0x7c>)
 80007f2:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100); // Wait before next reading
 80007f4:	2064      	movs	r0, #100	@ 0x64
 80007f6:	f001 fad1 	bl	8001d9c <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN1: ");
 80007fa:	1d38      	adds	r0, r7, #4
 80007fc:	4b18      	ldr	r3, [pc, #96]	@ (8000860 <Read_Temp+0x80>)
 80007fe:	4a19      	ldr	r2, [pc, #100]	@ (8000864 <Read_Temp+0x84>)
 8000800:	2108      	movs	r1, #8
 8000802:	f00d fb45 	bl	800de90 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff fd69 	bl	80002e0 <strlen>
 800080e:	4603      	mov	r3, r0
 8000810:	b29a      	uxth	r2, r3
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4619      	mov	r1, r3
 8000816:	4814      	ldr	r0, [pc, #80]	@ (8000868 <Read_Temp+0x88>)
 8000818:	f00a faac 	bl	800ad74 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 800081c:	2064      	movs	r0, #100	@ 0x64
 800081e:	f001 fabd 	bl	8001d9c <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", TEMP);
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <Read_Temp+0x7c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	1d38      	adds	r0, r7, #4
 8000828:	4a10      	ldr	r2, [pc, #64]	@ (800086c <Read_Temp+0x8c>)
 800082a:	2104      	movs	r1, #4
 800082c:	f00d fb30 	bl	800de90 <sniprintf>
  		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fd54 	bl	80002e0 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4619      	mov	r1, r3
 8000840:	4809      	ldr	r0, [pc, #36]	@ (8000868 <Read_Temp+0x88>)
 8000842:	f00a fa97 	bl	800ad74 <HAL_UART_Transmit_IT>
  		  HAL_Delay(100);
 8000846:	2064      	movs	r0, #100	@ 0x64
 8000848:	f001 faa8 	bl	8001d9c <HAL_Delay>
  		  execute_flag = '0';
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <Read_Temp+0x90>)
 800084e:	2230      	movs	r2, #48	@ 0x30
 8000850:	701a      	strb	r2, [r3, #0]

}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000917 	.word	0x24000917
 8000860:	0800e84c 	.word	0x0800e84c
 8000864:	0800e83c 	.word	0x0800e83c
 8000868:	2400038c 	.word	0x2400038c
 800086c:	0800e844 	.word	0x0800e844
 8000870:	24000000 	.word	0x24000000

08000874 <Read_Pot>:

void Read_Pot(){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
	      POT = PCF8591_ReadAnalog(3);		  // Process the analog_value or send it over UART/Display it
 800087a:	2003      	movs	r0, #3
 800087c:	f000 fcbc 	bl	80011f8 <PCF8591_ReadAnalog>
 8000880:	4603      	mov	r3, r0
 8000882:	461a      	mov	r2, r3
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <Read_Pot+0x7c>)
 8000886:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100); // Wait for 1 second before next reading
 8000888:	2064      	movs	r0, #100	@ 0x64
 800088a:	f001 fa87 	bl	8001d9c <HAL_Delay>
		  char counterMessage[9];

		  snprintf(counterMessage, 8, "%s\r\n", " AIN3: ");
 800088e:	1d38      	adds	r0, r7, #4
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <Read_Pot+0x80>)
 8000892:	4a19      	ldr	r2, [pc, #100]	@ (80008f8 <Read_Pot+0x84>)
 8000894:	2108      	movs	r1, #8
 8000896:	f00d fafb 	bl	800de90 <sniprintf>
		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fd1f 	bl	80002e0 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b29a      	uxth	r2, r3
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	4814      	ldr	r0, [pc, #80]	@ (80008fc <Read_Pot+0x88>)
 80008ac:	f00a fa62 	bl	800ad74 <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 80008b0:	2064      	movs	r0, #100	@ 0x64
 80008b2:	f001 fa73 	bl	8001d9c <HAL_Delay>

		  snprintf(counterMessage, 4, "%d\r\n", POT);
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <Read_Pot+0x7c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	1d38      	adds	r0, r7, #4
 80008bc:	4a10      	ldr	r2, [pc, #64]	@ (8000900 <Read_Pot+0x8c>)
 80008be:	2104      	movs	r1, #4
 80008c0:	f00d fae6 	bl	800de90 <sniprintf>
   		  HAL_UART_Transmit_IT(&huart3, (uint8_t *)counterMessage, strlen(counterMessage));
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fd0a 	bl	80002e0 <strlen>
 80008cc:	4603      	mov	r3, r0
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	4619      	mov	r1, r3
 80008d4:	4809      	ldr	r0, [pc, #36]	@ (80008fc <Read_Pot+0x88>)
 80008d6:	f00a fa4d 	bl	800ad74 <HAL_UART_Transmit_IT>
     	  HAL_Delay(100);
 80008da:	2064      	movs	r0, #100	@ 0x64
 80008dc:	f001 fa5e 	bl	8001d9c <HAL_Delay>
   		  execute_flag = '0';
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <Read_Pot+0x90>)
 80008e2:	2230      	movs	r2, #48	@ 0x30
 80008e4:	701a      	strb	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	24000916 	.word	0x24000916
 80008f4:	0800e854 	.word	0x0800e854
 80008f8:	0800e83c 	.word	0x0800e83c
 80008fc:	2400038c 	.word	0x2400038c
 8000900:	0800e844 	.word	0x0800e844
 8000904:	24000000 	.word	0x24000000

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	@ 0x70
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000912:	224c      	movs	r2, #76	@ 0x4c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f00d faee 	bl	800def8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2220      	movs	r2, #32
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f00d fae8 	bl	800def8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000928:	2002      	movs	r0, #2
 800092a:	f005 fb87 	bl	800603c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b33      	ldr	r3, [pc, #204]	@ (8000a00 <SystemClock_Config+0xf8>)
 8000934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000936:	4a32      	ldr	r2, [pc, #200]	@ (8000a00 <SystemClock_Config+0xf8>)
 8000938:	f023 0301 	bic.w	r3, r3, #1
 800093c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800093e:	4b30      	ldr	r3, [pc, #192]	@ (8000a00 <SystemClock_Config+0xf8>)
 8000940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4b2e      	ldr	r3, [pc, #184]	@ (8000a04 <SystemClock_Config+0xfc>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000950:	4a2c      	ldr	r2, [pc, #176]	@ (8000a04 <SystemClock_Config+0xfc>)
 8000952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <SystemClock_Config+0xfc>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000964:	bf00      	nop
 8000966:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <SystemClock_Config+0xfc>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800096e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000972:	d1f8      	bne.n	8000966 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000974:	2303      	movs	r3, #3
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000978:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 800097e:	2311      	movs	r3, #17
 8000980:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000982:	2340      	movs	r3, #64	@ 0x40
 8000984:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000986:	2302      	movs	r3, #2
 8000988:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098a:	2302      	movs	r3, #2
 800098c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800098e:	2301      	movs	r3, #1
 8000990:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 19;
 8000992:	2313      	movs	r3, #19
 8000994:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000996:	2302      	movs	r3, #2
 8000998:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800099a:	2303      	movs	r3, #3
 800099c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009a2:	230c      	movs	r3, #12
 80009a4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009a6:	2302      	movs	r3, #2
 80009a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 fb8c 	bl	80060d0 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009be:	f000 fc85 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	233f      	movs	r3, #63	@ 0x3f
 80009c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 ffcc 	bl	8006984 <HAL_RCC_ClockConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80009f2:	f000 fc6b 	bl	80012cc <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	3770      	adds	r7, #112	@ 0x70
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	58000400 	.word	0x58000400
 8000a04:	58024800 	.word	0x58024800

08000a08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	@ 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
 8000a28:	615a      	str	r2, [r3, #20]
 8000a2a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a2c:	4b35      	ldr	r3, [pc, #212]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a2e:	4a36      	ldr	r2, [pc, #216]	@ (8000b08 <MX_ADC1_Init+0x100>)
 8000a30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a32:	4b34      	ldr	r3, [pc, #208]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a38:	4b32      	ldr	r3, [pc, #200]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a3e:	4b31      	ldr	r3, [pc, #196]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a44:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a50:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a56:	4b2b      	ldr	r3, [pc, #172]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a5c:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a62:	4b28      	ldr	r3, [pc, #160]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a68:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a6e:	4b25      	ldr	r3, [pc, #148]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a74:	4b23      	ldr	r3, [pc, #140]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 8000a7c:	4b21      	ldr	r3, [pc, #132]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a82:	4820      	ldr	r0, [pc, #128]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a84:	f001 fb9c 	bl	80021c0 <HAL_ADC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000a8e:	f000 fc1d 	bl	80012cc <Error_Handler>
  }
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a94:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 8000a98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000a9c:	2208      	movs	r2, #8
 8000a9e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa0:	4818      	ldr	r0, [pc, #96]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000aa2:	f001 fb8d 	bl	80021c0 <HAL_ADC_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000aac:	f000 fc0e 	bl	80012cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4812      	ldr	r0, [pc, #72]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000abc:	f002 fc3e 	bl	800333c <HAL_ADCEx_MultiModeConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000ac6:	f000 fc01 	bl	80012cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <MX_ADC1_Init+0x104>)
 8000acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ace:	2306      	movs	r3, #6
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ad6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000ada:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000adc:	2304      	movs	r3, #4
 8000ade:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_ADC1_Init+0xfc>)
 8000aee:	f001 ff65 	bl	80029bc <HAL_ADC_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8000af8:	f000 fbe8 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	@ 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	24000178 	.word	0x24000178
 8000b08:	40022000 	.word	0x40022000
 8000b0c:	3ef08000 	.word	0x3ef08000

08000b10 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	2224      	movs	r2, #36	@ 0x24
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f00d f9eb 	bl	800def8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b22:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <MX_DAC1_Init+0x5c>)
 8000b24:	4a12      	ldr	r2, [pc, #72]	@ (8000b70 <MX_DAC1_Init+0x60>)
 8000b26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b28:	4810      	ldr	r0, [pc, #64]	@ (8000b6c <MX_DAC1_Init+0x5c>)
 8000b2a:	f002 fdf4 	bl	8003716 <HAL_DAC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b34:	f000 fbca 	bl	80012cc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b44:	2301      	movs	r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2210      	movs	r2, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <MX_DAC1_Init+0x5c>)
 8000b54:	f002 fe82 	bl	800385c <HAL_DAC_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b5e:	f000 fbb5 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	240001dc 	.word	0x240001dc
 8000b70:	40007400 	.word	0x40007400

08000b74 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf4 <MX_ETH_Init+0x80>)
 8000b7a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf8 <MX_ETH_Init+0x84>)
 8000b7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_ETH_Init+0x88>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <MX_ETH_Init+0x88>)
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_ETH_Init+0x88>)
 8000b8c:	22e1      	movs	r2, #225	@ 0xe1
 8000b8e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b90:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <MX_ETH_Init+0x88>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b96:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_ETH_Init+0x88>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_ETH_Init+0x88>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ba2:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <MX_ETH_Init+0x80>)
 8000ba4:	4a15      	ldr	r2, [pc, #84]	@ (8000bfc <MX_ETH_Init+0x88>)
 8000ba6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_ETH_Init+0x80>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bae:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_ETH_Init+0x80>)
 8000bb0:	4a13      	ldr	r2, [pc, #76]	@ (8000c00 <MX_ETH_Init+0x8c>)
 8000bb2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <MX_ETH_Init+0x80>)
 8000bb6:	4a13      	ldr	r2, [pc, #76]	@ (8000c04 <MX_ETH_Init+0x90>)
 8000bb8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_ETH_Init+0x80>)
 8000bbc:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000bc0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000bc2:	480c      	ldr	r0, [pc, #48]	@ (8000bf4 <MX_ETH_Init+0x80>)
 8000bc4:	f003 fcf0 	bl	80045a8 <HAL_ETH_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000bce:	f000 fb7d 	bl	80012cc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000bd2:	2238      	movs	r2, #56	@ 0x38
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <MX_ETH_Init+0x94>)
 8000bd8:	f00d f98e 	bl	800def8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <MX_ETH_Init+0x94>)
 8000bde:	2221      	movs	r2, #33	@ 0x21
 8000be0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_ETH_Init+0x94>)
 8000be4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000be8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bea:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <MX_ETH_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	240001f0 	.word	0x240001f0
 8000bf8:	40028000 	.word	0x40028000
 8000bfc:	2400091c 	.word	0x2400091c
 8000c00:	240000c4 	.word	0x240000c4
 8000c04:	24000064 	.word	0x24000064
 8000c08:	24000140 	.word	0x24000140

08000c0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c12:	4a1c      	ldr	r2, [pc, #112]	@ (8000c84 <MX_I2C1_Init+0x78>)
 8000c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c18:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <MX_I2C1_Init+0x7c>)
 8000c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c1c:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c22:	4b17      	ldr	r3, [pc, #92]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c28:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c34:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c46:	480e      	ldr	r0, [pc, #56]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c48:	f004 fae0 	bl	800520c <HAL_I2C_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c52:	f000 fb3b 	bl	80012cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4809      	ldr	r0, [pc, #36]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c5a:	f005 f827 	bl	8005cac <HAL_I2CEx_ConfigAnalogFilter>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c64:	f000 fb32 	bl	80012cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <MX_I2C1_Init+0x74>)
 8000c6c:	f005 f869 	bl	8005d42 <HAL_I2CEx_ConfigDigitalFilter>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c76:	f000 fb29 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	240002a0 	.word	0x240002a0
 8000c84:	40005400 	.word	0x40005400
 8000c88:	00303d5b 	.word	0x00303d5b

08000c8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09a      	sub	sp, #104	@ 0x68
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	222c      	movs	r2, #44	@ 0x2c
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f00d f916 	bl	800def8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ccc:	4b43      	ldr	r3, [pc, #268]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000cce:	4a44      	ldr	r2, [pc, #272]	@ (8000de0 <MX_TIM1_Init+0x154>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cd2:	4b42      	ldr	r3, [pc, #264]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b40      	ldr	r3, [pc, #256]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000cde:	4b3f      	ldr	r3, [pc, #252]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000ce0:	22ff      	movs	r2, #255	@ 0xff
 8000ce2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cea:	4b3c      	ldr	r3, [pc, #240]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cf6:	4839      	ldr	r0, [pc, #228]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000cf8:	f008 fece 	bl	8009a98 <HAL_TIM_Base_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d02:	f000 fae3 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d0c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000d10:	4619      	mov	r1, r3
 8000d12:	4832      	ldr	r0, [pc, #200]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000d14:	f009 f99a 	bl	800a04c <HAL_TIM_ConfigClockSource>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d1e:	f000 fad5 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d22:	482e      	ldr	r0, [pc, #184]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000d24:	f008 ff0f 	bl	8009b46 <HAL_TIM_PWM_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d2e:	f000 facd 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4825      	ldr	r0, [pc, #148]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000d46:	f009 feb9 	bl	800aabc <HAL_TIMEx_MasterConfigSynchronization>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000d50:	f000 fabc 	bl	80012cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d54:	2360      	movs	r3, #96	@ 0x60
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	4818      	ldr	r0, [pc, #96]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000d7a:	f009 f853 	bl	8009e24 <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000d84:	f000 faa2 	bl	80012cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000daa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000dbe:	f009 ff0b 	bl	800abd8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000dc8:	f000 fa80 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <MX_TIM1_Init+0x150>)
 8000dce:	f000 fccf 	bl	8001770 <HAL_TIM_MspPostInit>

}
 8000dd2:	bf00      	nop
 8000dd4:	3768      	adds	r7, #104	@ 0x68
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	240002f4 	.word	0x240002f4
 8000de0:	40010000 	.word	0x40010000

08000de4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	@ 0x38
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df8:	f107 031c 	add.w	r3, r7, #28
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	615a      	str	r2, [r3, #20]
 8000e14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e16:	4b2d      	ldr	r3, [pc, #180]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000e2a:	4b28      	ldr	r3, [pc, #160]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e2c:	22ff      	movs	r2, #255	@ 0xff
 8000e2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e36:	4b25      	ldr	r3, [pc, #148]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e3c:	4823      	ldr	r0, [pc, #140]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e3e:	f008 fe2b 	bl	8009a98 <HAL_TIM_Base_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e48:	f000 fa40 	bl	80012cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e56:	4619      	mov	r1, r3
 8000e58:	481c      	ldr	r0, [pc, #112]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e5a:	f009 f8f7 	bl	800a04c <HAL_TIM_ConfigClockSource>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e64:	f000 fa32 	bl	80012cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e68:	4818      	ldr	r0, [pc, #96]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e6a:	f008 fe6c 	bl	8009b46 <HAL_TIM_PWM_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e74:	f000 fa2a 	bl	80012cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4811      	ldr	r0, [pc, #68]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000e88:	f009 fe18 	bl	800aabc <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e92:	f000 fa1b 	bl	80012cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	@ 0x60
 8000e98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000eae:	f008 ffb9 	bl	8009e24 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000eb8:	f000 fa08 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ebc:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <MX_TIM2_Init+0xe8>)
 8000ebe:	f000 fc57 	bl	8001770 <HAL_TIM_MspPostInit>

}
 8000ec2:	bf00      	nop
 8000ec4:	3738      	adds	r7, #56	@ 0x38
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	24000340 	.word	0x24000340

08000ed0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000ed6:	4a23      	ldr	r2, [pc, #140]	@ (8000f64 <MX_USART3_UART_Init+0x94>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f18:	4811      	ldr	r0, [pc, #68]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000f1a:	f009 fedb 	bl	800acd4 <HAL_UART_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f24:	f000 f9d2 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	480d      	ldr	r0, [pc, #52]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000f2c:	f00c fbdd 	bl	800d6ea <HAL_UARTEx_SetTxFifoThreshold>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f36:	f000 f9c9 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4808      	ldr	r0, [pc, #32]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000f3e:	f00c fc12 	bl	800d766 <HAL_UARTEx_SetRxFifoThreshold>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f48:	f000 f9c0 	bl	80012cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f4c:	4804      	ldr	r0, [pc, #16]	@ (8000f60 <MX_USART3_UART_Init+0x90>)
 8000f4e:	f00c fb93 	bl	800d678 <HAL_UARTEx_DisableFifoMode>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f58:	f000 f9b8 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	2400038c 	.word	0x2400038c
 8000f64:	40004800 	.word	0x40004800

08000f68 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f6e:	4a16      	ldr	r2, [pc, #88]	@ (8000fc8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000f70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000f72:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f74:	2209      	movs	r2, #9
 8000f76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f86:	2202      	movs	r2, #2
 8000f88:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	@ (8000fc4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000fb0:	f004 ff13 	bl	8005dda <HAL_PCD_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000fba:	f000 f987 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	24000420 	.word	0x24000420
 8000fc8:	40080000 	.word	0x40080000

08000fcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	@ 0x30
 8000fd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b66      	ldr	r3, [pc, #408]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	4a64      	ldr	r2, [pc, #400]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff2:	4b62      	ldr	r3, [pc, #392]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001000:	4b5e      	ldr	r3, [pc, #376]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001006:	4a5d      	ldr	r2, [pc, #372]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001010:	4b5a      	ldr	r3, [pc, #360]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b57      	ldr	r3, [pc, #348]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001024:	4a55      	ldr	r2, [pc, #340]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800102e:	4b53      	ldr	r3, [pc, #332]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	4b4f      	ldr	r3, [pc, #316]	@ (800117c <MX_GPIO_Init+0x1b0>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	4a4e      	ldr	r2, [pc, #312]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104c:	4b4b      	ldr	r3, [pc, #300]	@ (800117c <MX_GPIO_Init+0x1b0>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800105a:	4b48      	ldr	r3, [pc, #288]	@ (800117c <MX_GPIO_Init+0x1b0>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001060:	4a46      	ldr	r2, [pc, #280]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106a:	4b44      	ldr	r3, [pc, #272]	@ (800117c <MX_GPIO_Init+0x1b0>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001070:	f003 0310 	and.w	r3, r3, #16
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001078:	4b40      	ldr	r3, [pc, #256]	@ (800117c <MX_GPIO_Init+0x1b0>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107e:	4a3f      	ldr	r2, [pc, #252]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001080:	f043 0308 	orr.w	r3, r3, #8
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001088:	4b3c      	ldr	r3, [pc, #240]	@ (800117c <MX_GPIO_Init+0x1b0>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001096:	4b39      	ldr	r3, [pc, #228]	@ (800117c <MX_GPIO_Init+0x1b0>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109c:	4a37      	ldr	r2, [pc, #220]	@ (800117c <MX_GPIO_Init+0x1b0>)
 800109e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a6:	4b35      	ldr	r3, [pc, #212]	@ (800117c <MX_GPIO_Init+0x1b0>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f244 0101 	movw	r1, #16385	@ 0x4001
 80010ba:	4831      	ldr	r0, [pc, #196]	@ (8001180 <MX_GPIO_Init+0x1b4>)
 80010bc:	f004 f858 	bl	8005170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010c6:	482f      	ldr	r0, [pc, #188]	@ (8001184 <MX_GPIO_Init+0x1b8>)
 80010c8:	f004 f852 	bl	8005170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2102      	movs	r1, #2
 80010d0:	482d      	ldr	r0, [pc, #180]	@ (8001188 <MX_GPIO_Init+0x1bc>)
 80010d2:	f004 f84d 	bl	8005170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4827      	ldr	r0, [pc, #156]	@ (800118c <MX_GPIO_Init+0x1c0>)
 80010ee:	f003 fe8f 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80010f2:	f244 0301 	movw	r3, #16385	@ 0x4001
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	481d      	ldr	r0, [pc, #116]	@ (8001180 <MX_GPIO_Init+0x1b4>)
 800110c:	f003 fe80 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001110:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	4619      	mov	r1, r3
 8001128:	4816      	ldr	r0, [pc, #88]	@ (8001184 <MX_GPIO_Init+0x1b8>)
 800112a:	f003 fe71 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001132:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	4813      	ldr	r0, [pc, #76]	@ (8001190 <MX_GPIO_Init+0x1c4>)
 8001144:	f003 fe64 	bl	8004e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 031c 	add.w	r3, r7, #28
 800115c:	4619      	mov	r1, r3
 800115e:	480a      	ldr	r0, [pc, #40]	@ (8001188 <MX_GPIO_Init+0x1bc>)
 8001160:	f003 fe56 	bl	8004e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	2028      	movs	r0, #40	@ 0x28
 800116a:	f002 faa0 	bl	80036ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800116e:	2028      	movs	r0, #40	@ 0x28
 8001170:	f002 fab7 	bl	80036e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001174:	bf00      	nop
 8001176:	3730      	adds	r7, #48	@ 0x30
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	58024400 	.word	0x58024400
 8001180:	58020400 	.word	0x58020400
 8001184:	58020c00 	.word	0x58020c00
 8001188:	58021000 	.word	0x58021000
 800118c:	58020800 	.word	0x58020800
 8001190:	58021800 	.word	0x58021800

08001194 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
if (GPIO_Pin == GPIO_PIN_13) {
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011a4:	d104      	bne.n	80011b0 <HAL_GPIO_EXTI_Callback+0x1c>
HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80011a6:	2101      	movs	r1, #1
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x28>)
 80011aa:	f003 fffa 	bl	80051a2 <HAL_GPIO_TogglePin>

} else {
__NOP();
}
}
 80011ae:	e000      	b.n	80011b2 <HAL_GPIO_EXTI_Callback+0x1e>
__NOP();
 80011b0:	bf00      	nop
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	58020400 	.word	0x58020400

080011c0 <HAL_ADC_ConvCpltCallback>:


//rotina ADC

 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	 if (hadc->Instance == ADC1) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a07      	ldr	r2, [pc, #28]	@ (80011ec <HAL_ADC_ConvCpltCallback+0x2c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d108      	bne.n	80011e4 <HAL_ADC_ConvCpltCallback+0x24>
		 value_adc = HAL_ADC_GetValue(hadc);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f001 f996 	bl	8002504 <HAL_ADC_GetValue>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a05      	ldr	r2, [pc, #20]	@ (80011f0 <HAL_ADC_ConvCpltCallback+0x30>)
 80011dc:	6013      	str	r3, [r2, #0]
		 conversion_complete = 1;
 80011de:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_ADC_ConvCpltCallback+0x34>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]

	 }
 }
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40022000 	.word	0x40022000
 80011f0:	24000904 	.word	0x24000904
 80011f4:	24000908 	.word	0x24000908

080011f8 <PCF8591_ReadAnalog>:


//Função de leitura no modulo sensor
uint8_t PCF8591_ReadAnalog(uint8_t channel)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	uint8_t config_byte = 0x40 | (channel & 0x03); // Select the channel (A0, A1, A2, A3)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	b25b      	sxtb	r3, r3
 800120c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001210:	b25b      	sxtb	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	73fb      	strb	r3, [r7, #15]
	uint8_t analog_data[2];

	// Send configuration byte to select the ADC channel
	HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDRESS, &config_byte, 1, 1000);
 8001216:	f107 020f 	add.w	r2, r7, #15
 800121a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	2190      	movs	r1, #144	@ 0x90
 8001224:	4808      	ldr	r0, [pc, #32]	@ (8001248 <PCF8591_ReadAnalog+0x50>)
 8001226:	f004 f88d 	bl	8005344 <HAL_I2C_Master_Transmit>

	// Read two bytes: first byte is a dummy, second byte is the actual analog value
	HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDRESS, analog_data, 2, 1000);
 800122a:	f107 020c 	add.w	r2, r7, #12
 800122e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2302      	movs	r3, #2
 8001236:	2190      	movs	r1, #144	@ 0x90
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <PCF8591_ReadAnalog+0x50>)
 800123a:	f004 f99b 	bl	8005574 <HAL_I2C_Master_Receive>

	// Return the second byte which contains the valid ADC reading
	return analog_data[1];
 800123e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	240002a0 	.word	0x240002a0

0800124c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

  if (strncmp(rx_buffer, "Read_AIN0", 9) == 0) {
 8001254:	2209      	movs	r2, #9
 8001256:	4917      	ldr	r1, [pc, #92]	@ (80012b4 <HAL_UART_RxCpltCallback+0x68>)
 8001258:	4817      	ldr	r0, [pc, #92]	@ (80012b8 <HAL_UART_RxCpltCallback+0x6c>)
 800125a:	f00c fe55 	bl	800df08 <strncmp>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <HAL_UART_RxCpltCallback+0x1e>
	  execute_flag = '1';
 8001264:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <HAL_UART_RxCpltCallback+0x70>)
 8001266:	2231      	movs	r2, #49	@ 0x31
 8001268:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN1", 9) == 0) {
 800126a:	2209      	movs	r2, #9
 800126c:	4914      	ldr	r1, [pc, #80]	@ (80012c0 <HAL_UART_RxCpltCallback+0x74>)
 800126e:	4812      	ldr	r0, [pc, #72]	@ (80012b8 <HAL_UART_RxCpltCallback+0x6c>)
 8001270:	f00c fe4a 	bl	800df08 <strncmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <HAL_UART_RxCpltCallback+0x34>
	  execute_flag = '2';
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <HAL_UART_RxCpltCallback+0x70>)
 800127c:	2232      	movs	r2, #50	@ 0x32
 800127e:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Read_AIN3", 9) == 0) {
 8001280:	2209      	movs	r2, #9
 8001282:	4910      	ldr	r1, [pc, #64]	@ (80012c4 <HAL_UART_RxCpltCallback+0x78>)
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <HAL_UART_RxCpltCallback+0x6c>)
 8001286:	f00c fe3f 	bl	800df08 <strncmp>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d102      	bne.n	8001296 <HAL_UART_RxCpltCallback+0x4a>
	  execute_flag = '3';
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <HAL_UART_RxCpltCallback+0x70>)
 8001292:	2233      	movs	r2, #51	@ 0x33
 8001294:	701a      	strb	r2, [r3, #0]
  }
  if (strncmp(rx_buffer, "Set_DAC_255", 11) == 0) {
 8001296:	220b      	movs	r2, #11
 8001298:	490b      	ldr	r1, [pc, #44]	@ (80012c8 <HAL_UART_RxCpltCallback+0x7c>)
 800129a:	4807      	ldr	r0, [pc, #28]	@ (80012b8 <HAL_UART_RxCpltCallback+0x6c>)
 800129c:	f00c fe34 	bl	800df08 <strncmp>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d102      	bne.n	80012ac <HAL_UART_RxCpltCallback+0x60>
	  execute_flag = '4';
 80012a6:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <HAL_UART_RxCpltCallback+0x70>)
 80012a8:	2234      	movs	r2, #52	@ 0x34
 80012aa:	701a      	strb	r2, [r3, #0]
  }

}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	0800e85c 	.word	0x0800e85c
 80012b8:	2400090c 	.word	0x2400090c
 80012bc:	24000000 	.word	0x24000000
 80012c0:	0800e868 	.word	0x0800e868
 80012c4:	0800e874 	.word	0x0800e874
 80012c8:	0800e880 	.word	0x0800e880

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <Error_Handler+0x8>

080012d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_MspInit+0x30>)
 80012e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012e4:	4a08      	ldr	r2, [pc, #32]	@ (8001308 <HAL_MspInit+0x30>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <HAL_MspInit+0x30>)
 80012f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	58024400 	.word	0x58024400

0800130c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0ba      	sub	sp, #232	@ 0xe8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	22c0      	movs	r2, #192	@ 0xc0
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f00c fde3 	bl	800def8 <memset>
  if(hadc->Instance==ADC1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a30      	ldr	r2, [pc, #192]	@ (80013f8 <HAL_ADC_MspInit+0xec>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d158      	bne.n	80013ee <HAL_ADC_MspInit+0xe2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800133c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 800134c:	2312      	movs	r3, #18
 800134e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001350:	2303      	movs	r3, #3
 8001352:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001354:	2302      	movs	r3, #2
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800135c:	23c0      	movs	r3, #192	@ 0xc0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001360:	2320      	movs	r3, #32
 8001362:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8001364:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001368:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	4618      	mov	r0, r3
 8001376:	f005 fe91 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_ADC_MspInit+0x78>
    {
      Error_Handler();
 8001380:	f7ff ffa4 	bl	80012cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001384:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_ADC_MspInit+0xf0>)
 8001386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800138a:	4a1c      	ldr	r2, [pc, #112]	@ (80013fc <HAL_ADC_MspInit+0xf0>)
 800138c:	f043 0320 	orr.w	r3, r3, #32
 8001390:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001394:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <HAL_ADC_MspInit+0xf0>)
 8001396:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800139a:	f003 0320 	and.w	r3, r3, #32
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <HAL_ADC_MspInit+0xf0>)
 80013a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a8:	4a14      	ldr	r2, [pc, #80]	@ (80013fc <HAL_ADC_MspInit+0xf0>)
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b2:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_ADC_MspInit+0xf0>)
 80013b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013c0:	2308      	movs	r3, #8
 80013c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4809      	ldr	r0, [pc, #36]	@ (8001400 <HAL_ADC_MspInit+0xf4>)
 80013da:	f003 fd19 	bl	8004e10 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2012      	movs	r0, #18
 80013e4:	f002 f963 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013e8:	2012      	movs	r0, #18
 80013ea:	f002 f97a 	bl	80036e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013ee:	bf00      	nop
 80013f0:	37e8      	adds	r7, #232	@ 0xe8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40022000 	.word	0x40022000
 80013fc:	58024400 	.word	0x58024400
 8001400:	58020000 	.word	0x58020000

08001404 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a18      	ldr	r2, [pc, #96]	@ (8001484 <HAL_DAC_MspInit+0x80>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d129      	bne.n	800147a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001426:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <HAL_DAC_MspInit+0x84>)
 8001428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800142c:	4a16      	ldr	r2, [pc, #88]	@ (8001488 <HAL_DAC_MspInit+0x84>)
 800142e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001432:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <HAL_DAC_MspInit+0x84>)
 8001438:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800143c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <HAL_DAC_MspInit+0x84>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800144a:	4a0f      	ldr	r2, [pc, #60]	@ (8001488 <HAL_DAC_MspInit+0x84>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <HAL_DAC_MspInit+0x84>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001462:	2320      	movs	r3, #32
 8001464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001466:	2303      	movs	r3, #3
 8001468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4805      	ldr	r0, [pc, #20]	@ (800148c <HAL_DAC_MspInit+0x88>)
 8001476:	f003 fccb 	bl	8004e10 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 800147a:	bf00      	nop
 800147c:	3728      	adds	r7, #40	@ 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40007400 	.word	0x40007400
 8001488:	58024400 	.word	0x58024400
 800148c:	58020000 	.word	0x58020000

08001490 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08e      	sub	sp, #56	@ 0x38
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a59      	ldr	r2, [pc, #356]	@ (8001614 <HAL_ETH_MspInit+0x184>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	f040 80ab 	bne.w	800160a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80014b4:	4b58      	ldr	r3, [pc, #352]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 80014b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014ba:	4a57      	ldr	r2, [pc, #348]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 80014bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014c0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014c4:	4b54      	ldr	r3, [pc, #336]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 80014c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80014ce:	623b      	str	r3, [r7, #32]
 80014d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80014d2:	4b51      	ldr	r3, [pc, #324]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 80014d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014d8:	4a4f      	ldr	r2, [pc, #316]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 80014da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014de:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80014e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 80014e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80014f0:	4b49      	ldr	r3, [pc, #292]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 80014f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80014f6:	4a48      	ldr	r2, [pc, #288]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014fc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001500:	4b45      	ldr	r3, [pc, #276]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 8001502:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b42      	ldr	r3, [pc, #264]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001514:	4a40      	ldr	r2, [pc, #256]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800151e:	4b3e      	ldr	r3, [pc, #248]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b3a      	ldr	r3, [pc, #232]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001532:	4a39      	ldr	r2, [pc, #228]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800153c:	4b36      	ldr	r3, [pc, #216]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	4b33      	ldr	r3, [pc, #204]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001550:	4a31      	ldr	r2, [pc, #196]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 8001552:	f043 0302 	orr.w	r3, r3, #2
 8001556:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800155a:	4b2f      	ldr	r3, [pc, #188]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001568:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156e:	4a2a      	ldr	r2, [pc, #168]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 8001570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001578:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <HAL_ETH_MspInit+0x188>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001586:	2332      	movs	r3, #50	@ 0x32
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001596:	230b      	movs	r3, #11
 8001598:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	481e      	ldr	r0, [pc, #120]	@ (800161c <HAL_ETH_MspInit+0x18c>)
 80015a2:	f003 fc35 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80015a6:	2386      	movs	r3, #134	@ 0x86
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b6:	230b      	movs	r3, #11
 80015b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4817      	ldr	r0, [pc, #92]	@ (8001620 <HAL_ETH_MspInit+0x190>)
 80015c2:	f003 fc25 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015d8:	230b      	movs	r3, #11
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4810      	ldr	r0, [pc, #64]	@ (8001624 <HAL_ETH_MspInit+0x194>)
 80015e4:	f003 fc14 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80015e8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fa:	230b      	movs	r3, #11
 80015fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001602:	4619      	mov	r1, r3
 8001604:	4808      	ldr	r0, [pc, #32]	@ (8001628 <HAL_ETH_MspInit+0x198>)
 8001606:	f003 fc03 	bl	8004e10 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800160a:	bf00      	nop
 800160c:	3738      	adds	r7, #56	@ 0x38
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40028000 	.word	0x40028000
 8001618:	58024400 	.word	0x58024400
 800161c:	58020800 	.word	0x58020800
 8001620:	58020000 	.word	0x58020000
 8001624:	58020400 	.word	0x58020400
 8001628:	58021800 	.word	0x58021800

0800162c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0ba      	sub	sp, #232	@ 0xe8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	22c0      	movs	r2, #192	@ 0xc0
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00c fc53 	bl	800def8 <memset>
  if(hi2c->Instance==I2C1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a27      	ldr	r2, [pc, #156]	@ (80016f4 <HAL_I2C_MspInit+0xc8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d146      	bne.n	80016ea <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800165c:	f04f 0208 	mov.w	r2, #8
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4618      	mov	r0, r3
 8001674:	f005 fd12 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800167e:	f7ff fe25 	bl	80012cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <HAL_I2C_MspInit+0xcc>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001688:	4a1b      	ldr	r2, [pc, #108]	@ (80016f8 <HAL_I2C_MspInit+0xcc>)
 800168a:	f043 0302 	orr.w	r3, r3, #2
 800168e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001692:	4b19      	ldr	r3, [pc, #100]	@ (80016f8 <HAL_I2C_MspInit+0xcc>)
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a8:	2312      	movs	r3, #18
 80016aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ba:	2304      	movs	r3, #4
 80016bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016c4:	4619      	mov	r1, r3
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <HAL_I2C_MspInit+0xd0>)
 80016c8:	f003 fba2 	bl	8004e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_I2C_MspInit+0xcc>)
 80016ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016d2:	4a09      	ldr	r2, [pc, #36]	@ (80016f8 <HAL_I2C_MspInit+0xcc>)
 80016d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_I2C_MspInit+0xcc>)
 80016de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80016e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016ea:	bf00      	nop
 80016ec:	37e8      	adds	r7, #232	@ 0xe8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40005400 	.word	0x40005400
 80016f8:	58024400 	.word	0x58024400
 80016fc:	58020400 	.word	0x58020400

08001700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a16      	ldr	r2, [pc, #88]	@ (8001768 <HAL_TIM_Base_MspInit+0x68>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d10f      	bne.n	8001732 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001712:	4b16      	ldr	r3, [pc, #88]	@ (800176c <HAL_TIM_Base_MspInit+0x6c>)
 8001714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <HAL_TIM_Base_MspInit+0x6c>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <HAL_TIM_Base_MspInit+0x6c>)
 8001724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001730:	e013      	b.n	800175a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800173a:	d10e      	bne.n	800175a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173c:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_TIM_Base_MspInit+0x6c>)
 800173e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <HAL_TIM_Base_MspInit+0x6c>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <HAL_TIM_Base_MspInit+0x6c>)
 800174e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40010000 	.word	0x40010000
 800176c:	58024400 	.word	0x58024400

08001770 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a25      	ldr	r2, [pc, #148]	@ (8001824 <HAL_TIM_MspPostInit+0xb4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d120      	bne.n	80017d4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001792:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <HAL_TIM_MspPostInit+0xb8>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001798:	4a23      	ldr	r2, [pc, #140]	@ (8001828 <HAL_TIM_MspPostInit+0xb8>)
 800179a:	f043 0310 	orr.w	r3, r3, #16
 800179e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a2:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <HAL_TIM_MspPostInit+0xb8>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a8:	f003 0310 	and.w	r3, r3, #16
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c2:	2301      	movs	r3, #1
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4817      	ldr	r0, [pc, #92]	@ (800182c <HAL_TIM_MspPostInit+0xbc>)
 80017ce:	f003 fb1f 	bl	8004e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80017d2:	e023      	b.n	800181c <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017dc:	d11e      	bne.n	800181c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <HAL_TIM_MspPostInit+0xb8>)
 80017e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e4:	4a10      	ldr	r2, [pc, #64]	@ (8001828 <HAL_TIM_MspPostInit+0xb8>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_TIM_MspPostInit+0xb8>)
 80017f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800180c:	2301      	movs	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	@ (8001830 <HAL_TIM_MspPostInit+0xc0>)
 8001818:	f003 fafa 	bl	8004e10 <HAL_GPIO_Init>
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	@ 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40010000 	.word	0x40010000
 8001828:	58024400 	.word	0x58024400
 800182c:	58021000 	.word	0x58021000
 8001830:	58020000 	.word	0x58020000

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b0ba      	sub	sp, #232	@ 0xe8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	22c0      	movs	r2, #192	@ 0xc0
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00c fb4f 	bl	800def8 <memset>
  if(huart->Instance==USART3)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2b      	ldr	r2, [pc, #172]	@ (800190c <HAL_UART_MspInit+0xd8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d14e      	bne.n	8001902 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001864:	f04f 0202 	mov.w	r2, #2
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001876:	f107 0310 	add.w	r3, r7, #16
 800187a:	4618      	mov	r0, r3
 800187c:	f005 fc0e 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001886:	f7ff fd21 	bl	80012cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800188a:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <HAL_UART_MspInit+0xdc>)
 800188c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001890:	4a1f      	ldr	r2, [pc, #124]	@ (8001910 <HAL_UART_MspInit+0xdc>)
 8001892:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001896:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800189a:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <HAL_UART_MspInit+0xdc>)
 800189c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_UART_MspInit+0xdc>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	4a18      	ldr	r2, [pc, #96]	@ (8001910 <HAL_UART_MspInit+0xdc>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_UART_MspInit+0xdc>)
 80018ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018e0:	2307      	movs	r3, #7
 80018e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4809      	ldr	r0, [pc, #36]	@ (8001914 <HAL_UART_MspInit+0xe0>)
 80018ee:	f003 fa8f 	bl	8004e10 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	2027      	movs	r0, #39	@ 0x27
 80018f8:	f001 fed9 	bl	80036ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018fc:	2027      	movs	r0, #39	@ 0x27
 80018fe:	f001 fef0 	bl	80036e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001902:	bf00      	nop
 8001904:	37e8      	adds	r7, #232	@ 0xe8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40004800 	.word	0x40004800
 8001910:	58024400 	.word	0x58024400
 8001914:	58020c00 	.word	0x58020c00

08001918 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0ba      	sub	sp, #232	@ 0xe8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	22c0      	movs	r2, #192	@ 0xc0
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f00c fadd 	bl	800def8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a30      	ldr	r2, [pc, #192]	@ (8001a04 <HAL_PCD_MspInit+0xec>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d159      	bne.n	80019fc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001948:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001954:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001958:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195c:	f107 0310 	add.w	r3, r7, #16
 8001960:	4618      	mov	r0, r3
 8001962:	f005 fb9b 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800196c:	f7ff fcae 	bl	80012cc <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001970:	f004 fb9e 	bl	80060b0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <HAL_PCD_MspInit+0xf0>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197a:	4a23      	ldr	r2, [pc, #140]	@ (8001a08 <HAL_PCD_MspInit+0xf0>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001984:	4b20      	ldr	r3, [pc, #128]	@ (8001a08 <HAL_PCD_MspInit+0xf0>)
 8001986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001992:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80019ac:	230a      	movs	r3, #10
 80019ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4814      	ldr	r0, [pc, #80]	@ (8001a0c <HAL_PCD_MspInit+0xf4>)
 80019ba:	f003 fa29 	bl	8004e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c6:	2300      	movs	r3, #0
 80019c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019d6:	4619      	mov	r1, r3
 80019d8:	480c      	ldr	r0, [pc, #48]	@ (8001a0c <HAL_PCD_MspInit+0xf4>)
 80019da:	f003 fa19 	bl	8004e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80019de:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <HAL_PCD_MspInit+0xf0>)
 80019e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019e4:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <HAL_PCD_MspInit+0xf0>)
 80019e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80019ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_PCD_MspInit+0xf0>)
 80019f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80019fc:	bf00      	nop
 80019fe:	37e8      	adds	r7, #232	@ 0xe8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40080000 	.word	0x40080000
 8001a08:	58024400 	.word	0x58024400
 8001a0c:	58020000 	.word	0x58020000

08001a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <NMI_Handler+0x4>

08001a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <MemManage_Handler+0x4>

08001a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f000 f979 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a74:	4802      	ldr	r0, [pc, #8]	@ (8001a80 <ADC_IRQHandler+0x10>)
 8001a76:	f000 fd53 	bl	8002520 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	24000178 	.word	0x24000178

08001a84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <USART3_IRQHandler+0x10>)
 8001a8a:	f009 fa53 	bl	800af34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2400038c 	.word	0x2400038c

08001a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001aa0:	f003 fb99 	bl	80051d6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d207      	bcs.n	8001ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad8:	f00c fa28 	bl	800df2c <__errno>
 8001adc:	4603      	mov	r3, r0
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	24080000 	.word	0x24080000
 8001b08:	00000400 	.word	0x00000400
 8001b0c:	24000924 	.word	0x24000924
 8001b10:	24000a78 	.word	0x24000a78

08001b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b18:	f000 f826 	bl	8001b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1e:	490d      	ldr	r1, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b34:	4c0a      	ldr	r4, [pc, #40]	@ (8001b60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b42:	f00c f9f9 	bl	800df38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b46:	f7fe fd9b 	bl	8000680 <main>
  bx  lr
 8001b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b54:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001b58:	0800e908 	.word	0x0800e908
  ldr r2, =_sbss
 8001b5c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001b60:	24000a74 	.word	0x24000a74

08001b64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b64:	e7fe      	b.n	8001b64 <ADC3_IRQHandler>
	...

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b37      	ldr	r3, [pc, #220]	@ (8001c4c <SystemInit+0xe4>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b72:	4a36      	ldr	r2, [pc, #216]	@ (8001c4c <SystemInit+0xe4>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b7c:	4b34      	ldr	r3, [pc, #208]	@ (8001c50 <SystemInit+0xe8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	2b06      	cmp	r3, #6
 8001b86:	d807      	bhi.n	8001b98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b88:	4b31      	ldr	r3, [pc, #196]	@ (8001c50 <SystemInit+0xe8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 030f 	bic.w	r3, r3, #15
 8001b90:	4a2f      	ldr	r2, [pc, #188]	@ (8001c50 <SystemInit+0xe8>)
 8001b92:	f043 0307 	orr.w	r3, r3, #7
 8001b96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b98:	4b2e      	ldr	r3, [pc, #184]	@ (8001c54 <SystemInit+0xec>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8001c54 <SystemInit+0xec>)
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <SystemInit+0xec>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001baa:	4b2a      	ldr	r3, [pc, #168]	@ (8001c54 <SystemInit+0xec>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4929      	ldr	r1, [pc, #164]	@ (8001c54 <SystemInit+0xec>)
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <SystemInit+0xf0>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bb6:	4b26      	ldr	r3, [pc, #152]	@ (8001c50 <SystemInit+0xe8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bc2:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <SystemInit+0xe8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 030f 	bic.w	r3, r3, #15
 8001bca:	4a21      	ldr	r2, [pc, #132]	@ (8001c50 <SystemInit+0xe8>)
 8001bcc:	f043 0307 	orr.w	r3, r3, #7
 8001bd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bd2:	4b20      	ldr	r3, [pc, #128]	@ (8001c54 <SystemInit+0xec>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <SystemInit+0xec>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bde:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <SystemInit+0xec>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <SystemInit+0xec>)
 8001be6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c5c <SystemInit+0xf4>)
 8001be8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <SystemInit+0xec>)
 8001bec:	4a1c      	ldr	r2, [pc, #112]	@ (8001c60 <SystemInit+0xf8>)
 8001bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	@ (8001c54 <SystemInit+0xec>)
 8001bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <SystemInit+0xfc>)
 8001bf4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	@ (8001c54 <SystemInit+0xec>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <SystemInit+0xec>)
 8001bfe:	4a19      	ldr	r2, [pc, #100]	@ (8001c64 <SystemInit+0xfc>)
 8001c00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c02:	4b14      	ldr	r3, [pc, #80]	@ (8001c54 <SystemInit+0xec>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c08:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <SystemInit+0xec>)
 8001c0a:	4a16      	ldr	r2, [pc, #88]	@ (8001c64 <SystemInit+0xfc>)
 8001c0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <SystemInit+0xec>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <SystemInit+0xec>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	@ (8001c54 <SystemInit+0xec>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <SystemInit+0xec>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <SystemInit+0x100>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <SystemInit+0x104>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c32:	d202      	bcs.n	8001c3a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <SystemInit+0x108>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <SystemInit+0x10c>)
 8001c3c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001c40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	e000ed00 	.word	0xe000ed00
 8001c50:	52002000 	.word	0x52002000
 8001c54:	58024400 	.word	0x58024400
 8001c58:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c5c:	02020200 	.word	0x02020200
 8001c60:	01ff0000 	.word	0x01ff0000
 8001c64:	01010280 	.word	0x01010280
 8001c68:	5c001000 	.word	0x5c001000
 8001c6c:	ffff0000 	.word	0xffff0000
 8001c70:	51008108 	.word	0x51008108
 8001c74:	52004000 	.word	0x52004000

08001c78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7e:	2003      	movs	r0, #3
 8001c80:	f001 fd0a 	bl	8003698 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c84:	f005 f834 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ce0 <HAL_Init+0x68>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	4913      	ldr	r1, [pc, #76]	@ (8001ce4 <HAL_Init+0x6c>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <HAL_Init+0x68>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ce4 <HAL_Init+0x6c>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce8 <HAL_Init+0x70>)
 8001cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <HAL_Init+0x74>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f000 f814 	bl	8001cf0 <HAL_InitTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e002      	b.n	8001cd8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd2:	f7ff fb01 	bl	80012d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	58024400 	.word	0x58024400
 8001ce4:	0800e88c 	.word	0x0800e88c
 8001ce8:	24000008 	.word	0x24000008
 8001cec:	24000004 	.word	0x24000004

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001cf8:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_InitTick+0x60>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e021      	b.n	8001d48 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d04:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_InitTick+0x64>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_InitTick+0x60>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f001 fcef 	bl	80036fe <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f001 fcb9 	bl	80036ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	@ (8001d58 <HAL_InitTick+0x68>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	24000010 	.word	0x24000010
 8001d54:	24000004 	.word	0x24000004
 8001d58:	2400000c 	.word	0x2400000c

08001d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	24000010 	.word	0x24000010
 8001d80:	24000928 	.word	0x24000928

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	@ (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	24000928 	.word	0x24000928

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	@ (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	24000010 	.word	0x24000010

08001de4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001de8:	4b03      	ldr	r3, [pc, #12]	@ (8001df8 <HAL_GetREVID+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0c1b      	lsrs	r3, r3, #16
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	5c001000 	.word	0x5c001000

08001dfc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001e04:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001e0c:	4904      	ldr	r1, [pc, #16]	@ (8001e20 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	58000400 	.word	0x58000400

08001e24 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	609a      	str	r2, [r3, #8]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	609a      	str	r2, [r3, #8]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3360      	adds	r3, #96	@ 0x60
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b087      	sub	sp, #28
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	3360      	adds	r3, #96	@ 0x60
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	601a      	str	r2, [r3, #0]
  }
}
 8001f28:	bf00      	nop
 8001f2a:	371c      	adds	r7, #28
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b087      	sub	sp, #28
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3330      	adds	r3, #48	@ 0x30
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	0a1b      	lsrs	r3, r3, #8
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	4413      	add	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	211f      	movs	r1, #31
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	401a      	ands	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	f003 011f 	and.w	r1, r3, #31
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fa6:	bf00      	nop
 8001fa8:	371c      	adds	r7, #28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fbe:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	3314      	adds	r3, #20
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	0e5b      	lsrs	r3, r3, #25
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	0d1b      	lsrs	r3, r3, #20
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	2107      	movs	r1, #7
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	401a      	ands	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	0d1b      	lsrs	r3, r3, #20
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	431a      	orrs	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002048:	43db      	mvns	r3, r3
 800204a:	401a      	ands	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0318 	and.w	r3, r3, #24
 8002052:	4908      	ldr	r1, [pc, #32]	@ (8002074 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002054:	40d9      	lsrs	r1, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	400b      	ands	r3, r1
 800205a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800205e:	431a      	orrs	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	000fffff 	.word	0x000fffff

08002078 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 031f 	and.w	r3, r3, #31
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	4b04      	ldr	r3, [pc, #16]	@ (80020d0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80020be:	4013      	ands	r3, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6093      	str	r3, [r2, #8]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	5fffffc0 	.word	0x5fffffc0

080020d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020e8:	d101      	bne.n	80020ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	4b05      	ldr	r3, [pc, #20]	@ (8002120 <LL_ADC_EnableInternalRegulator+0x24>)
 800210a:	4013      	ands	r3, r2
 800210c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	6fffffc0 	.word	0x6fffffc0

08002124 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002134:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002138:	d101      	bne.n	800213e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <LL_ADC_IsEnabled+0x18>
 8002160:	2301      	movs	r3, #1
 8002162:	e000      	b.n	8002166 <LL_ADC_IsEnabled+0x1a>
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b04      	cmp	r3, #4
 8002184:	d101      	bne.n	800218a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d101      	bne.n	80021b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e18f      	b.n	80024fa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff f88f 	bl	800130c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff67 	bl	80020d4 <LL_ADC_IsDeepPowerDownEnabled>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff4d 	bl	80020b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff82 	bl	8002124 <LL_ADC_IsInternalRegulatorEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d114      	bne.n	8002250 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff66 	bl	80020fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002230:	4b87      	ldr	r3, [pc, #540]	@ (8002450 <HAL_ADC_Init+0x290>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	4a87      	ldr	r2, [pc, #540]	@ (8002454 <HAL_ADC_Init+0x294>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002242:	e002      	b.n	800224a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	3b01      	subs	r3, #1
 8002248:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f9      	bne.n	8002244 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff65 	bl	8002124 <LL_ADC_IsInternalRegulatorEnabled>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10d      	bne.n	800227c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002264:	f043 0210 	orr.w	r2, r3, #16
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002270:	f043 0201 	orr.w	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff76 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 8002286:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	f040 8129 	bne.w	80024e8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	f040 8125 	bne.w	80024e8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022a6:	f043 0202 	orr.w	r2, r3, #2
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff4a 	bl	800214c <LL_ADC_IsEnabled>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d136      	bne.n	800232c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a65      	ldr	r2, [pc, #404]	@ (8002458 <HAL_ADC_Init+0x298>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d004      	beq.n	80022d2 <HAL_ADC_Init+0x112>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a63      	ldr	r2, [pc, #396]	@ (800245c <HAL_ADC_Init+0x29c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10e      	bne.n	80022f0 <HAL_ADC_Init+0x130>
 80022d2:	4861      	ldr	r0, [pc, #388]	@ (8002458 <HAL_ADC_Init+0x298>)
 80022d4:	f7ff ff3a 	bl	800214c <LL_ADC_IsEnabled>
 80022d8:	4604      	mov	r4, r0
 80022da:	4860      	ldr	r0, [pc, #384]	@ (800245c <HAL_ADC_Init+0x29c>)
 80022dc:	f7ff ff36 	bl	800214c <LL_ADC_IsEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4323      	orrs	r3, r4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e008      	b.n	8002302 <HAL_ADC_Init+0x142>
 80022f0:	485b      	ldr	r0, [pc, #364]	@ (8002460 <HAL_ADC_Init+0x2a0>)
 80022f2:	f7ff ff2b 	bl	800214c <LL_ADC_IsEnabled>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	bf0c      	ite	eq
 80022fc:	2301      	moveq	r3, #1
 80022fe:	2300      	movne	r3, #0
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d012      	beq.n	800232c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a53      	ldr	r2, [pc, #332]	@ (8002458 <HAL_ADC_Init+0x298>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d004      	beq.n	800231a <HAL_ADC_Init+0x15a>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a51      	ldr	r2, [pc, #324]	@ (800245c <HAL_ADC_Init+0x29c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d101      	bne.n	800231e <HAL_ADC_Init+0x15e>
 800231a:	4a52      	ldr	r2, [pc, #328]	@ (8002464 <HAL_ADC_Init+0x2a4>)
 800231c:	e000      	b.n	8002320 <HAL_ADC_Init+0x160>
 800231e:	4a52      	ldr	r2, [pc, #328]	@ (8002468 <HAL_ADC_Init+0x2a8>)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f7ff fd7c 	bl	8001e24 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800232c:	f7ff fd5a 	bl	8001de4 <HAL_GetREVID>
 8002330:	4603      	mov	r3, r0
 8002332:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002336:	4293      	cmp	r3, r2
 8002338:	d914      	bls.n	8002364 <HAL_ADC_Init+0x1a4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b10      	cmp	r3, #16
 8002340:	d110      	bne.n	8002364 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	7d5b      	ldrb	r3, [r3, #21]
 8002346:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800234c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002352:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7f1b      	ldrb	r3, [r3, #28]
 8002358:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800235a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800235c:	f043 030c 	orr.w	r3, r3, #12
 8002360:	61bb      	str	r3, [r7, #24]
 8002362:	e00d      	b.n	8002380 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7d5b      	ldrb	r3, [r3, #21]
 8002368:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800236e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002374:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	7f1b      	ldrb	r3, [r3, #28]
 800237a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7f1b      	ldrb	r3, [r3, #28]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d106      	bne.n	8002396 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	3b01      	subs	r3, #1
 800238e:	045b      	lsls	r3, r3, #17
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	4b2c      	ldr	r3, [pc, #176]	@ (800246c <HAL_ADC_Init+0x2ac>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	69b9      	ldr	r1, [r7, #24]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fed1 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 80023d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fede 	bl	8002198 <LL_ADC_INJ_IsConversionOngoing>
 80023dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d15f      	bne.n	80024a4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d15c      	bne.n	80024a4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7d1b      	ldrb	r3, [r3, #20]
 80023ee:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002470 <HAL_ADC_Init+0x2b0>)
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	69b9      	ldr	r1, [r7, #24]
 8002408:	430b      	orrs	r3, r1
 800240a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002412:	2b01      	cmp	r3, #1
 8002414:	d130      	bne.n	8002478 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	4b14      	ldr	r3, [pc, #80]	@ (8002474 <HAL_ADC_Init+0x2b4>)
 8002424:	4013      	ands	r3, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800242a:	3a01      	subs	r2, #1
 800242c:	0411      	lsls	r1, r2, #16
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002432:	4311      	orrs	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002438:	4311      	orrs	r1, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800243e:	430a      	orrs	r2, r1
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	611a      	str	r2, [r3, #16]
 800244c:	e01c      	b.n	8002488 <HAL_ADC_Init+0x2c8>
 800244e:	bf00      	nop
 8002450:	24000004 	.word	0x24000004
 8002454:	053e2d63 	.word	0x053e2d63
 8002458:	40022000 	.word	0x40022000
 800245c:	40022100 	.word	0x40022100
 8002460:	58026000 	.word	0x58026000
 8002464:	40022300 	.word	0x40022300
 8002468:	58026300 	.word	0x58026300
 800246c:	fff0c003 	.word	0xfff0c003
 8002470:	ffffbffc 	.word	0xffffbffc
 8002474:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691a      	ldr	r2, [r3, #16]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fde8 	bl	8003074 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d10c      	bne.n	80024c6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f023 010f 	bic.w	r1, r3, #15
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80024c4:	e007      	b.n	80024d6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 020f 	bic.w	r2, r2, #15
 80024d4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	f043 0201 	orr.w	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80024e6:	e007      	b.n	80024f8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ec:	f043 0210 	orr.w	r2, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	@ 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	bf00      	nop

08002504 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	@ 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a87      	ldr	r2, [pc, #540]	@ (8002760 <HAL_ADC_IRQHandler+0x240>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <HAL_ADC_IRQHandler+0x30>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a86      	ldr	r2, [pc, #536]	@ (8002764 <HAL_ADC_IRQHandler+0x244>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d101      	bne.n	8002554 <HAL_ADC_IRQHandler+0x34>
 8002550:	4b85      	ldr	r3, [pc, #532]	@ (8002768 <HAL_ADC_IRQHandler+0x248>)
 8002552:	e000      	b.n	8002556 <HAL_ADC_IRQHandler+0x36>
 8002554:	4b85      	ldr	r3, [pc, #532]	@ (800276c <HAL_ADC_IRQHandler+0x24c>)
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fd8e 	bl	8002078 <LL_ADC_GetMultimode>
 800255c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d017      	beq.n	8002598 <HAL_ADC_IRQHandler+0x78>
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d012      	beq.n	8002598 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d105      	bne.n	800258a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002582:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fecc 	bl	8003328 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2202      	movs	r2, #2
 8002596:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d004      	beq.n	80025ac <HAL_ADC_IRQHandler+0x8c>
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8083 	beq.w	80026be <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d07d      	beq.n	80026be <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff fca8 	bl	8001f34 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d062      	beq.n	80026b0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002764 <HAL_ADC_IRQHandler+0x244>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d002      	beq.n	80025fa <HAL_ADC_IRQHandler+0xda>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	e000      	b.n	80025fc <HAL_ADC_IRQHandler+0xdc>
 80025fa:	4b59      	ldr	r3, [pc, #356]	@ (8002760 <HAL_ADC_IRQHandler+0x240>)
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	4293      	cmp	r3, r2
 8002602:	d008      	beq.n	8002616 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2b05      	cmp	r3, #5
 800260e:	d002      	beq.n	8002616 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b09      	cmp	r3, #9
 8002614:	d104      	bne.n	8002620 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	e00c      	b.n	800263a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a4f      	ldr	r2, [pc, #316]	@ (8002764 <HAL_ADC_IRQHandler+0x244>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d002      	beq.n	8002630 <HAL_ADC_IRQHandler+0x110>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	e000      	b.n	8002632 <HAL_ADC_IRQHandler+0x112>
 8002630:	4b4b      	ldr	r3, [pc, #300]	@ (8002760 <HAL_ADC_IRQHandler+0x240>)
 8002632:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800263a:	6a3b      	ldr	r3, [r7, #32]
 800263c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d135      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b08      	cmp	r3, #8
 8002650:	d12e      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fd8b 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11a      	bne.n	8002698 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 020c 	bic.w	r2, r2, #12
 8002670:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002676:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d112      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	655a      	str	r2, [r3, #84]	@ 0x54
 8002696:	e00b      	b.n	80026b0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269c:	f043 0210 	orr.w	r2, r3, #16
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7fe fd85 	bl	80011c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	220c      	movs	r2, #12
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_ADC_IRQHandler+0x1b2>
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a0 	beq.w	800281e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 809a 	beq.w	800281e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fa:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fc53 	bl	8001fb2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800270c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fc0e 	bl	8001f34 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002718:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a11      	ldr	r2, [pc, #68]	@ (8002764 <HAL_ADC_IRQHandler+0x244>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d002      	beq.n	800272a <HAL_ADC_IRQHandler+0x20a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	e000      	b.n	800272c <HAL_ADC_IRQHandler+0x20c>
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <HAL_ADC_IRQHandler+0x240>)
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	4293      	cmp	r3, r2
 8002732:	d008      	beq.n	8002746 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	2b06      	cmp	r3, #6
 800273e:	d002      	beq.n	8002746 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b07      	cmp	r3, #7
 8002744:	d104      	bne.n	8002750 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	e014      	b.n	800277a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a03      	ldr	r2, [pc, #12]	@ (8002764 <HAL_ADC_IRQHandler+0x244>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d00a      	beq.n	8002770 <HAL_ADC_IRQHandler+0x250>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	e008      	b.n	8002772 <HAL_ADC_IRQHandler+0x252>
 8002760:	40022000 	.word	0x40022000
 8002764:	40022100 	.word	0x40022100
 8002768:	40022300 	.word	0x40022300
 800276c:	58026300 	.word	0x58026300
 8002770:	4b84      	ldr	r3, [pc, #528]	@ (8002984 <HAL_ADC_IRQHandler+0x464>)
 8002772:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d047      	beq.n	8002810 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_ADC_IRQHandler+0x27a>
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d03f      	beq.n	8002810 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002796:	2b00      	cmp	r3, #0
 8002798:	d13a      	bne.n	8002810 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a4:	2b40      	cmp	r3, #64	@ 0x40
 80027a6:	d133      	bne.n	8002810 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d12e      	bne.n	8002810 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fcee 	bl	8002198 <LL_ADC_INJ_IsConversionOngoing>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d11a      	bne.n	80027f8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027d0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d112      	bne.n	8002810 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80027f6:	e00b      	b.n	8002810 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fd61 	bl	80032d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2260      	movs	r2, #96	@ 0x60
 800281c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002824:	2b00      	cmp	r3, #0
 8002826:	d011      	beq.n	800284c <HAL_ADC_IRQHandler+0x32c>
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002836:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8a8 	bl	8002994 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2280      	movs	r2, #128	@ 0x80
 800284a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <HAL_ADC_IRQHandler+0x35c>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00d      	beq.n	800287c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 fd47 	bl	8003300 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800287a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002882:	2b00      	cmp	r3, #0
 8002884:	d012      	beq.n	80028ac <HAL_ADC_IRQHandler+0x38c>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00d      	beq.n	80028ac <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002894:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fd39 	bl	8003314 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028aa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d043      	beq.n	800293e <HAL_ADC_IRQHandler+0x41e>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d03e      	beq.n	800293e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d102      	bne.n	80028ce <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80028c8:	2301      	movs	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80028cc:	e021      	b.n	8002912 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002984 <HAL_ADC_IRQHandler+0x464>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_ADC_IRQHandler+0x3c8>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a29      	ldr	r2, [pc, #164]	@ (8002988 <HAL_ADC_IRQHandler+0x468>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_IRQHandler+0x3cc>
 80028e8:	4b28      	ldr	r3, [pc, #160]	@ (800298c <HAL_ADC_IRQHandler+0x46c>)
 80028ea:	e000      	b.n	80028ee <HAL_ADC_IRQHandler+0x3ce>
 80028ec:	4b28      	ldr	r3, [pc, #160]	@ (8002990 <HAL_ADC_IRQHandler+0x470>)
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fbd0 	bl	8002094 <LL_ADC_GetMultiDMATransfer>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80028fa:	2301      	movs	r3, #1
 80028fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fe:	e008      	b.n	8002912 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800290e:	2301      	movs	r3, #1
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002914:	2b01      	cmp	r3, #1
 8002916:	d10e      	bne.n	8002936 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800291c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	f043 0202 	orr.w	r2, r3, #2
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f839 	bl	80029a8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2210      	movs	r2, #16
 800293c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d018      	beq.n	800297a <HAL_ADC_IRQHandler+0x45a>
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	d013      	beq.n	800297a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002956:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002962:	f043 0208 	orr.w	r2, r3, #8
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002972:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fcb9 	bl	80032ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	@ 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40022000 	.word	0x40022000
 8002988:	40022100 	.word	0x40022100
 800298c:	40022300 	.word	0x40022300
 8002990:	58026300 	.word	0x58026300

08002994 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b0a1      	sub	sp, #132	@ 0x84
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a65      	ldr	r2, [pc, #404]	@ (8002b6c <HAL_ADC_ConfigChannel+0x1b0>)
 80029d6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x2a>
 80029e2:	2302      	movs	r3, #2
 80029e4:	e32e      	b.n	8003044 <HAL_ADC_ConfigChannel+0x688>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fbbd 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f040 8313 	bne.w	8003026 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	db2c      	blt.n	8002a62 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d108      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x6a>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0e9b      	lsrs	r3, r3, #26
 8002a1a:	f003 031f 	and.w	r3, r3, #31
 8002a1e:	2201      	movs	r2, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	e016      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x98>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a36:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e003      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002a42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f003 031f 	and.w	r3, r3, #31
 8002a4e:	2201      	movs	r2, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	69d1      	ldr	r1, [r2, #28]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	6812      	ldr	r2, [r2, #0]
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f7ff fa73 	bl	8001f5a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fb7a 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 8002a7e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fb87 	bl	8002198 <LL_ADC_INJ_IsConversionOngoing>
 8002a8a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 80b8 	bne.w	8002c04 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 80b4 	bne.w	8002c04 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6819      	ldr	r1, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f7ff fa95 	bl	8001fd8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002aae:	4b30      	ldr	r3, [pc, #192]	@ (8002b70 <HAL_ADC_ConfigChannel+0x1b4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aba:	d10b      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x118>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	089b      	lsrs	r3, r3, #2
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	e01d      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x154>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x13e>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	e00a      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x154>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	089b      	lsrs	r3, r3, #2
 8002b06:	f003 0304 	and.w	r3, r3, #4
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d02c      	beq.n	8002b74 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b28:	f7ff f9b0 	bl	8001e8c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6919      	ldr	r1, [r3, #16]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	7e5b      	ldrb	r3, [r3, #25]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x186>
 8002b3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002b40:	e000      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x188>
 8002b42:	2300      	movs	r3, #0
 8002b44:	461a      	mov	r2, r3
 8002b46:	f7ff f9da 	bl	8001efe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6919      	ldr	r1, [r3, #16]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	7e1b      	ldrb	r3, [r3, #24]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x1a4>
 8002b5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b5e:	e000      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x1a6>
 8002b60:	2300      	movs	r3, #0
 8002b62:	461a      	mov	r2, r3
 8002b64:	f7ff f9b2 	bl	8001ecc <LL_ADC_SetDataRightShift>
 8002b68:	e04c      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x248>
 8002b6a:	bf00      	nop
 8002b6c:	47ff0000 	.word	0x47ff0000
 8002b70:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	069b      	lsls	r3, r3, #26
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d107      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002b96:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	069b      	lsls	r3, r3, #26
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d107      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bba:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bc2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	069b      	lsls	r3, r3, #26
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d107      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002bde:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	069b      	lsls	r3, r3, #26
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d107      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002c02:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fa9f 	bl	800214c <LL_ADC_IsEnabled>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f040 8211 	bne.w	8003038 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f7ff fa04 	bl	8002030 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4aa1      	ldr	r2, [pc, #644]	@ (8002eb4 <HAL_ADC_ConfigChannel+0x4f8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	f040 812e 	bne.w	8002e90 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10b      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x2a0>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0e9b      	lsrs	r3, r3, #26
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2b09      	cmp	r3, #9
 8002c52:	bf94      	ite	ls
 8002c54:	2301      	movls	r3, #1
 8002c56:	2300      	movhi	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e019      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x2d4>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e003      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3301      	adds	r3, #1
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b09      	cmp	r3, #9
 8002c88:	bf94      	ite	ls
 8002c8a:	2301      	movls	r3, #1
 8002c8c:	2300      	movhi	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d079      	beq.n	8002d88 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x2f4>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	069b      	lsls	r3, r3, #26
 8002caa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cae:	e015      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x320>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002cbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002cc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002cc8:	2320      	movs	r3, #32
 8002cca:	e003      	b.n	8002cd4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8002ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002cce:	fab3 f383 	clz	r3, r3
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d109      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x340>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	e017      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x370>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8002d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2101      	movs	r1, #1
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10a      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x396>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	3301      	adds	r3, #1
 8002d44:	f003 021f 	and.w	r2, r3, #31
 8002d48:	4613      	mov	r3, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4413      	add	r3, r2
 8002d4e:	051b      	lsls	r3, r3, #20
 8002d50:	e018      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x3c8>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d62:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8002d6a:	2320      	movs	r3, #32
 8002d6c:	e003      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3301      	adds	r3, #1
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d84:	430b      	orrs	r3, r1
 8002d86:	e07e      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x3e8>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	0e9b      	lsrs	r3, r3, #26
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	069b      	lsls	r3, r3, #26
 8002d9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002da2:	e015      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x414>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	fa93 f3a3 	rbit	r3, r3
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8002dbc:	2320      	movs	r3, #32
 8002dbe:	e003      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	fab3 f383 	clz	r3, r3
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	3301      	adds	r3, #1
 8002dca:	069b      	lsls	r3, r3, #26
 8002dcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d109      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x434>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2101      	movs	r1, #1
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	e017      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x464>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	61bb      	str	r3, [r7, #24]
  return result;
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e003      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3301      	adds	r3, #1
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e20:	ea42 0103 	orr.w	r1, r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10d      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x490>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4413      	add	r3, r2
 8002e42:	3b1e      	subs	r3, #30
 8002e44:	051b      	lsls	r3, r3, #20
 8002e46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	e01b      	b.n	8002e84 <HAL_ADC_ConfigChannel+0x4c8>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	60fb      	str	r3, [r7, #12]
  return result;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e003      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	f003 021f 	and.w	r2, r3, #31
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3b1e      	subs	r3, #30
 8002e7e:	051b      	lsls	r3, r3, #20
 8002e80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e84:	430b      	orrs	r3, r1
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	6892      	ldr	r2, [r2, #8]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	f7ff f8a4 	bl	8001fd8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f280 80cf 	bge.w	8003038 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a06      	ldr	r2, [pc, #24]	@ (8002eb8 <HAL_ADC_ConfigChannel+0x4fc>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_ADC_ConfigChannel+0x4f2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <HAL_ADC_ConfigChannel+0x500>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d10a      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x508>
 8002eae:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x504>)
 8002eb0:	e009      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x50a>
 8002eb2:	bf00      	nop
 8002eb4:	47ff0000 	.word	0x47ff0000
 8002eb8:	40022000 	.word	0x40022000
 8002ebc:	40022100 	.word	0x40022100
 8002ec0:	40022300 	.word	0x40022300
 8002ec4:	4b61      	ldr	r3, [pc, #388]	@ (800304c <HAL_ADC_ConfigChannel+0x690>)
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe ffd2 	bl	8001e70 <LL_ADC_GetCommonPathInternalCh>
 8002ecc:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5f      	ldr	r2, [pc, #380]	@ (8003050 <HAL_ADC_ConfigChannel+0x694>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d004      	beq.n	8002ee2 <HAL_ADC_ConfigChannel+0x526>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a5d      	ldr	r2, [pc, #372]	@ (8003054 <HAL_ADC_ConfigChannel+0x698>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d10e      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x544>
 8002ee2:	485b      	ldr	r0, [pc, #364]	@ (8003050 <HAL_ADC_ConfigChannel+0x694>)
 8002ee4:	f7ff f932 	bl	800214c <LL_ADC_IsEnabled>
 8002ee8:	4604      	mov	r4, r0
 8002eea:	485a      	ldr	r0, [pc, #360]	@ (8003054 <HAL_ADC_ConfigChannel+0x698>)
 8002eec:	f7ff f92e 	bl	800214c <LL_ADC_IsEnabled>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4323      	orrs	r3, r4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e008      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x556>
 8002f00:	4855      	ldr	r0, [pc, #340]	@ (8003058 <HAL_ADC_ConfigChannel+0x69c>)
 8002f02:	f7ff f923 	bl	800214c <LL_ADC_IsEnabled>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d07d      	beq.n	8003012 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a50      	ldr	r2, [pc, #320]	@ (800305c <HAL_ADC_ConfigChannel+0x6a0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d130      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x5c6>
 8002f20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d12b      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003058 <HAL_ADC_ConfigChannel+0x69c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	f040 8081 	bne.w	8003038 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a45      	ldr	r2, [pc, #276]	@ (8003050 <HAL_ADC_ConfigChannel+0x694>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_ADC_ConfigChannel+0x58e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a43      	ldr	r2, [pc, #268]	@ (8003054 <HAL_ADC_ConfigChannel+0x698>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x592>
 8002f4a:	4a45      	ldr	r2, [pc, #276]	@ (8003060 <HAL_ADC_ConfigChannel+0x6a4>)
 8002f4c:	e000      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x594>
 8002f4e:	4a3f      	ldr	r2, [pc, #252]	@ (800304c <HAL_ADC_ConfigChannel+0x690>)
 8002f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f56:	4619      	mov	r1, r3
 8002f58:	4610      	mov	r0, r2
 8002f5a:	f7fe ff76 	bl	8001e4a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f5e:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_ADC_ConfigChannel+0x6a8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	4a40      	ldr	r2, [pc, #256]	@ (8003068 <HAL_ADC_ConfigChannel+0x6ac>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	099b      	lsrs	r3, r3, #6
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f72:	e002      	b.n	8002f7a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f9      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f80:	e05a      	b.n	8003038 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a39      	ldr	r2, [pc, #228]	@ (800306c <HAL_ADC_ConfigChannel+0x6b0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d11e      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x60e>
 8002f8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d119      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003058 <HAL_ADC_ConfigChannel+0x69c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d14b      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	@ (8003050 <HAL_ADC_ConfigChannel+0x694>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x5f8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a29      	ldr	r2, [pc, #164]	@ (8003054 <HAL_ADC_ConfigChannel+0x698>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x5fc>
 8002fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003060 <HAL_ADC_ConfigChannel+0x6a4>)
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_ConfigChannel+0x5fe>
 8002fb8:	4a24      	ldr	r2, [pc, #144]	@ (800304c <HAL_ADC_ConfigChannel+0x690>)
 8002fba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7fe ff41 	bl	8001e4a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fc8:	e036      	b.n	8003038 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a28      	ldr	r2, [pc, #160]	@ (8003070 <HAL_ADC_ConfigChannel+0x6b4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d131      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x67c>
 8002fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d12c      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8003058 <HAL_ADC_ConfigChannel+0x69c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d127      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a18      	ldr	r2, [pc, #96]	@ (8003050 <HAL_ADC_ConfigChannel+0x694>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_ADC_ConfigChannel+0x640>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a17      	ldr	r2, [pc, #92]	@ (8003054 <HAL_ADC_ConfigChannel+0x698>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x644>
 8002ffc:	4a18      	ldr	r2, [pc, #96]	@ (8003060 <HAL_ADC_ConfigChannel+0x6a4>)
 8002ffe:	e000      	b.n	8003002 <HAL_ADC_ConfigChannel+0x646>
 8003000:	4a12      	ldr	r2, [pc, #72]	@ (800304c <HAL_ADC_ConfigChannel+0x690>)
 8003002:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003004:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fe ff1d 	bl	8001e4a <LL_ADC_SetCommonPathInternalCh>
 8003010:	e012      	b.n	8003038 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003024:	e008      	b.n	8003038 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003040:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003044:	4618      	mov	r0, r3
 8003046:	3784      	adds	r7, #132	@ 0x84
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}
 800304c:	58026300 	.word	0x58026300
 8003050:	40022000 	.word	0x40022000
 8003054:	40022100 	.word	0x40022100
 8003058:	58026000 	.word	0x58026000
 800305c:	cb840000 	.word	0xcb840000
 8003060:	40022300 	.word	0x40022300
 8003064:	24000004 	.word	0x24000004
 8003068:	053e2d63 	.word	0x053e2d63
 800306c:	c7520000 	.word	0xc7520000
 8003070:	cfb80000 	.word	0xcfb80000

08003074 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7a      	ldr	r2, [pc, #488]	@ (800326c <ADC_ConfigureBoostMode+0x1f8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <ADC_ConfigureBoostMode+0x1c>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a79      	ldr	r2, [pc, #484]	@ (8003270 <ADC_ConfigureBoostMode+0x1fc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d109      	bne.n	80030a4 <ADC_ConfigureBoostMode+0x30>
 8003090:	4b78      	ldr	r3, [pc, #480]	@ (8003274 <ADC_ConfigureBoostMode+0x200>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003098:	2b00      	cmp	r3, #0
 800309a:	bf14      	ite	ne
 800309c:	2301      	movne	r3, #1
 800309e:	2300      	moveq	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e008      	b.n	80030b6 <ADC_ConfigureBoostMode+0x42>
 80030a4:	4b74      	ldr	r3, [pc, #464]	@ (8003278 <ADC_ConfigureBoostMode+0x204>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d01c      	beq.n	80030f4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80030ba:	f003 ff93 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 80030be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030c8:	d010      	beq.n	80030ec <ADC_ConfigureBoostMode+0x78>
 80030ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80030ce:	d873      	bhi.n	80031b8 <ADC_ConfigureBoostMode+0x144>
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d002      	beq.n	80030dc <ADC_ConfigureBoostMode+0x68>
 80030d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030da:	d16d      	bne.n	80031b8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e8:	60fb      	str	r3, [r7, #12]
        break;
 80030ea:	e068      	b.n	80031be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	60fb      	str	r3, [r7, #12]
        break;
 80030f2:	e064      	b.n	80031be <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80030f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80030f8:	f04f 0100 	mov.w	r1, #0
 80030fc:	f005 f9d8 	bl	80084b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003100:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800310a:	d051      	beq.n	80031b0 <ADC_ConfigureBoostMode+0x13c>
 800310c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003110:	d854      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x148>
 8003112:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003116:	d047      	beq.n	80031a8 <ADC_ConfigureBoostMode+0x134>
 8003118:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800311c:	d84e      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x148>
 800311e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003122:	d03d      	beq.n	80031a0 <ADC_ConfigureBoostMode+0x12c>
 8003124:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003128:	d848      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x148>
 800312a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800312e:	d033      	beq.n	8003198 <ADC_ConfigureBoostMode+0x124>
 8003130:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003134:	d842      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x148>
 8003136:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800313a:	d029      	beq.n	8003190 <ADC_ConfigureBoostMode+0x11c>
 800313c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003140:	d83c      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x148>
 8003142:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003146:	d01a      	beq.n	800317e <ADC_ConfigureBoostMode+0x10a>
 8003148:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800314c:	d836      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x148>
 800314e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003152:	d014      	beq.n	800317e <ADC_ConfigureBoostMode+0x10a>
 8003154:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003158:	d830      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x148>
 800315a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800315e:	d00e      	beq.n	800317e <ADC_ConfigureBoostMode+0x10a>
 8003160:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003164:	d82a      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x148>
 8003166:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800316a:	d008      	beq.n	800317e <ADC_ConfigureBoostMode+0x10a>
 800316c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003170:	d824      	bhi.n	80031bc <ADC_ConfigureBoostMode+0x148>
 8003172:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003176:	d002      	beq.n	800317e <ADC_ConfigureBoostMode+0x10a>
 8003178:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800317c:	d11e      	bne.n	80031bc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0c9b      	lsrs	r3, r3, #18
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	60fb      	str	r3, [r7, #12]
        break;
 800318e:	e016      	b.n	80031be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	091b      	lsrs	r3, r3, #4
 8003194:	60fb      	str	r3, [r7, #12]
        break;
 8003196:	e012      	b.n	80031be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	60fb      	str	r3, [r7, #12]
        break;
 800319e:	e00e      	b.n	80031be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	099b      	lsrs	r3, r3, #6
 80031a4:	60fb      	str	r3, [r7, #12]
        break;
 80031a6:	e00a      	b.n	80031be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	09db      	lsrs	r3, r3, #7
 80031ac:	60fb      	str	r3, [r7, #12]
        break;
 80031ae:	e006      	b.n	80031be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	60fb      	str	r3, [r7, #12]
        break;
 80031b6:	e002      	b.n	80031be <ADC_ConfigureBoostMode+0x14a>
        break;
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80031bc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80031be:	f7fe fe11 	bl	8001de4 <HAL_GetREVID>
 80031c2:	4603      	mov	r3, r0
 80031c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d815      	bhi.n	80031f8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a2b      	ldr	r2, [pc, #172]	@ (800327c <ADC_ConfigureBoostMode+0x208>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d908      	bls.n	80031e6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80031e4:	e03e      	b.n	8003264 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f4:	609a      	str	r2, [r3, #8]
}
 80031f6:	e035      	b.n	8003264 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a1f      	ldr	r2, [pc, #124]	@ (8003280 <ADC_ConfigureBoostMode+0x20c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d808      	bhi.n	8003218 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003214:	609a      	str	r2, [r3, #8]
}
 8003216:	e025      	b.n	8003264 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a1a      	ldr	r2, [pc, #104]	@ (8003284 <ADC_ConfigureBoostMode+0x210>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d80a      	bhi.n	8003236 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003232:	609a      	str	r2, [r3, #8]
}
 8003234:	e016      	b.n	8003264 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a13      	ldr	r2, [pc, #76]	@ (8003288 <ADC_ConfigureBoostMode+0x214>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d80a      	bhi.n	8003254 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	e007      	b.n	8003264 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003262:	609a      	str	r2, [r3, #8]
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40022000 	.word	0x40022000
 8003270:	40022100 	.word	0x40022100
 8003274:	40022300 	.word	0x40022300
 8003278:	58026300 	.word	0x58026300
 800327c:	01312d00 	.word	0x01312d00
 8003280:	005f5e10 	.word	0x005f5e10
 8003284:	00bebc20 	.word	0x00bebc20
 8003288:	017d7840 	.word	0x017d7840

0800328c <LL_ADC_IsEnabled>:
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <LL_ADC_IsEnabled+0x18>
 80032a0:	2301      	movs	r3, #1
 80032a2:	e000      	b.n	80032a6 <LL_ADC_IsEnabled+0x1a>
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 0304 	and.w	r3, r3, #4
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d101      	bne.n	80032ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800333c:	b590      	push	{r4, r7, lr}
 800333e:	b09f      	sub	sp, #124	@ 0x7c
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003356:	2302      	movs	r3, #2
 8003358:	e0be      	b.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003366:	2300      	movs	r3, #0
 8003368:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5c      	ldr	r2, [pc, #368]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d102      	bne.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003374:	4b5b      	ldr	r3, [pc, #364]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	e001      	b.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800337a:	2300      	movs	r3, #0
 800337c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10b      	bne.n	800339c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e09d      	b.n	80034d8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff ff87 	bl	80032b2 <LL_ADC_REG_IsConversionOngoing>
 80033a4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff81 	bl	80032b2 <LL_ADC_REG_IsConversionOngoing>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d17f      	bne.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d17c      	bne.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a47      	ldr	r2, [pc, #284]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a46      	ldr	r2, [pc, #280]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80033d0:	4b45      	ldr	r3, [pc, #276]	@ (80034e8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033d2:	e000      	b.n	80033d6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80033d4:	4b45      	ldr	r3, [pc, #276]	@ (80034ec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033d6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d039      	beq.n	8003454 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80033e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	431a      	orrs	r2, r3
 80033ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a3a      	ldr	r2, [pc, #232]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a38      	ldr	r2, [pc, #224]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10e      	bne.n	8003424 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003406:	4836      	ldr	r0, [pc, #216]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003408:	f7ff ff40 	bl	800328c <LL_ADC_IsEnabled>
 800340c:	4604      	mov	r4, r0
 800340e:	4835      	ldr	r0, [pc, #212]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003410:	f7ff ff3c 	bl	800328c <LL_ADC_IsEnabled>
 8003414:	4603      	mov	r3, r0
 8003416:	4323      	orrs	r3, r4
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf0c      	ite	eq
 800341c:	2301      	moveq	r3, #1
 800341e:	2300      	movne	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e008      	b.n	8003436 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003424:	4832      	ldr	r0, [pc, #200]	@ (80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003426:	f7ff ff31 	bl	800328c <LL_ADC_IsEnabled>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d047      	beq.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800343a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	4b2d      	ldr	r3, [pc, #180]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003440:	4013      	ands	r3, r2
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	6811      	ldr	r1, [r2, #0]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	6892      	ldr	r2, [r2, #8]
 800344a:	430a      	orrs	r2, r1
 800344c:	431a      	orrs	r2, r3
 800344e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003450:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003452:	e03a      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800345c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800345e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a1e      	ldr	r2, [pc, #120]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10e      	bne.n	8003492 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003474:	481a      	ldr	r0, [pc, #104]	@ (80034e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003476:	f7ff ff09 	bl	800328c <LL_ADC_IsEnabled>
 800347a:	4604      	mov	r4, r0
 800347c:	4819      	ldr	r0, [pc, #100]	@ (80034e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800347e:	f7ff ff05 	bl	800328c <LL_ADC_IsEnabled>
 8003482:	4603      	mov	r3, r0
 8003484:	4323      	orrs	r3, r4
 8003486:	2b00      	cmp	r3, #0
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e008      	b.n	80034a4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003494:	f7ff fefa 	bl	800328c <LL_ADC_IsEnabled>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	4b11      	ldr	r3, [pc, #68]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034b2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034b4:	e009      	b.n	80034ca <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ba:	f043 0220 	orr.w	r2, r3, #32
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80034c8:	e000      	b.n	80034cc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034d4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80034d8:	4618      	mov	r0, r3
 80034da:	377c      	adds	r7, #124	@ 0x7c
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd90      	pop	{r4, r7, pc}
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40022100 	.word	0x40022100
 80034e8:	40022300 	.word	0x40022300
 80034ec:	58026300 	.word	0x58026300
 80034f0:	58026000 	.word	0x58026000
 80034f4:	fffff0e0 	.word	0xfffff0e0

080034f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003508:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <__NVIC_SetPriorityGrouping+0x40>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003520:	4b06      	ldr	r3, [pc, #24]	@ (800353c <__NVIC_SetPriorityGrouping+0x44>)
 8003522:	4313      	orrs	r3, r2
 8003524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003526:	4a04      	ldr	r2, [pc, #16]	@ (8003538 <__NVIC_SetPriorityGrouping+0x40>)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	60d3      	str	r3, [r2, #12]
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	e000ed00 	.word	0xe000ed00
 800353c:	05fa0000 	.word	0x05fa0000

08003540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003544:	4b04      	ldr	r3, [pc, #16]	@ (8003558 <__NVIC_GetPriorityGrouping+0x18>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 0307 	and.w	r3, r3, #7
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db0b      	blt.n	8003586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	4907      	ldr	r1, [pc, #28]	@ (8003594 <__NVIC_EnableIRQ+0x38>)
 8003576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2001      	movs	r0, #1
 800357e:	fa00 f202 	lsl.w	r2, r0, r2
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	e000e100 	.word	0xe000e100

08003598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	6039      	str	r1, [r7, #0]
 80035a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	db0a      	blt.n	80035c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	490c      	ldr	r1, [pc, #48]	@ (80035e4 <__NVIC_SetPriority+0x4c>)
 80035b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	440b      	add	r3, r1
 80035bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c0:	e00a      	b.n	80035d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4908      	ldr	r1, [pc, #32]	@ (80035e8 <__NVIC_SetPriority+0x50>)
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	f003 030f 	and.w	r3, r3, #15
 80035ce:	3b04      	subs	r3, #4
 80035d0:	0112      	lsls	r2, r2, #4
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	440b      	add	r3, r1
 80035d6:	761a      	strb	r2, [r3, #24]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100
 80035e8:	e000ed00 	.word	0xe000ed00

080035ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b089      	sub	sp, #36	@ 0x24
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	f1c3 0307 	rsb	r3, r3, #7
 8003606:	2b04      	cmp	r3, #4
 8003608:	bf28      	it	cs
 800360a:	2304      	movcs	r3, #4
 800360c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3304      	adds	r3, #4
 8003612:	2b06      	cmp	r3, #6
 8003614:	d902      	bls.n	800361c <NVIC_EncodePriority+0x30>
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3b03      	subs	r3, #3
 800361a:	e000      	b.n	800361e <NVIC_EncodePriority+0x32>
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003620:	f04f 32ff 	mov.w	r2, #4294967295
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003634:	f04f 31ff 	mov.w	r1, #4294967295
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	43d9      	mvns	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	4313      	orrs	r3, r2
         );
}
 8003646:	4618      	mov	r0, r3
 8003648:	3724      	adds	r7, #36	@ 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003664:	d301      	bcc.n	800366a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003666:	2301      	movs	r3, #1
 8003668:	e00f      	b.n	800368a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800366a:	4a0a      	ldr	r2, [pc, #40]	@ (8003694 <SysTick_Config+0x40>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003672:	210f      	movs	r1, #15
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f7ff ff8e 	bl	8003598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800367c:	4b05      	ldr	r3, [pc, #20]	@ (8003694 <SysTick_Config+0x40>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003682:	4b04      	ldr	r3, [pc, #16]	@ (8003694 <SysTick_Config+0x40>)
 8003684:	2207      	movs	r2, #7
 8003686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	e000e010 	.word	0xe000e010

08003698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ff29 	bl	80034f8 <__NVIC_SetPriorityGrouping>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	4603      	mov	r3, r0
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036bc:	f7ff ff40 	bl	8003540 <__NVIC_GetPriorityGrouping>
 80036c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68b9      	ldr	r1, [r7, #8]
 80036c6:	6978      	ldr	r0, [r7, #20]
 80036c8:	f7ff ff90 	bl	80035ec <NVIC_EncodePriority>
 80036cc:	4602      	mov	r2, r0
 80036ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff ff5f 	bl	8003598 <__NVIC_SetPriority>
}
 80036da:	bf00      	nop
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff33 	bl	800355c <__NVIC_EnableIRQ>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffa4 	bl	8003654 <SysTick_Config>
 800370c:	4603      	mov	r3, r0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e014      	b.n	8003752 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	791b      	ldrb	r3, [r3, #4]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fd fe63 	bl	8001404 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e046      	b.n	80037fc <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	795b      	ldrb	r3, [r3, #5]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_DAC_Start+0x20>
 8003776:	2302      	movs	r3, #2
 8003778:	e040      	b.n	80037fc <HAL_DAC_Start+0xa2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6819      	ldr	r1, [r3, #0]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f003 0310 	and.w	r3, r3, #16
 8003792:	2201      	movs	r2, #1
 8003794:	409a      	lsls	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10f      	bne.n	80037c4 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d11d      	bne.n	80037ee <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0201 	orr.w	r2, r2, #1
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	e014      	b.n	80037ee <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2102      	movs	r1, #2
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	429a      	cmp	r2, r3
 80037dc:	d107      	bne.n	80037ee <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0202 	orr.w	r2, r2, #2
 80037ec:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e015      	b.n	8003850 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d105      	bne.n	800383c <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	3308      	adds	r3, #8
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	e004      	b.n	8003846 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4413      	add	r3, r2
 8003842:	3314      	adds	r3, #20
 8003844:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	461a      	mov	r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	@ 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_DAC_ConfigChannel+0x1e>
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e12a      	b.n	8003ad4 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	795b      	ldrb	r3, [r3, #5]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_DAC_ConfigChannel+0x2e>
 8003886:	2302      	movs	r3, #2
 8003888:	e124      	b.n	8003ad4 <HAL_DAC_ConfigChannel+0x278>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2202      	movs	r2, #2
 8003894:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d17a      	bne.n	8003994 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800389e:	f7fe fa71 	bl	8001d84 <HAL_GetTick>
 80038a2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d13d      	bne.n	8003926 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038aa:	e018      	b.n	80038de <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038ac:	f7fe fa6a 	bl	8001d84 <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d911      	bls.n	80038de <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038c0:	4b86      	ldr	r3, [pc, #536]	@ (8003adc <HAL_DAC_ConfigChannel+0x280>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f043 0208 	orr.w	r2, r3, #8
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2203      	movs	r2, #3
 80038d8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0fa      	b.n	8003ad4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038e4:	4b7d      	ldr	r3, [pc, #500]	@ (8003adc <HAL_DAC_ConfigChannel+0x280>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1df      	bne.n	80038ac <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	6992      	ldr	r2, [r2, #24]
 80038f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80038f6:	e020      	b.n	800393a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80038f8:	f7fe fa44 	bl	8001d84 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d90f      	bls.n	8003926 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390c:	2b00      	cmp	r3, #0
 800390e:	da0a      	bge.n	8003926 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f043 0208 	orr.w	r2, r3, #8
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2203      	movs	r2, #3
 8003920:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e0d6      	b.n	8003ad4 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800392c:	2b00      	cmp	r3, #0
 800392e:	dbe3      	blt.n	80038f8 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	6992      	ldr	r2, [r2, #24]
 8003938:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	ea02 0103 	and.w	r1, r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f003 0310 	and.w	r3, r3, #16
 800395e:	409a      	lsls	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	21ff      	movs	r1, #255	@ 0xff
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	43db      	mvns	r3, r3
 800397c:	ea02 0103 	and.w	r1, r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 0310 	and.w	r3, r3, #16
 800398a:	409a      	lsls	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d11d      	bne.n	80039d8 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039a2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	221f      	movs	r2, #31
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f003 0310 	and.w	r3, r3, #16
 80039e6:	2207      	movs	r2, #7
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d102      	bne.n	8003a02 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a00:	e00f      	b.n	8003a22 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d102      	bne.n	8003a10 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0e:	e008      	b.n	8003a22 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1c:	e001      	b.n	8003a22 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a60:	43da      	mvns	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	400a      	ands	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	22c0      	movs	r2, #192	@ 0xc0
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43da      	mvns	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3728      	adds	r7, #40	@ 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20008000 	.word	0x20008000

08003ae0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7fe f94c 	bl	8001d84 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e2dc      	b.n	80040b2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d008      	beq.n	8003b16 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2280      	movs	r2, #128	@ 0x80
 8003b08:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e2cd      	b.n	80040b2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a76      	ldr	r2, [pc, #472]	@ (8003cf4 <HAL_DMA_Abort+0x214>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d04a      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a74      	ldr	r2, [pc, #464]	@ (8003cf8 <HAL_DMA_Abort+0x218>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d045      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a73      	ldr	r2, [pc, #460]	@ (8003cfc <HAL_DMA_Abort+0x21c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d040      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a71      	ldr	r2, [pc, #452]	@ (8003d00 <HAL_DMA_Abort+0x220>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d03b      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a70      	ldr	r2, [pc, #448]	@ (8003d04 <HAL_DMA_Abort+0x224>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d036      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003d08 <HAL_DMA_Abort+0x228>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d031      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a6d      	ldr	r2, [pc, #436]	@ (8003d0c <HAL_DMA_Abort+0x22c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d02c      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a6b      	ldr	r2, [pc, #428]	@ (8003d10 <HAL_DMA_Abort+0x230>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d027      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a6a      	ldr	r2, [pc, #424]	@ (8003d14 <HAL_DMA_Abort+0x234>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d022      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a68      	ldr	r2, [pc, #416]	@ (8003d18 <HAL_DMA_Abort+0x238>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d01d      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a67      	ldr	r2, [pc, #412]	@ (8003d1c <HAL_DMA_Abort+0x23c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d018      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a65      	ldr	r2, [pc, #404]	@ (8003d20 <HAL_DMA_Abort+0x240>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a64      	ldr	r2, [pc, #400]	@ (8003d24 <HAL_DMA_Abort+0x244>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a62      	ldr	r2, [pc, #392]	@ (8003d28 <HAL_DMA_Abort+0x248>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a61      	ldr	r2, [pc, #388]	@ (8003d2c <HAL_DMA_Abort+0x24c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_DMA_Abort+0xd6>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a5f      	ldr	r2, [pc, #380]	@ (8003d30 <HAL_DMA_Abort+0x250>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d101      	bne.n	8003bba <HAL_DMA_Abort+0xda>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_DMA_Abort+0xdc>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d013      	beq.n	8003be8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 021e 	bic.w	r2, r2, #30
 8003bce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bde:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e00a      	b.n	8003bfe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 020e 	bic.w	r2, r2, #14
 8003bf6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a3c      	ldr	r2, [pc, #240]	@ (8003cf4 <HAL_DMA_Abort+0x214>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d072      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8003cf8 <HAL_DMA_Abort+0x218>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d06d      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a39      	ldr	r2, [pc, #228]	@ (8003cfc <HAL_DMA_Abort+0x21c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d068      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a37      	ldr	r2, [pc, #220]	@ (8003d00 <HAL_DMA_Abort+0x220>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d063      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a36      	ldr	r2, [pc, #216]	@ (8003d04 <HAL_DMA_Abort+0x224>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d05e      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a34      	ldr	r2, [pc, #208]	@ (8003d08 <HAL_DMA_Abort+0x228>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d059      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a33      	ldr	r2, [pc, #204]	@ (8003d0c <HAL_DMA_Abort+0x22c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d054      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a31      	ldr	r2, [pc, #196]	@ (8003d10 <HAL_DMA_Abort+0x230>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d04f      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a30      	ldr	r2, [pc, #192]	@ (8003d14 <HAL_DMA_Abort+0x234>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d04a      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d18 <HAL_DMA_Abort+0x238>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d045      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2d      	ldr	r2, [pc, #180]	@ (8003d1c <HAL_DMA_Abort+0x23c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d040      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2b      	ldr	r2, [pc, #172]	@ (8003d20 <HAL_DMA_Abort+0x240>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d03b      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <HAL_DMA_Abort+0x244>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d036      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a28      	ldr	r2, [pc, #160]	@ (8003d28 <HAL_DMA_Abort+0x248>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d031      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a27      	ldr	r2, [pc, #156]	@ (8003d2c <HAL_DMA_Abort+0x24c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d02c      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a25      	ldr	r2, [pc, #148]	@ (8003d30 <HAL_DMA_Abort+0x250>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d027      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <HAL_DMA_Abort+0x254>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d022      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a22      	ldr	r2, [pc, #136]	@ (8003d38 <HAL_DMA_Abort+0x258>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01d      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a21      	ldr	r2, [pc, #132]	@ (8003d3c <HAL_DMA_Abort+0x25c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <HAL_DMA_Abort+0x260>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d013      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1e      	ldr	r2, [pc, #120]	@ (8003d44 <HAL_DMA_Abort+0x264>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d48 <HAL_DMA_Abort+0x268>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1b      	ldr	r2, [pc, #108]	@ (8003d4c <HAL_DMA_Abort+0x26c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_DMA_Abort+0x20e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a19      	ldr	r2, [pc, #100]	@ (8003d50 <HAL_DMA_Abort+0x270>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d132      	bne.n	8003d54 <HAL_DMA_Abort+0x274>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e031      	b.n	8003d56 <HAL_DMA_Abort+0x276>
 8003cf2:	bf00      	nop
 8003cf4:	40020010 	.word	0x40020010
 8003cf8:	40020028 	.word	0x40020028
 8003cfc:	40020040 	.word	0x40020040
 8003d00:	40020058 	.word	0x40020058
 8003d04:	40020070 	.word	0x40020070
 8003d08:	40020088 	.word	0x40020088
 8003d0c:	400200a0 	.word	0x400200a0
 8003d10:	400200b8 	.word	0x400200b8
 8003d14:	40020410 	.word	0x40020410
 8003d18:	40020428 	.word	0x40020428
 8003d1c:	40020440 	.word	0x40020440
 8003d20:	40020458 	.word	0x40020458
 8003d24:	40020470 	.word	0x40020470
 8003d28:	40020488 	.word	0x40020488
 8003d2c:	400204a0 	.word	0x400204a0
 8003d30:	400204b8 	.word	0x400204b8
 8003d34:	58025408 	.word	0x58025408
 8003d38:	5802541c 	.word	0x5802541c
 8003d3c:	58025430 	.word	0x58025430
 8003d40:	58025444 	.word	0x58025444
 8003d44:	58025458 	.word	0x58025458
 8003d48:	5802546c 	.word	0x5802546c
 8003d4c:	58025480 	.word	0x58025480
 8003d50:	58025494 	.word	0x58025494
 8003d54:	2300      	movs	r3, #0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d007      	beq.n	8003d6a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d68:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6d      	ldr	r2, [pc, #436]	@ (8003f24 <HAL_DMA_Abort+0x444>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d04a      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a6b      	ldr	r2, [pc, #428]	@ (8003f28 <HAL_DMA_Abort+0x448>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d045      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a6a      	ldr	r2, [pc, #424]	@ (8003f2c <HAL_DMA_Abort+0x44c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d040      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a68      	ldr	r2, [pc, #416]	@ (8003f30 <HAL_DMA_Abort+0x450>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d03b      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a67      	ldr	r2, [pc, #412]	@ (8003f34 <HAL_DMA_Abort+0x454>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d036      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a65      	ldr	r2, [pc, #404]	@ (8003f38 <HAL_DMA_Abort+0x458>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d031      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a64      	ldr	r2, [pc, #400]	@ (8003f3c <HAL_DMA_Abort+0x45c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d02c      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a62      	ldr	r2, [pc, #392]	@ (8003f40 <HAL_DMA_Abort+0x460>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d027      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a61      	ldr	r2, [pc, #388]	@ (8003f44 <HAL_DMA_Abort+0x464>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d022      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5f      	ldr	r2, [pc, #380]	@ (8003f48 <HAL_DMA_Abort+0x468>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d01d      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a5e      	ldr	r2, [pc, #376]	@ (8003f4c <HAL_DMA_Abort+0x46c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d018      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a5c      	ldr	r2, [pc, #368]	@ (8003f50 <HAL_DMA_Abort+0x470>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d013      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a5b      	ldr	r2, [pc, #364]	@ (8003f54 <HAL_DMA_Abort+0x474>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00e      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a59      	ldr	r2, [pc, #356]	@ (8003f58 <HAL_DMA_Abort+0x478>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a58      	ldr	r2, [pc, #352]	@ (8003f5c <HAL_DMA_Abort+0x47c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_DMA_Abort+0x32a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a56      	ldr	r2, [pc, #344]	@ (8003f60 <HAL_DMA_Abort+0x480>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d108      	bne.n	8003e1c <HAL_DMA_Abort+0x33c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e007      	b.n	8003e2c <HAL_DMA_Abort+0x34c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0201 	bic.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e2c:	e013      	b.n	8003e56 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e2e:	f7fd ffa9 	bl	8001d84 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d90c      	bls.n	8003e56 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2203      	movs	r2, #3
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e12d      	b.n	80040b2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a2f      	ldr	r2, [pc, #188]	@ (8003f24 <HAL_DMA_Abort+0x444>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d04a      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a2d      	ldr	r2, [pc, #180]	@ (8003f28 <HAL_DMA_Abort+0x448>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d045      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8003f2c <HAL_DMA_Abort+0x44c>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d040      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2a      	ldr	r2, [pc, #168]	@ (8003f30 <HAL_DMA_Abort+0x450>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d03b      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a29      	ldr	r2, [pc, #164]	@ (8003f34 <HAL_DMA_Abort+0x454>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d036      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a27      	ldr	r2, [pc, #156]	@ (8003f38 <HAL_DMA_Abort+0x458>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d031      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a26      	ldr	r2, [pc, #152]	@ (8003f3c <HAL_DMA_Abort+0x45c>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d02c      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <HAL_DMA_Abort+0x460>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d027      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a23      	ldr	r2, [pc, #140]	@ (8003f44 <HAL_DMA_Abort+0x464>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d022      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a21      	ldr	r2, [pc, #132]	@ (8003f48 <HAL_DMA_Abort+0x468>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01d      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a20      	ldr	r2, [pc, #128]	@ (8003f4c <HAL_DMA_Abort+0x46c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d018      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f50 <HAL_DMA_Abort+0x470>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1d      	ldr	r2, [pc, #116]	@ (8003f54 <HAL_DMA_Abort+0x474>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <HAL_DMA_Abort+0x478>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d009      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f5c <HAL_DMA_Abort+0x47c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d004      	beq.n	8003f02 <HAL_DMA_Abort+0x422>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_DMA_Abort+0x480>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d101      	bne.n	8003f06 <HAL_DMA_Abort+0x426>
 8003f02:	2301      	movs	r3, #1
 8003f04:	e000      	b.n	8003f08 <HAL_DMA_Abort+0x428>
 8003f06:	2300      	movs	r3, #0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d02b      	beq.n	8003f64 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f10:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	223f      	movs	r2, #63	@ 0x3f
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	609a      	str	r2, [r3, #8]
 8003f22:	e02a      	b.n	8003f7a <HAL_DMA_Abort+0x49a>
 8003f24:	40020010 	.word	0x40020010
 8003f28:	40020028 	.word	0x40020028
 8003f2c:	40020040 	.word	0x40020040
 8003f30:	40020058 	.word	0x40020058
 8003f34:	40020070 	.word	0x40020070
 8003f38:	40020088 	.word	0x40020088
 8003f3c:	400200a0 	.word	0x400200a0
 8003f40:	400200b8 	.word	0x400200b8
 8003f44:	40020410 	.word	0x40020410
 8003f48:	40020428 	.word	0x40020428
 8003f4c:	40020440 	.word	0x40020440
 8003f50:	40020458 	.word	0x40020458
 8003f54:	40020470 	.word	0x40020470
 8003f58:	40020488 	.word	0x40020488
 8003f5c:	400204a0 	.word	0x400204a0
 8003f60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f68:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2201      	movs	r2, #1
 8003f74:	409a      	lsls	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a4f      	ldr	r2, [pc, #316]	@ (80040bc <HAL_DMA_Abort+0x5dc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d072      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a4d      	ldr	r2, [pc, #308]	@ (80040c0 <HAL_DMA_Abort+0x5e0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d06d      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a4c      	ldr	r2, [pc, #304]	@ (80040c4 <HAL_DMA_Abort+0x5e4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d068      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80040c8 <HAL_DMA_Abort+0x5e8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d063      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a49      	ldr	r2, [pc, #292]	@ (80040cc <HAL_DMA_Abort+0x5ec>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d05e      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a47      	ldr	r2, [pc, #284]	@ (80040d0 <HAL_DMA_Abort+0x5f0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d059      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a46      	ldr	r2, [pc, #280]	@ (80040d4 <HAL_DMA_Abort+0x5f4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d054      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a44      	ldr	r2, [pc, #272]	@ (80040d8 <HAL_DMA_Abort+0x5f8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d04f      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a43      	ldr	r2, [pc, #268]	@ (80040dc <HAL_DMA_Abort+0x5fc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d04a      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a41      	ldr	r2, [pc, #260]	@ (80040e0 <HAL_DMA_Abort+0x600>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d045      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a40      	ldr	r2, [pc, #256]	@ (80040e4 <HAL_DMA_Abort+0x604>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d040      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a3e      	ldr	r2, [pc, #248]	@ (80040e8 <HAL_DMA_Abort+0x608>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d03b      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a3d      	ldr	r2, [pc, #244]	@ (80040ec <HAL_DMA_Abort+0x60c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d036      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a3b      	ldr	r2, [pc, #236]	@ (80040f0 <HAL_DMA_Abort+0x610>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d031      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a3a      	ldr	r2, [pc, #232]	@ (80040f4 <HAL_DMA_Abort+0x614>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d02c      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a38      	ldr	r2, [pc, #224]	@ (80040f8 <HAL_DMA_Abort+0x618>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d027      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a37      	ldr	r2, [pc, #220]	@ (80040fc <HAL_DMA_Abort+0x61c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a35      	ldr	r2, [pc, #212]	@ (8004100 <HAL_DMA_Abort+0x620>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01d      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a34      	ldr	r2, [pc, #208]	@ (8004104 <HAL_DMA_Abort+0x624>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a32      	ldr	r2, [pc, #200]	@ (8004108 <HAL_DMA_Abort+0x628>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a31      	ldr	r2, [pc, #196]	@ (800410c <HAL_DMA_Abort+0x62c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2f      	ldr	r2, [pc, #188]	@ (8004110 <HAL_DMA_Abort+0x630>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2e      	ldr	r2, [pc, #184]	@ (8004114 <HAL_DMA_Abort+0x634>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <HAL_DMA_Abort+0x58a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2c      	ldr	r2, [pc, #176]	@ (8004118 <HAL_DMA_Abort+0x638>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_DMA_Abort+0x58e>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <HAL_DMA_Abort+0x590>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800407c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004090:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004094:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800409e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40020010 	.word	0x40020010
 80040c0:	40020028 	.word	0x40020028
 80040c4:	40020040 	.word	0x40020040
 80040c8:	40020058 	.word	0x40020058
 80040cc:	40020070 	.word	0x40020070
 80040d0:	40020088 	.word	0x40020088
 80040d4:	400200a0 	.word	0x400200a0
 80040d8:	400200b8 	.word	0x400200b8
 80040dc:	40020410 	.word	0x40020410
 80040e0:	40020428 	.word	0x40020428
 80040e4:	40020440 	.word	0x40020440
 80040e8:	40020458 	.word	0x40020458
 80040ec:	40020470 	.word	0x40020470
 80040f0:	40020488 	.word	0x40020488
 80040f4:	400204a0 	.word	0x400204a0
 80040f8:	400204b8 	.word	0x400204b8
 80040fc:	58025408 	.word	0x58025408
 8004100:	5802541c 	.word	0x5802541c
 8004104:	58025430 	.word	0x58025430
 8004108:	58025444 	.word	0x58025444
 800410c:	58025458 	.word	0x58025458
 8004110:	5802546c 	.word	0x5802546c
 8004114:	58025480 	.word	0x58025480
 8004118:	58025494 	.word	0x58025494

0800411c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e237      	b.n	800459e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d004      	beq.n	8004144 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2280      	movs	r2, #128	@ 0x80
 800413e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e22c      	b.n	800459e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5c      	ldr	r2, [pc, #368]	@ (80042bc <HAL_DMA_Abort_IT+0x1a0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d04a      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a5b      	ldr	r2, [pc, #364]	@ (80042c0 <HAL_DMA_Abort_IT+0x1a4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d045      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a59      	ldr	r2, [pc, #356]	@ (80042c4 <HAL_DMA_Abort_IT+0x1a8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d040      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a58      	ldr	r2, [pc, #352]	@ (80042c8 <HAL_DMA_Abort_IT+0x1ac>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d03b      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a56      	ldr	r2, [pc, #344]	@ (80042cc <HAL_DMA_Abort_IT+0x1b0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d036      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a55      	ldr	r2, [pc, #340]	@ (80042d0 <HAL_DMA_Abort_IT+0x1b4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d031      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a53      	ldr	r2, [pc, #332]	@ (80042d4 <HAL_DMA_Abort_IT+0x1b8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d02c      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a52      	ldr	r2, [pc, #328]	@ (80042d8 <HAL_DMA_Abort_IT+0x1bc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d027      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a50      	ldr	r2, [pc, #320]	@ (80042dc <HAL_DMA_Abort_IT+0x1c0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d022      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a4f      	ldr	r2, [pc, #316]	@ (80042e0 <HAL_DMA_Abort_IT+0x1c4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d01d      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a4d      	ldr	r2, [pc, #308]	@ (80042e4 <HAL_DMA_Abort_IT+0x1c8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d018      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4c      	ldr	r2, [pc, #304]	@ (80042e8 <HAL_DMA_Abort_IT+0x1cc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a4a      	ldr	r2, [pc, #296]	@ (80042ec <HAL_DMA_Abort_IT+0x1d0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00e      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a49      	ldr	r2, [pc, #292]	@ (80042f0 <HAL_DMA_Abort_IT+0x1d4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d009      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a47      	ldr	r2, [pc, #284]	@ (80042f4 <HAL_DMA_Abort_IT+0x1d8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d004      	beq.n	80041e4 <HAL_DMA_Abort_IT+0xc8>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a46      	ldr	r2, [pc, #280]	@ (80042f8 <HAL_DMA_Abort_IT+0x1dc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d101      	bne.n	80041e8 <HAL_DMA_Abort_IT+0xcc>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_DMA_Abort_IT+0xce>
 80041e8:	2300      	movs	r3, #0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8086 	beq.w	80042fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2204      	movs	r2, #4
 80041f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2f      	ldr	r2, [pc, #188]	@ (80042bc <HAL_DMA_Abort_IT+0x1a0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d04a      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a2e      	ldr	r2, [pc, #184]	@ (80042c0 <HAL_DMA_Abort_IT+0x1a4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d045      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2c      	ldr	r2, [pc, #176]	@ (80042c4 <HAL_DMA_Abort_IT+0x1a8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d040      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <HAL_DMA_Abort_IT+0x1ac>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d03b      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a29      	ldr	r2, [pc, #164]	@ (80042cc <HAL_DMA_Abort_IT+0x1b0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d036      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a28      	ldr	r2, [pc, #160]	@ (80042d0 <HAL_DMA_Abort_IT+0x1b4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d031      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a26      	ldr	r2, [pc, #152]	@ (80042d4 <HAL_DMA_Abort_IT+0x1b8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d02c      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a25      	ldr	r2, [pc, #148]	@ (80042d8 <HAL_DMA_Abort_IT+0x1bc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d027      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a23      	ldr	r2, [pc, #140]	@ (80042dc <HAL_DMA_Abort_IT+0x1c0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d022      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a22      	ldr	r2, [pc, #136]	@ (80042e0 <HAL_DMA_Abort_IT+0x1c4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d01d      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a20      	ldr	r2, [pc, #128]	@ (80042e4 <HAL_DMA_Abort_IT+0x1c8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d018      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a1f      	ldr	r2, [pc, #124]	@ (80042e8 <HAL_DMA_Abort_IT+0x1cc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d013      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1d      	ldr	r2, [pc, #116]	@ (80042ec <HAL_DMA_Abort_IT+0x1d0>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00e      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a1c      	ldr	r2, [pc, #112]	@ (80042f0 <HAL_DMA_Abort_IT+0x1d4>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d009      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a1a      	ldr	r2, [pc, #104]	@ (80042f4 <HAL_DMA_Abort_IT+0x1d8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d004      	beq.n	8004298 <HAL_DMA_Abort_IT+0x17c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a19      	ldr	r2, [pc, #100]	@ (80042f8 <HAL_DMA_Abort_IT+0x1dc>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d108      	bne.n	80042aa <HAL_DMA_Abort_IT+0x18e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0201 	bic.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e178      	b.n	800459c <HAL_DMA_Abort_IT+0x480>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e16f      	b.n	800459c <HAL_DMA_Abort_IT+0x480>
 80042bc:	40020010 	.word	0x40020010
 80042c0:	40020028 	.word	0x40020028
 80042c4:	40020040 	.word	0x40020040
 80042c8:	40020058 	.word	0x40020058
 80042cc:	40020070 	.word	0x40020070
 80042d0:	40020088 	.word	0x40020088
 80042d4:	400200a0 	.word	0x400200a0
 80042d8:	400200b8 	.word	0x400200b8
 80042dc:	40020410 	.word	0x40020410
 80042e0:	40020428 	.word	0x40020428
 80042e4:	40020440 	.word	0x40020440
 80042e8:	40020458 	.word	0x40020458
 80042ec:	40020470 	.word	0x40020470
 80042f0:	40020488 	.word	0x40020488
 80042f4:	400204a0 	.word	0x400204a0
 80042f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 020e 	bic.w	r2, r2, #14
 800430a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6c      	ldr	r2, [pc, #432]	@ (80044c4 <HAL_DMA_Abort_IT+0x3a8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d04a      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6b      	ldr	r2, [pc, #428]	@ (80044c8 <HAL_DMA_Abort_IT+0x3ac>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d045      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a69      	ldr	r2, [pc, #420]	@ (80044cc <HAL_DMA_Abort_IT+0x3b0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d040      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a68      	ldr	r2, [pc, #416]	@ (80044d0 <HAL_DMA_Abort_IT+0x3b4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d03b      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a66      	ldr	r2, [pc, #408]	@ (80044d4 <HAL_DMA_Abort_IT+0x3b8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d036      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a65      	ldr	r2, [pc, #404]	@ (80044d8 <HAL_DMA_Abort_IT+0x3bc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d031      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a63      	ldr	r2, [pc, #396]	@ (80044dc <HAL_DMA_Abort_IT+0x3c0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d02c      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a62      	ldr	r2, [pc, #392]	@ (80044e0 <HAL_DMA_Abort_IT+0x3c4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d027      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a60      	ldr	r2, [pc, #384]	@ (80044e4 <HAL_DMA_Abort_IT+0x3c8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d022      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a5f      	ldr	r2, [pc, #380]	@ (80044e8 <HAL_DMA_Abort_IT+0x3cc>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d01d      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a5d      	ldr	r2, [pc, #372]	@ (80044ec <HAL_DMA_Abort_IT+0x3d0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a5c      	ldr	r2, [pc, #368]	@ (80044f0 <HAL_DMA_Abort_IT+0x3d4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a5a      	ldr	r2, [pc, #360]	@ (80044f4 <HAL_DMA_Abort_IT+0x3d8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a59      	ldr	r2, [pc, #356]	@ (80044f8 <HAL_DMA_Abort_IT+0x3dc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a57      	ldr	r2, [pc, #348]	@ (80044fc <HAL_DMA_Abort_IT+0x3e0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_DMA_Abort_IT+0x290>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a56      	ldr	r2, [pc, #344]	@ (8004500 <HAL_DMA_Abort_IT+0x3e4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d108      	bne.n	80043be <HAL_DMA_Abort_IT+0x2a2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e007      	b.n	80043ce <HAL_DMA_Abort_IT+0x2b2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 0201 	bic.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a3c      	ldr	r2, [pc, #240]	@ (80044c4 <HAL_DMA_Abort_IT+0x3a8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d072      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a3a      	ldr	r2, [pc, #232]	@ (80044c8 <HAL_DMA_Abort_IT+0x3ac>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d06d      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a39      	ldr	r2, [pc, #228]	@ (80044cc <HAL_DMA_Abort_IT+0x3b0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d068      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a37      	ldr	r2, [pc, #220]	@ (80044d0 <HAL_DMA_Abort_IT+0x3b4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d063      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a36      	ldr	r2, [pc, #216]	@ (80044d4 <HAL_DMA_Abort_IT+0x3b8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d05e      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a34      	ldr	r2, [pc, #208]	@ (80044d8 <HAL_DMA_Abort_IT+0x3bc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d059      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a33      	ldr	r2, [pc, #204]	@ (80044dc <HAL_DMA_Abort_IT+0x3c0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d054      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a31      	ldr	r2, [pc, #196]	@ (80044e0 <HAL_DMA_Abort_IT+0x3c4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d04f      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a30      	ldr	r2, [pc, #192]	@ (80044e4 <HAL_DMA_Abort_IT+0x3c8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d04a      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a2e      	ldr	r2, [pc, #184]	@ (80044e8 <HAL_DMA_Abort_IT+0x3cc>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d045      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2d      	ldr	r2, [pc, #180]	@ (80044ec <HAL_DMA_Abort_IT+0x3d0>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d040      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2b      	ldr	r2, [pc, #172]	@ (80044f0 <HAL_DMA_Abort_IT+0x3d4>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d03b      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2a      	ldr	r2, [pc, #168]	@ (80044f4 <HAL_DMA_Abort_IT+0x3d8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d036      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <HAL_DMA_Abort_IT+0x3dc>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d031      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a27      	ldr	r2, [pc, #156]	@ (80044fc <HAL_DMA_Abort_IT+0x3e0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d02c      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a25      	ldr	r2, [pc, #148]	@ (8004500 <HAL_DMA_Abort_IT+0x3e4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d027      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a24      	ldr	r2, [pc, #144]	@ (8004504 <HAL_DMA_Abort_IT+0x3e8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d022      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a22      	ldr	r2, [pc, #136]	@ (8004508 <HAL_DMA_Abort_IT+0x3ec>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d01d      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a21      	ldr	r2, [pc, #132]	@ (800450c <HAL_DMA_Abort_IT+0x3f0>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d018      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1f      	ldr	r2, [pc, #124]	@ (8004510 <HAL_DMA_Abort_IT+0x3f4>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1e      	ldr	r2, [pc, #120]	@ (8004514 <HAL_DMA_Abort_IT+0x3f8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004518 <HAL_DMA_Abort_IT+0x3fc>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1b      	ldr	r2, [pc, #108]	@ (800451c <HAL_DMA_Abort_IT+0x400>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_DMA_Abort_IT+0x3a2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a19      	ldr	r2, [pc, #100]	@ (8004520 <HAL_DMA_Abort_IT+0x404>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d132      	bne.n	8004524 <HAL_DMA_Abort_IT+0x408>
 80044be:	2301      	movs	r3, #1
 80044c0:	e031      	b.n	8004526 <HAL_DMA_Abort_IT+0x40a>
 80044c2:	bf00      	nop
 80044c4:	40020010 	.word	0x40020010
 80044c8:	40020028 	.word	0x40020028
 80044cc:	40020040 	.word	0x40020040
 80044d0:	40020058 	.word	0x40020058
 80044d4:	40020070 	.word	0x40020070
 80044d8:	40020088 	.word	0x40020088
 80044dc:	400200a0 	.word	0x400200a0
 80044e0:	400200b8 	.word	0x400200b8
 80044e4:	40020410 	.word	0x40020410
 80044e8:	40020428 	.word	0x40020428
 80044ec:	40020440 	.word	0x40020440
 80044f0:	40020458 	.word	0x40020458
 80044f4:	40020470 	.word	0x40020470
 80044f8:	40020488 	.word	0x40020488
 80044fc:	400204a0 	.word	0x400204a0
 8004500:	400204b8 	.word	0x400204b8
 8004504:	58025408 	.word	0x58025408
 8004508:	5802541c 	.word	0x5802541c
 800450c:	58025430 	.word	0x58025430
 8004510:	58025444 	.word	0x58025444
 8004514:	58025458 	.word	0x58025458
 8004518:	5802546c 	.word	0x5802546c
 800451c:	58025480 	.word	0x58025480
 8004520:	58025494 	.word	0x58025494
 8004524:	2300      	movs	r3, #0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d028      	beq.n	800457c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004534:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004538:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800453e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	2201      	movs	r2, #1
 800454a:	409a      	lsls	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004558:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800456c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004570:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800457a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop

080045a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0e3      	b.n	8004782 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d106      	bne.n	80045d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2223      	movs	r2, #35	@ 0x23
 80045c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fc ff5f 	bl	8001490 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045d2:	4b6e      	ldr	r3, [pc, #440]	@ (800478c <HAL_ETH_Init+0x1e4>)
 80045d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045d8:	4a6c      	ldr	r2, [pc, #432]	@ (800478c <HAL_ETH_Init+0x1e4>)
 80045da:	f043 0302 	orr.w	r3, r3, #2
 80045de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80045e2:	4b6a      	ldr	r3, [pc, #424]	@ (800478c <HAL_ETH_Init+0x1e4>)
 80045e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7a1b      	ldrb	r3, [r3, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80045f8:	2000      	movs	r0, #0
 80045fa:	f7fd fbff 	bl	8001dfc <HAL_SYSCFG_ETHInterfaceSelect>
 80045fe:	e003      	b.n	8004608 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004600:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004604:	f7fd fbfa 	bl	8001dfc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004608:	4b61      	ldr	r3, [pc, #388]	@ (8004790 <HAL_ETH_Init+0x1e8>)
 800460a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004622:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004624:	f7fd fbae 	bl	8001d84 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800462a:	e011      	b.n	8004650 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800462c:	f7fd fbaa 	bl	8001d84 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800463a:	d909      	bls.n	8004650 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2204      	movs	r2, #4
 8004640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	22e0      	movs	r2, #224	@ 0xe0
 8004648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e098      	b.n	8004782 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e4      	bne.n	800462c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f89e 	bl	80047a4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004668:	f002 fcbc 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 800466c:	4603      	mov	r3, r0
 800466e:	4a49      	ldr	r2, [pc, #292]	@ (8004794 <HAL_ETH_Init+0x1ec>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	0c9a      	lsrs	r2, r3, #18
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3a01      	subs	r2, #1
 800467c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fa81 	bl	8004b88 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800468e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8004692:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800469e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046a2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	22e0      	movs	r2, #224	@ 0xe0
 80046be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e05d      	b.n	8004782 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80046d2:	4b31      	ldr	r3, [pc, #196]	@ (8004798 <HAL_ETH_Init+0x1f0>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6952      	ldr	r2, [r2, #20]
 80046da:	0051      	lsls	r1, r2, #1
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	430b      	orrs	r3, r1
 80046e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046e6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 fae9 	bl	8004cc2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fb2f 	bl	8004d54 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	3305      	adds	r3, #5
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	021a      	lsls	r2, r3, #8
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	3304      	adds	r3, #4
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	4619      	mov	r1, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	3303      	adds	r3, #3
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	061a      	lsls	r2, r3, #24
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	3302      	adds	r3, #2
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	041b      	lsls	r3, r3, #16
 8004728:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	3301      	adds	r3, #1
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004734:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004742:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004744:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4b11      	ldr	r3, [pc, #68]	@ (800479c <HAL_ETH_Init+0x1f4>)
 8004756:	430b      	orrs	r3, r1
 8004758:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <HAL_ETH_Init+0x1f8>)
 800476a:	430b      	orrs	r3, r1
 800476c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2210      	movs	r2, #16
 800477c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	58024400 	.word	0x58024400
 8004790:	58000400 	.word	0x58000400
 8004794:	431bde83 	.word	0x431bde83
 8004798:	ffff8001 	.word	0xffff8001
 800479c:	0c020060 	.word	0x0c020060
 80047a0:	0c20c000 	.word	0x0c20c000

080047a4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80047be:	f002 fc11 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 80047c2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004830 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d804      	bhi.n	80047d6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e022      	b.n	800481c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	4a16      	ldr	r2, [pc, #88]	@ (8004834 <HAL_ETH_SetMDIOClockRange+0x90>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d204      	bcs.n	80047e8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e019      	b.n	800481c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a13      	ldr	r2, [pc, #76]	@ (8004838 <HAL_ETH_SetMDIOClockRange+0x94>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d915      	bls.n	800481c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a12      	ldr	r2, [pc, #72]	@ (800483c <HAL_ETH_SetMDIOClockRange+0x98>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d804      	bhi.n	8004802 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e00c      	b.n	800481c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4a0e      	ldr	r2, [pc, #56]	@ (8004840 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d804      	bhi.n	8004814 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e003      	b.n	800481c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800481a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	02160ebf 	.word	0x02160ebf
 8004834:	03938700 	.word	0x03938700
 8004838:	05f5e0ff 	.word	0x05f5e0ff
 800483c:	08f0d17f 	.word	0x08f0d17f
 8004840:	0ee6b27f 	.word	0x0ee6b27f

08004844 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	791b      	ldrb	r3, [r3, #4]
 800485c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800485e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	7b1b      	ldrb	r3, [r3, #12]
 8004864:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	7b5b      	ldrb	r3, [r3, #13]
 800486c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800486e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	7b9b      	ldrb	r3, [r3, #14]
 8004874:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004876:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	7bdb      	ldrb	r3, [r3, #15]
 800487c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800487e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	7c12      	ldrb	r2, [r2, #16]
 8004884:	2a00      	cmp	r2, #0
 8004886:	d102      	bne.n	800488e <ETH_SetMACConfig+0x4a>
 8004888:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800488c:	e000      	b.n	8004890 <ETH_SetMACConfig+0x4c>
 800488e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004890:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	7c52      	ldrb	r2, [r2, #17]
 8004896:	2a00      	cmp	r2, #0
 8004898:	d102      	bne.n	80048a0 <ETH_SetMACConfig+0x5c>
 800489a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800489e:	e000      	b.n	80048a2 <ETH_SetMACConfig+0x5e>
 80048a0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80048a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	7c9b      	ldrb	r3, [r3, #18]
 80048a8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80048aa:	431a      	orrs	r2, r3
               macconf->Speed |
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80048b0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80048b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	7f1b      	ldrb	r3, [r3, #28]
 80048bc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80048be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	7f5b      	ldrb	r3, [r3, #29]
 80048c4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80048c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	7f92      	ldrb	r2, [r2, #30]
 80048cc:	2a00      	cmp	r2, #0
 80048ce:	d102      	bne.n	80048d6 <ETH_SetMACConfig+0x92>
 80048d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048d4:	e000      	b.n	80048d8 <ETH_SetMACConfig+0x94>
 80048d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80048d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	7fdb      	ldrb	r3, [r3, #31]
 80048de:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80048e0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80048e8:	2a00      	cmp	r2, #0
 80048ea:	d102      	bne.n	80048f2 <ETH_SetMACConfig+0xae>
 80048ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048f0:	e000      	b.n	80048f4 <ETH_SetMACConfig+0xb0>
 80048f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80048f4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80048fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004902:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004904:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4b56      	ldr	r3, [pc, #344]	@ (8004a70 <ETH_SetMACConfig+0x22c>)
 8004916:	4013      	ands	r3, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	68f9      	ldr	r1, [r7, #12]
 800491e:	430b      	orrs	r3, r1
 8004920:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004926:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800492e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004930:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004938:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800493a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004942:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004944:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800494c:	2a00      	cmp	r2, #0
 800494e:	d102      	bne.n	8004956 <ETH_SetMACConfig+0x112>
 8004950:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004954:	e000      	b.n	8004958 <ETH_SetMACConfig+0x114>
 8004956:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004958:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	4b42      	ldr	r3, [pc, #264]	@ (8004a74 <ETH_SetMACConfig+0x230>)
 800496a:	4013      	ands	r3, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	68f9      	ldr	r1, [r7, #12]
 8004972:	430b      	orrs	r3, r1
 8004974:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800497c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a78 <ETH_SetMACConfig+0x234>)
 800498e:	4013      	ands	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	68f9      	ldr	r1, [r7, #12]
 8004996:	430b      	orrs	r3, r1
 8004998:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80049a0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80049a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80049ae:	2a00      	cmp	r2, #0
 80049b0:	d101      	bne.n	80049b6 <ETH_SetMACConfig+0x172>
 80049b2:	2280      	movs	r2, #128	@ 0x80
 80049b4:	e000      	b.n	80049b8 <ETH_SetMACConfig+0x174>
 80049b6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80049b8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049be:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80049ca:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80049ce:	4013      	ands	r3, r2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	68f9      	ldr	r1, [r7, #12]
 80049d6:	430b      	orrs	r3, r1
 80049d8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80049e0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80049e8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049f6:	f023 0103 	bic.w	r1, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004a0e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004a2a:	2a00      	cmp	r2, #0
 8004a2c:	d101      	bne.n	8004a32 <ETH_SetMACConfig+0x1ee>
 8004a2e:	2240      	movs	r2, #64	@ 0x40
 8004a30:	e000      	b.n	8004a34 <ETH_SetMACConfig+0x1f0>
 8004a32:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004a34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004a3c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004a3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004a46:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004a54:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	00048083 	.word	0x00048083
 8004a74:	c0f88000 	.word	0xc0f88000
 8004a78:	fffffef0 	.word	0xfffffef0

08004a7c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b38      	ldr	r3, [pc, #224]	@ (8004b74 <ETH_SetDMAConfig+0xf8>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	6811      	ldr	r1, [r2, #0]
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004aa2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	791b      	ldrb	r3, [r3, #4]
 8004aa8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004aae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	7b1b      	ldrb	r3, [r3, #12]
 8004ab4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8004b78 <ETH_SetDMAConfig+0xfc>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	68f9      	ldr	r1, [r7, #12]
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ad4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	7b5b      	ldrb	r3, [r3, #13]
 8004ada:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aec:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004af0:	4b22      	ldr	r3, [pc, #136]	@ (8004b7c <ETH_SetDMAConfig+0x100>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	430b      	orrs	r3, r1
 8004afc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b00:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	7d1b      	ldrb	r3, [r3, #20]
 8004b0c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b0e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	7f5b      	ldrb	r3, [r3, #29]
 8004b14:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b22:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004b26:	4b16      	ldr	r3, [pc, #88]	@ (8004b80 <ETH_SetDMAConfig+0x104>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	68f9      	ldr	r1, [r7, #12]
 8004b30:	430b      	orrs	r3, r1
 8004b32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b36:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	7f1b      	ldrb	r3, [r3, #28]
 8004b3e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b50:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <ETH_SetDMAConfig+0x108>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	68f9      	ldr	r1, [r7, #12]
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b64:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004b68:	bf00      	nop
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	ffff87fd 	.word	0xffff87fd
 8004b78:	ffff2ffe 	.word	0xffff2ffe
 8004b7c:	fffec000 	.word	0xfffec000
 8004b80:	ffc0efef 	.word	0xffc0efef
 8004b84:	7fc0ffff 	.word	0x7fc0ffff

08004b88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b0a4      	sub	sp, #144	@ 0x90
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b96:	2300      	movs	r3, #0
 8004b98:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004bc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bc8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004be0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004be4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004c02:	2300      	movs	r3, #0
 8004c04:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004c20:	2320      	movs	r3, #32
 8004c22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004c32:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c3c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004c44:	2302      	movs	r3, #2
 8004c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c50:	2300      	movs	r3, #0
 8004c52:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004c62:	2300      	movs	r3, #0
 8004c64:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7ff fde6 	bl	8004844 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c92:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004c96:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ca0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004ca8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004cac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004cae:	f107 0308 	add.w	r3, r7, #8
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7ff fee1 	bl	8004a7c <ETH_SetDMAConfig>
}
 8004cba:	bf00      	nop
 8004cbc:	3790      	adds	r7, #144	@ 0x90
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b085      	sub	sp, #20
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e01d      	b.n	8004d0c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68d9      	ldr	r1, [r3, #12]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	4413      	add	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	440b      	add	r3, r1
 8004ce0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2200      	movs	r2, #0
 8004cec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	3206      	adds	r2, #6
 8004d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d9de      	bls.n	8004cd0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d20:	461a      	mov	r2, r3
 8004d22:	2303      	movs	r3, #3
 8004d24:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d34:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d44:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e023      	b.n	8004daa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6919      	ldr	r1, [r3, #16]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	4413      	add	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	440b      	add	r3, r1
 8004d72:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d98:	68b9      	ldr	r1, [r7, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	3212      	adds	r2, #18
 8004da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3301      	adds	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d9d8      	bls.n	8004d62 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2303      	movs	r3, #3
 8004dda:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dea:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004dfe:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
	...

08004e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	@ 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e1e:	4b89      	ldr	r3, [pc, #548]	@ (8005044 <HAL_GPIO_Init+0x234>)
 8004e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e22:	e194      	b.n	800514e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	2101      	movs	r1, #1
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e30:	4013      	ands	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 8186 	beq.w	8005148 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d005      	beq.n	8004e54 <HAL_GPIO_Init+0x44>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 0303 	and.w	r3, r3, #3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d130      	bne.n	8004eb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	2203      	movs	r2, #3
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	68da      	ldr	r2, [r3, #12]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 0201 	and.w	r2, r3, #1
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d017      	beq.n	8004ef2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	2203      	movs	r2, #3
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	43db      	mvns	r3, r3
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d123      	bne.n	8004f46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	08da      	lsrs	r2, r3, #3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3208      	adds	r2, #8
 8004f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	220f      	movs	r2, #15
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	08da      	lsrs	r2, r3, #3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3208      	adds	r2, #8
 8004f40:	69b9      	ldr	r1, [r7, #24]
 8004f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	2203      	movs	r2, #3
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43db      	mvns	r3, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f003 0203 	and.w	r2, r3, #3
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f000 80e0 	beq.w	8005148 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f88:	4b2f      	ldr	r3, [pc, #188]	@ (8005048 <HAL_GPIO_Init+0x238>)
 8004f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8005048 <HAL_GPIO_Init+0x238>)
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004f98:	4b2b      	ldr	r3, [pc, #172]	@ (8005048 <HAL_GPIO_Init+0x238>)
 8004f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fa6:	4a29      	ldr	r2, [pc, #164]	@ (800504c <HAL_GPIO_Init+0x23c>)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	3302      	adds	r3, #2
 8004fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	220f      	movs	r2, #15
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a20      	ldr	r2, [pc, #128]	@ (8005050 <HAL_GPIO_Init+0x240>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d052      	beq.n	8005078 <HAL_GPIO_Init+0x268>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8005054 <HAL_GPIO_Init+0x244>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d031      	beq.n	800503e <HAL_GPIO_Init+0x22e>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1e      	ldr	r2, [pc, #120]	@ (8005058 <HAL_GPIO_Init+0x248>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d02b      	beq.n	800503a <HAL_GPIO_Init+0x22a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800505c <HAL_GPIO_Init+0x24c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d025      	beq.n	8005036 <HAL_GPIO_Init+0x226>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_GPIO_Init+0x250>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01f      	beq.n	8005032 <HAL_GPIO_Init+0x222>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <HAL_GPIO_Init+0x254>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d019      	beq.n	800502e <HAL_GPIO_Init+0x21e>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8005068 <HAL_GPIO_Init+0x258>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d013      	beq.n	800502a <HAL_GPIO_Init+0x21a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a19      	ldr	r2, [pc, #100]	@ (800506c <HAL_GPIO_Init+0x25c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00d      	beq.n	8005026 <HAL_GPIO_Init+0x216>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a18      	ldr	r2, [pc, #96]	@ (8005070 <HAL_GPIO_Init+0x260>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <HAL_GPIO_Init+0x212>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <HAL_GPIO_Init+0x264>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d101      	bne.n	800501e <HAL_GPIO_Init+0x20e>
 800501a:	2309      	movs	r3, #9
 800501c:	e02d      	b.n	800507a <HAL_GPIO_Init+0x26a>
 800501e:	230a      	movs	r3, #10
 8005020:	e02b      	b.n	800507a <HAL_GPIO_Init+0x26a>
 8005022:	2308      	movs	r3, #8
 8005024:	e029      	b.n	800507a <HAL_GPIO_Init+0x26a>
 8005026:	2307      	movs	r3, #7
 8005028:	e027      	b.n	800507a <HAL_GPIO_Init+0x26a>
 800502a:	2306      	movs	r3, #6
 800502c:	e025      	b.n	800507a <HAL_GPIO_Init+0x26a>
 800502e:	2305      	movs	r3, #5
 8005030:	e023      	b.n	800507a <HAL_GPIO_Init+0x26a>
 8005032:	2304      	movs	r3, #4
 8005034:	e021      	b.n	800507a <HAL_GPIO_Init+0x26a>
 8005036:	2303      	movs	r3, #3
 8005038:	e01f      	b.n	800507a <HAL_GPIO_Init+0x26a>
 800503a:	2302      	movs	r3, #2
 800503c:	e01d      	b.n	800507a <HAL_GPIO_Init+0x26a>
 800503e:	2301      	movs	r3, #1
 8005040:	e01b      	b.n	800507a <HAL_GPIO_Init+0x26a>
 8005042:	bf00      	nop
 8005044:	58000080 	.word	0x58000080
 8005048:	58024400 	.word	0x58024400
 800504c:	58000400 	.word	0x58000400
 8005050:	58020000 	.word	0x58020000
 8005054:	58020400 	.word	0x58020400
 8005058:	58020800 	.word	0x58020800
 800505c:	58020c00 	.word	0x58020c00
 8005060:	58021000 	.word	0x58021000
 8005064:	58021400 	.word	0x58021400
 8005068:	58021800 	.word	0x58021800
 800506c:	58021c00 	.word	0x58021c00
 8005070:	58022000 	.word	0x58022000
 8005074:	58022400 	.word	0x58022400
 8005078:	2300      	movs	r3, #0
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	f002 0203 	and.w	r2, r2, #3
 8005080:	0092      	lsls	r2, r2, #2
 8005082:	4093      	lsls	r3, r2
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4313      	orrs	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800508a:	4938      	ldr	r1, [pc, #224]	@ (800516c <HAL_GPIO_Init+0x35c>)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	089b      	lsrs	r3, r3, #2
 8005090:	3302      	adds	r3, #2
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	43db      	mvns	r3, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4013      	ands	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80050be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4013      	ands	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	3301      	adds	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	fa22 f303 	lsr.w	r3, r2, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	f47f ae63 	bne.w	8004e24 <HAL_GPIO_Init+0x14>
  }
}
 800515e:	bf00      	nop
 8005160:	bf00      	nop
 8005162:	3724      	adds	r7, #36	@ 0x24
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	58000400 	.word	0x58000400

08005170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
 800517c:	4613      	mov	r3, r2
 800517e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005180:	787b      	ldrb	r3, [r7, #1]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005186:	887a      	ldrh	r2, [r7, #2]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800518c:	e003      	b.n	8005196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800518e:	887b      	ldrh	r3, [r7, #2]
 8005190:	041a      	lsls	r2, r3, #16
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	619a      	str	r2, [r3, #24]
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b085      	sub	sp, #20
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051b4:	887a      	ldrh	r2, [r7, #2]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4013      	ands	r3, r2
 80051ba:	041a      	lsls	r2, r3, #16
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	43d9      	mvns	r1, r3
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	400b      	ands	r3, r1
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	619a      	str	r2, [r3, #24]
}
 80051ca:	bf00      	nop
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	4603      	mov	r3, r0
 80051de:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80051e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	4013      	ands	r3, r2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fb ffc9 	bl	8001194 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e08b      	b.n	8005336 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc f9fa 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2224      	movs	r2, #36	@ 0x24
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800525c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800526c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d107      	bne.n	8005286 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005282:	609a      	str	r2, [r3, #8]
 8005284:	e006      	b.n	8005294 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005292:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d108      	bne.n	80052ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052aa:	605a      	str	r2, [r3, #4]
 80052ac:	e007      	b.n	80052be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005340 <HAL_I2C_Init+0x134>)
 80052ca:	430b      	orrs	r3, r1
 80052cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	430a      	orrs	r2, r1
 80052f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69d9      	ldr	r1, [r3, #28]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a1a      	ldr	r2, [r3, #32]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0201 	orr.w	r2, r2, #1
 8005316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	02008000 	.word	0x02008000

08005344 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	461a      	mov	r2, r3
 8005350:	460b      	mov	r3, r1
 8005352:	817b      	strh	r3, [r7, #10]
 8005354:	4613      	mov	r3, r2
 8005356:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b20      	cmp	r3, #32
 8005362:	f040 80fd 	bne.w	8005560 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_I2C_Master_Transmit+0x30>
 8005370:	2302      	movs	r3, #2
 8005372:	e0f6      	b.n	8005562 <HAL_I2C_Master_Transmit+0x21e>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800537c:	f7fc fd02 	bl	8001d84 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	2319      	movs	r3, #25
 8005388:	2201      	movs	r2, #1
 800538a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fa0a 	bl	80057a8 <I2C_WaitOnFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e0e1      	b.n	8005562 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2221      	movs	r2, #33	@ 0x21
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2210      	movs	r2, #16
 80053aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	893a      	ldrh	r2, [r7, #8]
 80053be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	2bff      	cmp	r3, #255	@ 0xff
 80053ce:	d906      	bls.n	80053de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	22ff      	movs	r2, #255	@ 0xff
 80053d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80053d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e007      	b.n	80053ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80053e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d024      	beq.n	8005440 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fa:	781a      	ldrb	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005410:	b29b      	uxth	r3, r3
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800542a:	b2db      	uxtb	r3, r3
 800542c:	3301      	adds	r3, #1
 800542e:	b2da      	uxtb	r2, r3
 8005430:	8979      	ldrh	r1, [r7, #10]
 8005432:	4b4e      	ldr	r3, [pc, #312]	@ (800556c <HAL_I2C_Master_Transmit+0x228>)
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fc05 	bl	8005c48 <I2C_TransferConfig>
 800543e:	e066      	b.n	800550e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005444:	b2da      	uxtb	r2, r3
 8005446:	8979      	ldrh	r1, [r7, #10]
 8005448:	4b48      	ldr	r3, [pc, #288]	@ (800556c <HAL_I2C_Master_Transmit+0x228>)
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 fbfa 	bl	8005c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005454:	e05b      	b.n	800550e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	6a39      	ldr	r1, [r7, #32]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f9fd 	bl	800585a <I2C_WaitOnTXISFlagUntilTimeout>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e07b      	b.n	8005562 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	781a      	ldrb	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005484:	b29b      	uxth	r3, r3
 8005486:	3b01      	subs	r3, #1
 8005488:	b29a      	uxth	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d034      	beq.n	800550e <HAL_I2C_Master_Transmit+0x1ca>
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d130      	bne.n	800550e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	9300      	str	r3, [sp, #0]
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	2200      	movs	r2, #0
 80054b4:	2180      	movs	r1, #128	@ 0x80
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f976 	bl	80057a8 <I2C_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e04d      	b.n	8005562 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2bff      	cmp	r3, #255	@ 0xff
 80054ce:	d90e      	bls.n	80054ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	22ff      	movs	r2, #255	@ 0xff
 80054d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	8979      	ldrh	r1, [r7, #10]
 80054de:	2300      	movs	r3, #0
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 fbae 	bl	8005c48 <I2C_TransferConfig>
 80054ec:	e00f      	b.n	800550e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	8979      	ldrh	r1, [r7, #10]
 8005500:	2300      	movs	r3, #0
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 fb9d 	bl	8005c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d19e      	bne.n	8005456 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	6a39      	ldr	r1, [r7, #32]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f9e3 	bl	80058e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e01a      	b.n	8005562 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2220      	movs	r2, #32
 8005532:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6859      	ldr	r1, [r3, #4]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <HAL_I2C_Master_Transmit+0x22c>)
 8005540:	400b      	ands	r3, r1
 8005542:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800555c:	2300      	movs	r3, #0
 800555e:	e000      	b.n	8005562 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005560:	2302      	movs	r3, #2
  }
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	80002000 	.word	0x80002000
 8005570:	fe00e800 	.word	0xfe00e800

08005574 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	461a      	mov	r2, r3
 8005580:	460b      	mov	r3, r1
 8005582:	817b      	strh	r3, [r7, #10]
 8005584:	4613      	mov	r3, r2
 8005586:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b20      	cmp	r3, #32
 8005592:	f040 80db 	bne.w	800574c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_I2C_Master_Receive+0x30>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0d4      	b.n	800574e <HAL_I2C_Master_Receive+0x1da>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80055ac:	f7fc fbea 	bl	8001d84 <HAL_GetTick>
 80055b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	2319      	movs	r3, #25
 80055b8:	2201      	movs	r2, #1
 80055ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f8f2 	bl	80057a8 <I2C_WaitOnFlagUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0bf      	b.n	800574e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2222      	movs	r2, #34	@ 0x22
 80055d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2210      	movs	r2, #16
 80055da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	893a      	ldrh	r2, [r7, #8]
 80055ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2bff      	cmp	r3, #255	@ 0xff
 80055fe:	d90e      	bls.n	800561e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	22ff      	movs	r2, #255	@ 0xff
 8005604:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560a:	b2da      	uxtb	r2, r3
 800560c:	8979      	ldrh	r1, [r7, #10]
 800560e:	4b52      	ldr	r3, [pc, #328]	@ (8005758 <HAL_I2C_Master_Receive+0x1e4>)
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fb16 	bl	8005c48 <I2C_TransferConfig>
 800561c:	e06d      	b.n	80056fa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562c:	b2da      	uxtb	r2, r3
 800562e:	8979      	ldrh	r1, [r7, #10]
 8005630:	4b49      	ldr	r3, [pc, #292]	@ (8005758 <HAL_I2C_Master_Receive+0x1e4>)
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fb05 	bl	8005c48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800563e:	e05c      	b.n	80056fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	6a39      	ldr	r1, [r7, #32]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f993 	bl	8005970 <I2C_WaitOnRXNEFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e07c      	b.n	800574e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	b2d2      	uxtb	r2, r2
 8005660:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	1c5a      	adds	r2, r3, #1
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800568a:	b29b      	uxth	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d034      	beq.n	80056fa <HAL_I2C_Master_Receive+0x186>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005694:	2b00      	cmp	r3, #0
 8005696:	d130      	bne.n	80056fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	2200      	movs	r2, #0
 80056a0:	2180      	movs	r1, #128	@ 0x80
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f880 	bl	80057a8 <I2C_WaitOnFlagUntilTimeout>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e04d      	b.n	800574e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	2bff      	cmp	r3, #255	@ 0xff
 80056ba:	d90e      	bls.n	80056da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	22ff      	movs	r2, #255	@ 0xff
 80056c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	8979      	ldrh	r1, [r7, #10]
 80056ca:	2300      	movs	r3, #0
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fab8 	bl	8005c48 <I2C_TransferConfig>
 80056d8:	e00f      	b.n	80056fa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056de:	b29a      	uxth	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	8979      	ldrh	r1, [r7, #10]
 80056ec:	2300      	movs	r3, #0
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 faa7 	bl	8005c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d19d      	bne.n	8005640 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	6a39      	ldr	r1, [r7, #32]
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f8ed 	bl	80058e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d001      	beq.n	8005718 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e01a      	b.n	800574e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2220      	movs	r2, #32
 800571e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6859      	ldr	r1, [r3, #4]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b0c      	ldr	r3, [pc, #48]	@ (800575c <HAL_I2C_Master_Receive+0x1e8>)
 800572c:	400b      	ands	r3, r1
 800572e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	e000      	b.n	800574e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800574c:	2302      	movs	r3, #2
  }
}
 800574e:	4618      	mov	r0, r3
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	80002400 	.word	0x80002400
 800575c:	fe00e800 	.word	0xfe00e800

08005760 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b02      	cmp	r3, #2
 8005774:	d103      	bne.n	800577e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b01      	cmp	r3, #1
 800578a:	d007      	beq.n	800579c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	619a      	str	r2, [r3, #24]
  }
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	4613      	mov	r3, r2
 80057b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057b8:	e03b      	b.n	8005832 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f962 	bl	8005a88 <I2C_IsErrorOccurred>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e041      	b.n	8005852 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d4:	d02d      	beq.n	8005832 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d6:	f7fc fad5 	bl	8001d84 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d302      	bcc.n	80057ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d122      	bne.n	8005832 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4013      	ands	r3, r2
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	bf0c      	ite	eq
 80057fc:	2301      	moveq	r3, #1
 80057fe:	2300      	movne	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	461a      	mov	r2, r3
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	429a      	cmp	r2, r3
 8005808:	d113      	bne.n	8005832 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e00f      	b.n	8005852 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699a      	ldr	r2, [r3, #24]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4013      	ands	r3, r2
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	429a      	cmp	r2, r3
 8005840:	bf0c      	ite	eq
 8005842:	2301      	moveq	r3, #1
 8005844:	2300      	movne	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	429a      	cmp	r2, r3
 800584e:	d0b4      	beq.n	80057ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005866:	e033      	b.n	80058d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f90b 	bl	8005a88 <I2C_IsErrorOccurred>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e031      	b.n	80058e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005882:	d025      	beq.n	80058d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005884:	f7fc fa7e 	bl	8001d84 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	429a      	cmp	r2, r3
 8005892:	d302      	bcc.n	800589a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d11a      	bne.n	80058d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d013      	beq.n	80058d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ac:	f043 0220 	orr.w	r2, r3, #32
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e007      	b.n	80058e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d1c4      	bne.n	8005868 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058f4:	e02f      	b.n	8005956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f8c4 	bl	8005a88 <I2C_IsErrorOccurred>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e02d      	b.n	8005966 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590a:	f7fc fa3b 	bl	8001d84 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	d302      	bcc.n	8005920 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11a      	bne.n	8005956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b20      	cmp	r3, #32
 800592c:	d013      	beq.n	8005956 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005932:	f043 0220 	orr.w	r2, r3, #32
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e007      	b.n	8005966 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b20      	cmp	r3, #32
 8005962:	d1c8      	bne.n	80058f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
	...

08005970 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005980:	e071      	b.n	8005a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f87e 	bl	8005a88 <I2C_IsErrorOccurred>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d13b      	bne.n	8005a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80059a4:	7dfb      	ldrb	r3, [r7, #23]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d138      	bne.n	8005a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d105      	bne.n	80059c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d121      	bne.n	8005a16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2210      	movs	r2, #16
 80059d8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2204      	movs	r2, #4
 80059de:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2220      	movs	r2, #32
 80059e6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6859      	ldr	r1, [r3, #4]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4b24      	ldr	r3, [pc, #144]	@ (8005a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80059f4:	400b      	ands	r3, r1
 80059f6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	75fb      	strb	r3, [r7, #23]
 8005a14:	e002      	b.n	8005a1c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005a1c:	f7fc f9b2 	bl	8001d84 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d302      	bcc.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d119      	bne.n	8005a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8005a32:	7dfb      	ldrb	r3, [r7, #23]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d116      	bne.n	8005a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d00f      	beq.n	8005a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f003 0304 	and.w	r3, r3, #4
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d002      	beq.n	8005a7a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d083      	beq.n	8005982 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	fe00e800 	.word	0xfe00e800

08005a88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08a      	sub	sp, #40	@ 0x28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d068      	beq.n	8005b86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2210      	movs	r2, #16
 8005aba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005abc:	e049      	b.n	8005b52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d045      	beq.n	8005b52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ac6:	f7fc f95d 	bl	8001d84 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d302      	bcc.n	8005adc <I2C_IsErrorOccurred+0x54>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d13a      	bne.n	8005b52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ae6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005aee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005afa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005afe:	d121      	bne.n	8005b44 <I2C_IsErrorOccurred+0xbc>
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b06:	d01d      	beq.n	8005b44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d01a      	beq.n	8005b44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005b1e:	f7fc f931 	bl	8001d84 <HAL_GetTick>
 8005b22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b24:	e00e      	b.n	8005b44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005b26:	f7fc f92d 	bl	8001d84 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b19      	cmp	r3, #25
 8005b32:	d907      	bls.n	8005b44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	f043 0320 	orr.w	r3, r3, #32
 8005b3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005b42:	e006      	b.n	8005b52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d1e9      	bne.n	8005b26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d003      	beq.n	8005b68 <I2C_IsErrorOccurred+0xe0>
 8005b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0aa      	beq.n	8005abe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d103      	bne.n	8005b78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2220      	movs	r2, #32
 8005b76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	f043 0304 	orr.w	r3, r3, #4
 8005b7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f043 0308 	orr.w	r3, r3, #8
 8005bc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00b      	beq.n	8005bf4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	f043 0302 	orr.w	r3, r3, #2
 8005be2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01c      	beq.n	8005c36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fdaf 	bl	8005760 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c44 <I2C_IsErrorOccurred+0x1bc>)
 8005c0e:	400b      	ands	r3, r1
 8005c10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3728      	adds	r7, #40	@ 0x28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	fe00e800 	.word	0xfe00e800

08005c48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	607b      	str	r3, [r7, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	817b      	strh	r3, [r7, #10]
 8005c56:	4613      	mov	r3, r2
 8005c58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c5a:	897b      	ldrh	r3, [r7, #10]
 8005c5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c60:	7a7b      	ldrb	r3, [r7, #9]
 8005c62:	041b      	lsls	r3, r3, #16
 8005c64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	0d5b      	lsrs	r3, r3, #21
 8005c82:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005c86:	4b08      	ldr	r3, [pc, #32]	@ (8005ca8 <I2C_TransferConfig+0x60>)
 8005c88:	430b      	orrs	r3, r1
 8005c8a:	43db      	mvns	r3, r3
 8005c8c:	ea02 0103 	and.w	r1, r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	03ff63ff 	.word	0x03ff63ff

08005cac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d138      	bne.n	8005d34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d101      	bne.n	8005cd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e032      	b.n	8005d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2224      	movs	r2, #36	@ 0x24
 8005cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6819      	ldr	r1, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e000      	b.n	8005d36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d34:	2302      	movs	r3, #2
  }
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d139      	bne.n	8005dcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e033      	b.n	8005dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2224      	movs	r2, #36	@ 0x24
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	e000      	b.n	8005dce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005dcc:	2302      	movs	r3, #2
  }
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b086      	sub	sp, #24
 8005dde:	af02      	add	r7, sp, #8
 8005de0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0fe      	b.n	8005fea <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fb fd89 	bl	8001918 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2203      	movs	r2, #3
 8005e0a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f007 fda6 	bl	800d964 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	7c1a      	ldrb	r2, [r3, #16]
 8005e20:	f88d 2000 	strb.w	r2, [sp]
 8005e24:	3304      	adds	r3, #4
 8005e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e28:	f007 fd2a 	bl	800d880 <USB_CoreInit>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d005      	beq.n	8005e3e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e0d5      	b.n	8005fea <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2100      	movs	r1, #0
 8005e44:	4618      	mov	r0, r3
 8005e46:	f007 fd9e 	bl	800d986 <USB_SetCurrentMode>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0c6      	b.n	8005fea <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	73fb      	strb	r3, [r7, #15]
 8005e60:	e04a      	b.n	8005ef8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005e62:	7bfa      	ldrb	r2, [r7, #15]
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	440b      	add	r3, r1
 8005e70:	3315      	adds	r3, #21
 8005e72:	2201      	movs	r2, #1
 8005e74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005e76:	7bfa      	ldrb	r2, [r7, #15]
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	00db      	lsls	r3, r3, #3
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	3314      	adds	r3, #20
 8005e86:	7bfa      	ldrb	r2, [r7, #15]
 8005e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005e8a:	7bfa      	ldrb	r2, [r7, #15]
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	b298      	uxth	r0, r3
 8005e90:	6879      	ldr	r1, [r7, #4]
 8005e92:	4613      	mov	r3, r2
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	332e      	adds	r3, #46	@ 0x2e
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ea2:	7bfa      	ldrb	r2, [r7, #15]
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3318      	adds	r3, #24
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005eb6:	7bfa      	ldrb	r2, [r7, #15]
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	440b      	add	r3, r1
 8005ec4:	331c      	adds	r3, #28
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005eca:	7bfa      	ldrb	r2, [r7, #15]
 8005ecc:	6879      	ldr	r1, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	3320      	adds	r3, #32
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ede:	7bfa      	ldrb	r2, [r7, #15]
 8005ee0:	6879      	ldr	r1, [r7, #4]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	00db      	lsls	r3, r3, #3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	3324      	adds	r3, #36	@ 0x24
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	791b      	ldrb	r3, [r3, #4]
 8005efc:	7bfa      	ldrb	r2, [r7, #15]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d3af      	bcc.n	8005e62 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]
 8005f06:	e044      	b.n	8005f92 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005f08:	7bfa      	ldrb	r2, [r7, #15]
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005f1e:	7bfa      	ldrb	r2, [r7, #15]
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	440b      	add	r3, r1
 8005f2c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005f30:	7bfa      	ldrb	r2, [r7, #15]
 8005f32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005f34:	7bfa      	ldrb	r2, [r7, #15]
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	440b      	add	r3, r1
 8005f42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005f4a:	7bfa      	ldrb	r2, [r7, #15]
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	4413      	add	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	440b      	add	r3, r1
 8005f58:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005f60:	7bfa      	ldrb	r2, [r7, #15]
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	4613      	mov	r3, r2
 8005f66:	00db      	lsls	r3, r3, #3
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005f76:	7bfa      	ldrb	r2, [r7, #15]
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f8c:	7bfb      	ldrb	r3, [r7, #15]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	73fb      	strb	r3, [r7, #15]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	791b      	ldrb	r3, [r3, #4]
 8005f96:	7bfa      	ldrb	r2, [r7, #15]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d3b5      	bcc.n	8005f08 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6818      	ldr	r0, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	7c1a      	ldrb	r2, [r3, #16]
 8005fa4:	f88d 2000 	strb.w	r2, [sp]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fac:	f007 fd38 	bl	800da20 <USB_DevInit>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e013      	b.n	8005fea <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7b1b      	ldrb	r3, [r3, #12]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d102      	bne.n	8005fde <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f80b 	bl	8005ff4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f007 fef3 	bl	800ddce <USB_DevDisconnect>

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006022:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <HAL_PCDEx_ActivateLPM+0x44>)
 8006024:	4313      	orrs	r3, r2
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	10000003 	.word	0x10000003

0800603c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006044:	4b19      	ldr	r3, [pc, #100]	@ (80060ac <HAL_PWREx_ConfigSupply+0x70>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b04      	cmp	r3, #4
 800604e:	d00a      	beq.n	8006066 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006050:	4b16      	ldr	r3, [pc, #88]	@ (80060ac <HAL_PWREx_ConfigSupply+0x70>)
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	429a      	cmp	r2, r3
 800605c:	d001      	beq.n	8006062 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e01f      	b.n	80060a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e01d      	b.n	80060a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006066:	4b11      	ldr	r3, [pc, #68]	@ (80060ac <HAL_PWREx_ConfigSupply+0x70>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f023 0207 	bic.w	r2, r3, #7
 800606e:	490f      	ldr	r1, [pc, #60]	@ (80060ac <HAL_PWREx_ConfigSupply+0x70>)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4313      	orrs	r3, r2
 8006074:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006076:	f7fb fe85 	bl	8001d84 <HAL_GetTick>
 800607a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800607c:	e009      	b.n	8006092 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800607e:	f7fb fe81 	bl	8001d84 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800608c:	d901      	bls.n	8006092 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e007      	b.n	80060a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006092:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <HAL_PWREx_ConfigSupply+0x70>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800609a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800609e:	d1ee      	bne.n	800607e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	58024800 	.word	0x58024800

080060b0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80060b4:	4b05      	ldr	r3, [pc, #20]	@ (80060cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4a04      	ldr	r2, [pc, #16]	@ (80060cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80060ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80060be:	60d3      	str	r3, [r2, #12]
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	58024800 	.word	0x58024800

080060d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	@ 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f000 bc48 	b.w	8006974 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8088 	beq.w	8006202 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060f2:	4b99      	ldr	r3, [pc, #612]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060fc:	4b96      	ldr	r3, [pc, #600]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006104:	2b10      	cmp	r3, #16
 8006106:	d007      	beq.n	8006118 <HAL_RCC_OscConfig+0x48>
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	2b18      	cmp	r3, #24
 800610c:	d111      	bne.n	8006132 <HAL_RCC_OscConfig+0x62>
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d10c      	bne.n	8006132 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006118:	4b8f      	ldr	r3, [pc, #572]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d06d      	beq.n	8006200 <HAL_RCC_OscConfig+0x130>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d169      	bne.n	8006200 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	f000 bc21 	b.w	8006974 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800613a:	d106      	bne.n	800614a <HAL_RCC_OscConfig+0x7a>
 800613c:	4b86      	ldr	r3, [pc, #536]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a85      	ldr	r2, [pc, #532]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006142:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	e02e      	b.n	80061a8 <HAL_RCC_OscConfig+0xd8>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10c      	bne.n	800616c <HAL_RCC_OscConfig+0x9c>
 8006152:	4b81      	ldr	r3, [pc, #516]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a80      	ldr	r2, [pc, #512]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006158:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	4b7e      	ldr	r3, [pc, #504]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a7d      	ldr	r2, [pc, #500]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006164:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	e01d      	b.n	80061a8 <HAL_RCC_OscConfig+0xd8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006174:	d10c      	bne.n	8006190 <HAL_RCC_OscConfig+0xc0>
 8006176:	4b78      	ldr	r3, [pc, #480]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a77      	ldr	r2, [pc, #476]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800617c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006180:	6013      	str	r3, [r2, #0]
 8006182:	4b75      	ldr	r3, [pc, #468]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a74      	ldr	r2, [pc, #464]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e00b      	b.n	80061a8 <HAL_RCC_OscConfig+0xd8>
 8006190:	4b71      	ldr	r3, [pc, #452]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a70      	ldr	r2, [pc, #448]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006196:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	4b6e      	ldr	r3, [pc, #440]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a6d      	ldr	r2, [pc, #436]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80061a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d013      	beq.n	80061d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fb fde8 	bl	8001d84 <HAL_GetTick>
 80061b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b8:	f7fb fde4 	bl	8001d84 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b64      	cmp	r3, #100	@ 0x64
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e3d4      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061ca:	4b63      	ldr	r3, [pc, #396]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0f0      	beq.n	80061b8 <HAL_RCC_OscConfig+0xe8>
 80061d6:	e014      	b.n	8006202 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061d8:	f7fb fdd4 	bl	8001d84 <HAL_GetTick>
 80061dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061e0:	f7fb fdd0 	bl	8001d84 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b64      	cmp	r3, #100	@ 0x64
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e3c0      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80061f2:	4b59      	ldr	r3, [pc, #356]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1f0      	bne.n	80061e0 <HAL_RCC_OscConfig+0x110>
 80061fe:	e000      	b.n	8006202 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 80ca 	beq.w	80063a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006210:	4b51      	ldr	r3, [pc, #324]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006218:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800621a:	4b4f      	ldr	r3, [pc, #316]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800621c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <HAL_RCC_OscConfig+0x166>
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	2b18      	cmp	r3, #24
 800622a:	d156      	bne.n	80062da <HAL_RCC_OscConfig+0x20a>
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d151      	bne.n	80062da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006236:	4b48      	ldr	r3, [pc, #288]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d005      	beq.n	800624e <HAL_RCC_OscConfig+0x17e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e392      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800624e:	4b42      	ldr	r3, [pc, #264]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 0219 	bic.w	r2, r3, #25
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	493f      	ldr	r1, [pc, #252]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800625c:	4313      	orrs	r3, r2
 800625e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006260:	f7fb fd90 	bl	8001d84 <HAL_GetTick>
 8006264:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006268:	f7fb fd8c 	bl	8001d84 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e37c      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800627a:	4b37      	ldr	r3, [pc, #220]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d0f0      	beq.n	8006268 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006286:	f7fb fdad 	bl	8001de4 <HAL_GetREVID>
 800628a:	4603      	mov	r3, r0
 800628c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006290:	4293      	cmp	r3, r2
 8006292:	d817      	bhi.n	80062c4 <HAL_RCC_OscConfig+0x1f4>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b40      	cmp	r3, #64	@ 0x40
 800629a:	d108      	bne.n	80062ae <HAL_RCC_OscConfig+0x1de>
 800629c:	4b2e      	ldr	r3, [pc, #184]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80062a4:	4a2c      	ldr	r2, [pc, #176]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062ac:	e07a      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ae:	4b2a      	ldr	r3, [pc, #168]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	031b      	lsls	r3, r3, #12
 80062bc:	4926      	ldr	r1, [pc, #152]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062c2:	e06f      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c4:	4b24      	ldr	r3, [pc, #144]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	061b      	lsls	r3, r3, #24
 80062d2:	4921      	ldr	r1, [pc, #132]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062d8:	e064      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d047      	beq.n	8006372 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f023 0219 	bic.w	r2, r3, #25
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	491a      	ldr	r1, [pc, #104]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f4:	f7fb fd46 	bl	8001d84 <HAL_GetTick>
 80062f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062fa:	e008      	b.n	800630e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062fc:	f7fb fd42 	bl	8001d84 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e332      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800630e:	4b12      	ldr	r3, [pc, #72]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0f0      	beq.n	80062fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631a:	f7fb fd63 	bl	8001de4 <HAL_GetREVID>
 800631e:	4603      	mov	r3, r0
 8006320:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006324:	4293      	cmp	r3, r2
 8006326:	d819      	bhi.n	800635c <HAL_RCC_OscConfig+0x28c>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b40      	cmp	r3, #64	@ 0x40
 800632e:	d108      	bne.n	8006342 <HAL_RCC_OscConfig+0x272>
 8006330:	4b09      	ldr	r3, [pc, #36]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006338:	4a07      	ldr	r2, [pc, #28]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 800633a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800633e:	6053      	str	r3, [r2, #4]
 8006340:	e030      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
 8006342:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	031b      	lsls	r3, r3, #12
 8006350:	4901      	ldr	r1, [pc, #4]	@ (8006358 <HAL_RCC_OscConfig+0x288>)
 8006352:	4313      	orrs	r3, r2
 8006354:	604b      	str	r3, [r1, #4]
 8006356:	e025      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
 8006358:	58024400 	.word	0x58024400
 800635c:	4b9a      	ldr	r3, [pc, #616]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	4997      	ldr	r1, [pc, #604]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800636c:	4313      	orrs	r3, r2
 800636e:	604b      	str	r3, [r1, #4]
 8006370:	e018      	b.n	80063a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006372:	4b95      	ldr	r3, [pc, #596]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a94      	ldr	r2, [pc, #592]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fb fd01 	bl	8001d84 <HAL_GetTick>
 8006382:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006384:	e008      	b.n	8006398 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006386:	f7fb fcfd 	bl	8001d84 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d901      	bls.n	8006398 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e2ed      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006398:	4b8b      	ldr	r3, [pc, #556]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1f0      	bne.n	8006386 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f000 80a9 	beq.w	8006504 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063b2:	4b85      	ldr	r3, [pc, #532]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063bc:	4b82      	ldr	r3, [pc, #520]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80063be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b08      	cmp	r3, #8
 80063c6:	d007      	beq.n	80063d8 <HAL_RCC_OscConfig+0x308>
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b18      	cmp	r3, #24
 80063cc:	d13a      	bne.n	8006444 <HAL_RCC_OscConfig+0x374>
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d135      	bne.n	8006444 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063d8:	4b7b      	ldr	r3, [pc, #492]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d005      	beq.n	80063f0 <HAL_RCC_OscConfig+0x320>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	2b80      	cmp	r3, #128	@ 0x80
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e2c1      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063f0:	f7fb fcf8 	bl	8001de4 <HAL_GetREVID>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d817      	bhi.n	800642e <HAL_RCC_OscConfig+0x35e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	2b20      	cmp	r3, #32
 8006404:	d108      	bne.n	8006418 <HAL_RCC_OscConfig+0x348>
 8006406:	4b70      	ldr	r3, [pc, #448]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800640e:	4a6e      	ldr	r2, [pc, #440]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006410:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006414:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006416:	e075      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006418:	4b6b      	ldr	r3, [pc, #428]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	069b      	lsls	r3, r3, #26
 8006426:	4968      	ldr	r1, [pc, #416]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006428:	4313      	orrs	r3, r2
 800642a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800642c:	e06a      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800642e:	4b66      	ldr	r3, [pc, #408]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	061b      	lsls	r3, r3, #24
 800643c:	4962      	ldr	r1, [pc, #392]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800643e:	4313      	orrs	r3, r2
 8006440:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006442:	e05f      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d042      	beq.n	80064d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800644c:	4b5e      	ldr	r3, [pc, #376]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5d      	ldr	r2, [pc, #372]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006458:	f7fb fc94 	bl	8001d84 <HAL_GetTick>
 800645c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800645e:	e008      	b.n	8006472 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006460:	f7fb fc90 	bl	8001d84 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e280      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006472:	4b55      	ldr	r3, [pc, #340]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800647e:	f7fb fcb1 	bl	8001de4 <HAL_GetREVID>
 8006482:	4603      	mov	r3, r0
 8006484:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006488:	4293      	cmp	r3, r2
 800648a:	d817      	bhi.n	80064bc <HAL_RCC_OscConfig+0x3ec>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	2b20      	cmp	r3, #32
 8006492:	d108      	bne.n	80064a6 <HAL_RCC_OscConfig+0x3d6>
 8006494:	4b4c      	ldr	r3, [pc, #304]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800649c:	4a4a      	ldr	r2, [pc, #296]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800649e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064a2:	6053      	str	r3, [r2, #4]
 80064a4:	e02e      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
 80064a6:	4b48      	ldr	r3, [pc, #288]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	069b      	lsls	r3, r3, #26
 80064b4:	4944      	ldr	r1, [pc, #272]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	604b      	str	r3, [r1, #4]
 80064ba:	e023      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
 80064bc:	4b42      	ldr	r3, [pc, #264]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	061b      	lsls	r3, r3, #24
 80064ca:	493f      	ldr	r1, [pc, #252]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064cc:	4313      	orrs	r3, r2
 80064ce:	60cb      	str	r3, [r1, #12]
 80064d0:	e018      	b.n	8006504 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80064d2:	4b3d      	ldr	r3, [pc, #244]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a3c      	ldr	r2, [pc, #240]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064de:	f7fb fc51 	bl	8001d84 <HAL_GetTick>
 80064e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80064e6:	f7fb fc4d 	bl	8001d84 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e23d      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80064f8:	4b33      	ldr	r3, [pc, #204]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d036      	beq.n	800657e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d019      	beq.n	800654c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006518:	4b2b      	ldr	r3, [pc, #172]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800651a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800651c:	4a2a      	ldr	r2, [pc, #168]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006524:	f7fb fc2e 	bl	8001d84 <HAL_GetTick>
 8006528:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800652c:	f7fb fc2a 	bl	8001d84 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b02      	cmp	r3, #2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e21a      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800653e:	4b22      	ldr	r3, [pc, #136]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b00      	cmp	r3, #0
 8006548:	d0f0      	beq.n	800652c <HAL_RCC_OscConfig+0x45c>
 800654a:	e018      	b.n	800657e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800654c:	4b1e      	ldr	r3, [pc, #120]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 800654e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006550:	4a1d      	ldr	r2, [pc, #116]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006552:	f023 0301 	bic.w	r3, r3, #1
 8006556:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006558:	f7fb fc14 	bl	8001d84 <HAL_GetTick>
 800655c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006560:	f7fb fc10 	bl	8001d84 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e200      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006572:	4b15      	ldr	r3, [pc, #84]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	d039      	beq.n	80065fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01c      	beq.n	80065cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006592:	4b0d      	ldr	r3, [pc, #52]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a0c      	ldr	r2, [pc, #48]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 8006598:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800659c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800659e:	f7fb fbf1 	bl	8001d84 <HAL_GetTick>
 80065a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065a4:	e008      	b.n	80065b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065a6:	f7fb fbed 	bl	8001d84 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e1dd      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80065b8:	4b03      	ldr	r3, [pc, #12]	@ (80065c8 <HAL_RCC_OscConfig+0x4f8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d0f0      	beq.n	80065a6 <HAL_RCC_OscConfig+0x4d6>
 80065c4:	e01b      	b.n	80065fe <HAL_RCC_OscConfig+0x52e>
 80065c6:	bf00      	nop
 80065c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80065cc:	4b9b      	ldr	r3, [pc, #620]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a9a      	ldr	r2, [pc, #616]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80065d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80065d8:	f7fb fbd4 	bl	8001d84 <HAL_GetTick>
 80065dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80065e0:	f7fb fbd0 	bl	8001d84 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e1c0      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80065f2:	4b92      	ldr	r3, [pc, #584]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1f0      	bne.n	80065e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 8081 	beq.w	800670e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800660c:	4b8c      	ldr	r3, [pc, #560]	@ (8006840 <HAL_RCC_OscConfig+0x770>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a8b      	ldr	r2, [pc, #556]	@ (8006840 <HAL_RCC_OscConfig+0x770>)
 8006612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006616:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006618:	f7fb fbb4 	bl	8001d84 <HAL_GetTick>
 800661c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006620:	f7fb fbb0 	bl	8001d84 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b64      	cmp	r3, #100	@ 0x64
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e1a0      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006632:	4b83      	ldr	r3, [pc, #524]	@ (8006840 <HAL_RCC_OscConfig+0x770>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0f0      	beq.n	8006620 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d106      	bne.n	8006654 <HAL_RCC_OscConfig+0x584>
 8006646:	4b7d      	ldr	r3, [pc, #500]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664a:	4a7c      	ldr	r2, [pc, #496]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800664c:	f043 0301 	orr.w	r3, r3, #1
 8006650:	6713      	str	r3, [r2, #112]	@ 0x70
 8006652:	e02d      	b.n	80066b0 <HAL_RCC_OscConfig+0x5e0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10c      	bne.n	8006676 <HAL_RCC_OscConfig+0x5a6>
 800665c:	4b77      	ldr	r3, [pc, #476]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006660:	4a76      	ldr	r2, [pc, #472]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	6713      	str	r3, [r2, #112]	@ 0x70
 8006668:	4b74      	ldr	r3, [pc, #464]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800666a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800666c:	4a73      	ldr	r2, [pc, #460]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800666e:	f023 0304 	bic.w	r3, r3, #4
 8006672:	6713      	str	r3, [r2, #112]	@ 0x70
 8006674:	e01c      	b.n	80066b0 <HAL_RCC_OscConfig+0x5e0>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b05      	cmp	r3, #5
 800667c:	d10c      	bne.n	8006698 <HAL_RCC_OscConfig+0x5c8>
 800667e:	4b6f      	ldr	r3, [pc, #444]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006682:	4a6e      	ldr	r2, [pc, #440]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006684:	f043 0304 	orr.w	r3, r3, #4
 8006688:	6713      	str	r3, [r2, #112]	@ 0x70
 800668a:	4b6c      	ldr	r3, [pc, #432]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668e:	4a6b      	ldr	r2, [pc, #428]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	6713      	str	r3, [r2, #112]	@ 0x70
 8006696:	e00b      	b.n	80066b0 <HAL_RCC_OscConfig+0x5e0>
 8006698:	4b68      	ldr	r3, [pc, #416]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669c:	4a67      	ldr	r2, [pc, #412]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a4:	4b65      	ldr	r3, [pc, #404]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80066a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a8:	4a64      	ldr	r2, [pc, #400]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80066aa:	f023 0304 	bic.w	r3, r3, #4
 80066ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d015      	beq.n	80066e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066b8:	f7fb fb64 	bl	8001d84 <HAL_GetTick>
 80066bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066be:	e00a      	b.n	80066d6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c0:	f7fb fb60 	bl	8001d84 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e14e      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d6:	4b59      	ldr	r3, [pc, #356]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80066d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0ee      	beq.n	80066c0 <HAL_RCC_OscConfig+0x5f0>
 80066e2:	e014      	b.n	800670e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066e4:	f7fb fb4e 	bl	8001d84 <HAL_GetTick>
 80066e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066ea:	e00a      	b.n	8006702 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ec:	f7fb fb4a 	bl	8001d84 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e138      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006702:	4b4e      	ldr	r3, [pc, #312]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006706:	f003 0302 	and.w	r3, r3, #2
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1ee      	bne.n	80066ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 812d 	beq.w	8006972 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006718:	4b48      	ldr	r3, [pc, #288]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006720:	2b18      	cmp	r3, #24
 8006722:	f000 80bd 	beq.w	80068a0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672a:	2b02      	cmp	r3, #2
 800672c:	f040 809e 	bne.w	800686c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006730:	4b42      	ldr	r3, [pc, #264]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a41      	ldr	r2, [pc, #260]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006736:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800673a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673c:	f7fb fb22 	bl	8001d84 <HAL_GetTick>
 8006740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006744:	f7fb fb1e 	bl	8001d84 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e10e      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006756:	4b39      	ldr	r3, [pc, #228]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006762:	4b36      	ldr	r3, [pc, #216]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006764:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006766:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <HAL_RCC_OscConfig+0x774>)
 8006768:	4013      	ands	r3, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006772:	0112      	lsls	r2, r2, #4
 8006774:	430a      	orrs	r2, r1
 8006776:	4931      	ldr	r1, [pc, #196]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006778:	4313      	orrs	r3, r2
 800677a:	628b      	str	r3, [r1, #40]	@ 0x28
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006780:	3b01      	subs	r3, #1
 8006782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678a:	3b01      	subs	r3, #1
 800678c:	025b      	lsls	r3, r3, #9
 800678e:	b29b      	uxth	r3, r3
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	3b01      	subs	r3, #1
 8006798:	041b      	lsls	r3, r3, #16
 800679a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a4:	3b01      	subs	r3, #1
 80067a6:	061b      	lsls	r3, r3, #24
 80067a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80067ac:	4923      	ldr	r1, [pc, #140]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80067b2:	4b22      	ldr	r3, [pc, #136]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b6:	4a21      	ldr	r2, [pc, #132]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80067be:	4b1f      	ldr	r3, [pc, #124]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067c2:	4b21      	ldr	r3, [pc, #132]	@ (8006848 <HAL_RCC_OscConfig+0x778>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80067ca:	00d2      	lsls	r2, r2, #3
 80067cc:	491b      	ldr	r1, [pc, #108]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80067d2:	4b1a      	ldr	r3, [pc, #104]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d6:	f023 020c 	bic.w	r2, r3, #12
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067de:	4917      	ldr	r1, [pc, #92]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80067e4:	4b15      	ldr	r3, [pc, #84]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e8:	f023 0202 	bic.w	r2, r3, #2
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f0:	4912      	ldr	r1, [pc, #72]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067f6:	4b11      	ldr	r3, [pc, #68]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067fa:	4a10      	ldr	r2, [pc, #64]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 80067fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006802:	4b0e      	ldr	r3, [pc, #56]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006806:	4a0d      	ldr	r2, [pc, #52]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800680c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800680e:	4b0b      	ldr	r3, [pc, #44]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006812:	4a0a      	ldr	r2, [pc, #40]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006818:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800681a:	4b08      	ldr	r3, [pc, #32]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800681c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681e:	4a07      	ldr	r2, [pc, #28]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006826:	4b05      	ldr	r3, [pc, #20]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a04      	ldr	r2, [pc, #16]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 800682c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006832:	f7fb faa7 	bl	8001d84 <HAL_GetTick>
 8006836:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006838:	e011      	b.n	800685e <HAL_RCC_OscConfig+0x78e>
 800683a:	bf00      	nop
 800683c:	58024400 	.word	0x58024400
 8006840:	58024800 	.word	0x58024800
 8006844:	fffffc0c 	.word	0xfffffc0c
 8006848:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684c:	f7fb fa9a 	bl	8001d84 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b02      	cmp	r3, #2
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e08a      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800685e:	4b47      	ldr	r3, [pc, #284]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0x77c>
 800686a:	e082      	b.n	8006972 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800686c:	4b43      	ldr	r3, [pc, #268]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a42      	ldr	r2, [pc, #264]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006872:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006878:	f7fb fa84 	bl	8001d84 <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006880:	f7fb fa80 	bl	8001d84 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e070      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006892:	4b3a      	ldr	r3, [pc, #232]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x7b0>
 800689e:	e068      	b.n	8006972 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80068a0:	4b36      	ldr	r3, [pc, #216]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80068a6:	4b35      	ldr	r3, [pc, #212]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d031      	beq.n	8006918 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f003 0203 	and.w	r2, r3, #3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068be:	429a      	cmp	r2, r3
 80068c0:	d12a      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	091b      	lsrs	r3, r3, #4
 80068c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d122      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80068de:	429a      	cmp	r2, r3
 80068e0:	d11a      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	0a5b      	lsrs	r3, r3, #9
 80068e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d111      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006900:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006902:	429a      	cmp	r2, r3
 8006904:	d108      	bne.n	8006918 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	0e1b      	lsrs	r3, r3, #24
 800690a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006912:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006914:	429a      	cmp	r2, r3
 8006916:	d001      	beq.n	800691c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e02b      	b.n	8006974 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800691c:	4b17      	ldr	r3, [pc, #92]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 800691e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006920:	08db      	lsrs	r3, r3, #3
 8006922:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006926:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	429a      	cmp	r2, r3
 8006930:	d01f      	beq.n	8006972 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006932:	4b12      	ldr	r3, [pc, #72]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	4a11      	ldr	r2, [pc, #68]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800693e:	f7fb fa21 	bl	8001d84 <HAL_GetTick>
 8006942:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006944:	bf00      	nop
 8006946:	f7fb fa1d 	bl	8001d84 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694e:	4293      	cmp	r3, r2
 8006950:	d0f9      	beq.n	8006946 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006952:	4b0a      	ldr	r3, [pc, #40]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006956:	4b0a      	ldr	r3, [pc, #40]	@ (8006980 <HAL_RCC_OscConfig+0x8b0>)
 8006958:	4013      	ands	r3, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800695e:	00d2      	lsls	r2, r2, #3
 8006960:	4906      	ldr	r1, [pc, #24]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006962:	4313      	orrs	r3, r2
 8006964:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006966:	4b05      	ldr	r3, [pc, #20]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 8006968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696a:	4a04      	ldr	r2, [pc, #16]	@ (800697c <HAL_RCC_OscConfig+0x8ac>)
 800696c:	f043 0301 	orr.w	r3, r3, #1
 8006970:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3730      	adds	r7, #48	@ 0x30
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	58024400 	.word	0x58024400
 8006980:	ffff0007 	.word	0xffff0007

08006984 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e19c      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006998:	4b8a      	ldr	r3, [pc, #552]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d910      	bls.n	80069c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a6:	4b87      	ldr	r3, [pc, #540]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 020f 	bic.w	r2, r3, #15
 80069ae:	4985      	ldr	r1, [pc, #532]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b6:	4b83      	ldr	r3, [pc, #524]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d001      	beq.n	80069c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e184      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d010      	beq.n	80069f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	4b7b      	ldr	r3, [pc, #492]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d908      	bls.n	80069f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069e4:	4b78      	ldr	r3, [pc, #480]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	4975      	ldr	r1, [pc, #468]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d010      	beq.n	8006a24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695a      	ldr	r2, [r3, #20]
 8006a06:	4b70      	ldr	r3, [pc, #448]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a08:	69db      	ldr	r3, [r3, #28]
 8006a0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d908      	bls.n	8006a24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a12:	4b6d      	ldr	r3, [pc, #436]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a14:	69db      	ldr	r3, [r3, #28]
 8006a16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	496a      	ldr	r1, [pc, #424]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0310 	and.w	r3, r3, #16
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d010      	beq.n	8006a52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	4b64      	ldr	r3, [pc, #400]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d908      	bls.n	8006a52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a40:	4b61      	ldr	r3, [pc, #388]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	495e      	ldr	r1, [pc, #376]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d010      	beq.n	8006a80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	4b59      	ldr	r3, [pc, #356]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d908      	bls.n	8006a80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a6e:	4b56      	ldr	r3, [pc, #344]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	4953      	ldr	r1, [pc, #332]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d010      	beq.n	8006aae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	4b4d      	ldr	r3, [pc, #308]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d908      	bls.n	8006aae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f023 020f 	bic.w	r2, r3, #15
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4947      	ldr	r1, [pc, #284]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d055      	beq.n	8006b66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006aba:	4b43      	ldr	r3, [pc, #268]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	4940      	ldr	r1, [pc, #256]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d121      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e0f6      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b03      	cmp	r3, #3
 8006aea:	d107      	bne.n	8006afc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006aec:	4b36      	ldr	r3, [pc, #216]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d115      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e0ea      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d107      	bne.n	8006b14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b04:	4b30      	ldr	r3, [pc, #192]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0de      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b14:	4b2c      	ldr	r3, [pc, #176]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0d6      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b24:	4b28      	ldr	r3, [pc, #160]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	f023 0207 	bic.w	r2, r3, #7
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	4925      	ldr	r1, [pc, #148]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b36:	f7fb f925 	bl	8001d84 <HAL_GetTick>
 8006b3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b3c:	e00a      	b.n	8006b54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b3e:	f7fb f921 	bl	8001d84 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0be      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b54:	4b1c      	ldr	r3, [pc, #112]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d1eb      	bne.n	8006b3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d010      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	4b14      	ldr	r3, [pc, #80]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d208      	bcs.n	8006b94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b82:	4b11      	ldr	r3, [pc, #68]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	f023 020f 	bic.w	r2, r3, #15
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	490e      	ldr	r1, [pc, #56]	@ (8006bc8 <HAL_RCC_ClockConfig+0x244>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b94:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d214      	bcs.n	8006bcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba2:	4b08      	ldr	r3, [pc, #32]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f023 020f 	bic.w	r2, r3, #15
 8006baa:	4906      	ldr	r1, [pc, #24]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bb2:	4b04      	ldr	r3, [pc, #16]	@ (8006bc4 <HAL_RCC_ClockConfig+0x240>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 030f 	and.w	r3, r3, #15
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d005      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e086      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x34e>
 8006bc4:	52002000 	.word	0x52002000
 8006bc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d010      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d208      	bcs.n	8006bfa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006be8:	4b3c      	ldr	r3, [pc, #240]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006bea:	699b      	ldr	r3, [r3, #24]
 8006bec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	4939      	ldr	r1, [pc, #228]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0308 	and.w	r3, r3, #8
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d010      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695a      	ldr	r2, [r3, #20]
 8006c0a:	4b34      	ldr	r3, [pc, #208]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d208      	bcs.n	8006c28 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c16:	4b31      	ldr	r3, [pc, #196]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	492e      	ldr	r1, [pc, #184]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d010      	beq.n	8006c56 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699a      	ldr	r2, [r3, #24]
 8006c38:	4b28      	ldr	r3, [pc, #160]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d208      	bcs.n	8006c56 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c44:	4b25      	ldr	r3, [pc, #148]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	4922      	ldr	r1, [pc, #136]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d010      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69da      	ldr	r2, [r3, #28]
 8006c66:	4b1d      	ldr	r3, [pc, #116]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d208      	bcs.n	8006c84 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c72:	4b1a      	ldr	r3, [pc, #104]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	4917      	ldr	r1, [pc, #92]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006c84:	f000 f834 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	4b14      	ldr	r3, [pc, #80]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	4912      	ldr	r1, [pc, #72]	@ (8006ce0 <HAL_RCC_ClockConfig+0x35c>)
 8006c96:	5ccb      	ldrb	r3, [r1, r3]
 8006c98:	f003 031f 	and.w	r3, r3, #31
 8006c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8006cdc <HAL_RCC_ClockConfig+0x358>)
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	4a0d      	ldr	r2, [pc, #52]	@ (8006ce0 <HAL_RCC_ClockConfig+0x35c>)
 8006cac:	5cd3      	ldrb	r3, [r2, r3]
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce4 <HAL_RCC_ClockConfig+0x360>)
 8006cba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce8 <HAL_RCC_ClockConfig+0x364>)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cec <HAL_RCC_ClockConfig+0x368>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fb f812 	bl	8001cf0 <HAL_InitTick>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	58024400 	.word	0x58024400
 8006ce0:	0800e88c 	.word	0x0800e88c
 8006ce4:	24000008 	.word	0x24000008
 8006ce8:	24000004 	.word	0x24000004
 8006cec:	2400000c 	.word	0x2400000c

08006cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b089      	sub	sp, #36	@ 0x24
 8006cf4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cf6:	4bb3      	ldr	r3, [pc, #716]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cfe:	2b18      	cmp	r3, #24
 8006d00:	f200 8155 	bhi.w	8006fae <HAL_RCC_GetSysClockFreq+0x2be>
 8006d04:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0a:	bf00      	nop
 8006d0c:	08006d71 	.word	0x08006d71
 8006d10:	08006faf 	.word	0x08006faf
 8006d14:	08006faf 	.word	0x08006faf
 8006d18:	08006faf 	.word	0x08006faf
 8006d1c:	08006faf 	.word	0x08006faf
 8006d20:	08006faf 	.word	0x08006faf
 8006d24:	08006faf 	.word	0x08006faf
 8006d28:	08006faf 	.word	0x08006faf
 8006d2c:	08006d97 	.word	0x08006d97
 8006d30:	08006faf 	.word	0x08006faf
 8006d34:	08006faf 	.word	0x08006faf
 8006d38:	08006faf 	.word	0x08006faf
 8006d3c:	08006faf 	.word	0x08006faf
 8006d40:	08006faf 	.word	0x08006faf
 8006d44:	08006faf 	.word	0x08006faf
 8006d48:	08006faf 	.word	0x08006faf
 8006d4c:	08006d9d 	.word	0x08006d9d
 8006d50:	08006faf 	.word	0x08006faf
 8006d54:	08006faf 	.word	0x08006faf
 8006d58:	08006faf 	.word	0x08006faf
 8006d5c:	08006faf 	.word	0x08006faf
 8006d60:	08006faf 	.word	0x08006faf
 8006d64:	08006faf 	.word	0x08006faf
 8006d68:	08006faf 	.word	0x08006faf
 8006d6c:	08006da3 	.word	0x08006da3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d70:	4b94      	ldr	r3, [pc, #592]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d009      	beq.n	8006d90 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d7c:	4b91      	ldr	r3, [pc, #580]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	08db      	lsrs	r3, r3, #3
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	4a90      	ldr	r2, [pc, #576]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d8e:	e111      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d90:	4b8d      	ldr	r3, [pc, #564]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d92:	61bb      	str	r3, [r7, #24]
      break;
 8006d94:	e10e      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d96:	4b8d      	ldr	r3, [pc, #564]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d98:	61bb      	str	r3, [r7, #24]
      break;
 8006d9a:	e10b      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d9c:	4b8c      	ldr	r3, [pc, #560]	@ (8006fd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d9e:	61bb      	str	r3, [r7, #24]
      break;
 8006da0:	e108      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006da2:	4b88      	ldr	r3, [pc, #544]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006dac:	4b85      	ldr	r3, [pc, #532]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006db6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006db8:	4b82      	ldr	r3, [pc, #520]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006dc2:	4b80      	ldr	r3, [pc, #512]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc6:	08db      	lsrs	r3, r3, #3
 8006dc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dda:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80e1 	beq.w	8006fa8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	f000 8083 	beq.w	8006ef4 <HAL_RCC_GetSysClockFreq+0x204>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	f200 80a1 	bhi.w	8006f38 <HAL_RCC_GetSysClockFreq+0x248>
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d003      	beq.n	8006e04 <HAL_RCC_GetSysClockFreq+0x114>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d056      	beq.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e02:	e099      	b.n	8006f38 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e04:	4b6f      	ldr	r3, [pc, #444]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d02d      	beq.n	8006e6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e10:	4b6c      	ldr	r3, [pc, #432]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	08db      	lsrs	r3, r3, #3
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	4a6b      	ldr	r2, [pc, #428]	@ (8006fc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	ee07 3a90 	vmov	s15, r3
 8006e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b62      	ldr	r3, [pc, #392]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e4e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e6a:	e087      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e76:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006fd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7e:	4b51      	ldr	r3, [pc, #324]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e92:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eae:	e065      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ec2:	4b40      	ldr	r3, [pc, #256]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ed6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ef2:	e043      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006fe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f06:	4b2f      	ldr	r3, [pc, #188]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f1a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f36:	e021      	b.n	8006f7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f42:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006fdc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f5e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006fd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f7c:	4b11      	ldr	r3, [pc, #68]	@ (8006fc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f80:	0a5b      	lsrs	r3, r3, #9
 8006f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f86:	3301      	adds	r3, #1
 8006f88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	ee07 3a90 	vmov	s15, r3
 8006f90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa0:	ee17 3a90 	vmov	r3, s15
 8006fa4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006fa6:	e005      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61bb      	str	r3, [r7, #24]
      break;
 8006fac:	e002      	b.n	8006fb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006fae:	4b07      	ldr	r3, [pc, #28]	@ (8006fcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fb0:	61bb      	str	r3, [r7, #24]
      break;
 8006fb2:	bf00      	nop
  }

  return sysclockfreq;
 8006fb4:	69bb      	ldr	r3, [r7, #24]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3724      	adds	r7, #36	@ 0x24
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	58024400 	.word	0x58024400
 8006fc8:	03d09000 	.word	0x03d09000
 8006fcc:	003d0900 	.word	0x003d0900
 8006fd0:	007a1200 	.word	0x007a1200
 8006fd4:	46000000 	.word	0x46000000
 8006fd8:	4c742400 	.word	0x4c742400
 8006fdc:	4a742400 	.word	0x4a742400
 8006fe0:	4af42400 	.word	0x4af42400

08006fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006fea:	f7ff fe81 	bl	8006cf0 <HAL_RCC_GetSysClockFreq>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	4b10      	ldr	r3, [pc, #64]	@ (8007034 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	0a1b      	lsrs	r3, r3, #8
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	490f      	ldr	r1, [pc, #60]	@ (8007038 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ffc:	5ccb      	ldrb	r3, [r1, r3]
 8006ffe:	f003 031f 	and.w	r3, r3, #31
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007008:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <HAL_RCC_GetHCLKFreq+0x50>)
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	4a09      	ldr	r2, [pc, #36]	@ (8007038 <HAL_RCC_GetHCLKFreq+0x54>)
 8007012:	5cd3      	ldrb	r3, [r2, r3]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	fa22 f303 	lsr.w	r3, r2, r3
 800701e:	4a07      	ldr	r2, [pc, #28]	@ (800703c <HAL_RCC_GetHCLKFreq+0x58>)
 8007020:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007022:	4a07      	ldr	r2, [pc, #28]	@ (8007040 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007028:	4b04      	ldr	r3, [pc, #16]	@ (800703c <HAL_RCC_GetHCLKFreq+0x58>)
 800702a:	681b      	ldr	r3, [r3, #0]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	58024400 	.word	0x58024400
 8007038:	0800e88c 	.word	0x0800e88c
 800703c:	24000008 	.word	0x24000008
 8007040:	24000004 	.word	0x24000004

08007044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007048:	f7ff ffcc 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 800704c:	4602      	mov	r2, r0
 800704e:	4b06      	ldr	r3, [pc, #24]	@ (8007068 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	091b      	lsrs	r3, r3, #4
 8007054:	f003 0307 	and.w	r3, r3, #7
 8007058:	4904      	ldr	r1, [pc, #16]	@ (800706c <HAL_RCC_GetPCLK1Freq+0x28>)
 800705a:	5ccb      	ldrb	r3, [r1, r3]
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007064:	4618      	mov	r0, r3
 8007066:	bd80      	pop	{r7, pc}
 8007068:	58024400 	.word	0x58024400
 800706c:	0800e88c 	.word	0x0800e88c

08007070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007074:	f7ff ffb6 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 8007078:	4602      	mov	r2, r0
 800707a:	4b06      	ldr	r3, [pc, #24]	@ (8007094 <HAL_RCC_GetPCLK2Freq+0x24>)
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	0a1b      	lsrs	r3, r3, #8
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	4904      	ldr	r1, [pc, #16]	@ (8007098 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007086:	5ccb      	ldrb	r3, [r1, r3]
 8007088:	f003 031f 	and.w	r3, r3, #31
 800708c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007090:	4618      	mov	r0, r3
 8007092:	bd80      	pop	{r7, pc}
 8007094:	58024400 	.word	0x58024400
 8007098:	0800e88c 	.word	0x0800e88c

0800709c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800709c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070a0:	b0ca      	sub	sp, #296	@ 0x128
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070a8:	2300      	movs	r3, #0
 80070aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070ae:	2300      	movs	r3, #0
 80070b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80070c0:	2500      	movs	r5, #0
 80070c2:	ea54 0305 	orrs.w	r3, r4, r5
 80070c6:	d049      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80070c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80070ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070d2:	d02f      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80070d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80070d8:	d828      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070de:	d01a      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80070e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070e4:	d822      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070ee:	d007      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070f0:	e01c      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f2:	4bb8      	ldr	r3, [pc, #736]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f6:	4ab7      	ldr	r2, [pc, #732]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070fe:	e01a      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007104:	3308      	adds	r3, #8
 8007106:	2102      	movs	r1, #2
 8007108:	4618      	mov	r0, r3
 800710a:	f002 fb61 	bl	80097d0 <RCCEx_PLL2_Config>
 800710e:	4603      	mov	r3, r0
 8007110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007114:	e00f      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800711a:	3328      	adds	r3, #40	@ 0x28
 800711c:	2102      	movs	r1, #2
 800711e:	4618      	mov	r0, r3
 8007120:	f002 fc08 	bl	8009934 <RCCEx_PLL3_Config>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800712a:	e004      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007132:	e000      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800713a:	2b00      	cmp	r3, #0
 800713c:	d10a      	bne.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800713e:	4ba5      	ldr	r3, [pc, #660]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007142:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800714c:	4aa1      	ldr	r2, [pc, #644]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800714e:	430b      	orrs	r3, r1
 8007150:	6513      	str	r3, [r2, #80]	@ 0x50
 8007152:	e003      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800715c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007168:	f04f 0900 	mov.w	r9, #0
 800716c:	ea58 0309 	orrs.w	r3, r8, r9
 8007170:	d047      	beq.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007178:	2b04      	cmp	r3, #4
 800717a:	d82a      	bhi.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800717c:	a201      	add	r2, pc, #4	@ (adr r2, 8007184 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800717e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007182:	bf00      	nop
 8007184:	08007199 	.word	0x08007199
 8007188:	080071a7 	.word	0x080071a7
 800718c:	080071bd 	.word	0x080071bd
 8007190:	080071db 	.word	0x080071db
 8007194:	080071db 	.word	0x080071db
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007198:	4b8e      	ldr	r3, [pc, #568]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800719a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719c:	4a8d      	ldr	r2, [pc, #564]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800719e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071a4:	e01a      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	3308      	adds	r3, #8
 80071ac:	2100      	movs	r1, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	f002 fb0e 	bl	80097d0 <RCCEx_PLL2_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ba:	e00f      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c0:	3328      	adds	r3, #40	@ 0x28
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f002 fbb5 	bl	8009934 <RCCEx_PLL3_Config>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071d0:	e004      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071d8:	e000      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80071da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071e4:	4b7b      	ldr	r3, [pc, #492]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e8:	f023 0107 	bic.w	r1, r3, #7
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f2:	4a78      	ldr	r2, [pc, #480]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80071f4:	430b      	orrs	r3, r1
 80071f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80071f8:	e003      	b.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800720e:	f04f 0b00 	mov.w	fp, #0
 8007212:	ea5a 030b 	orrs.w	r3, sl, fp
 8007216:	d04c      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800721e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007222:	d030      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007224:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007228:	d829      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800722a:	2bc0      	cmp	r3, #192	@ 0xc0
 800722c:	d02d      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800722e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007230:	d825      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007232:	2b80      	cmp	r3, #128	@ 0x80
 8007234:	d018      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007236:	2b80      	cmp	r3, #128	@ 0x80
 8007238:	d821      	bhi.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800723e:	2b40      	cmp	r3, #64	@ 0x40
 8007240:	d007      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007242:	e01c      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007244:	4b63      	ldr	r3, [pc, #396]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007248:	4a62      	ldr	r2, [pc, #392]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800724a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800724e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007250:	e01c      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007256:	3308      	adds	r3, #8
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f002 fab8 	bl	80097d0 <RCCEx_PLL2_Config>
 8007260:	4603      	mov	r3, r0
 8007262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007266:	e011      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800726c:	3328      	adds	r3, #40	@ 0x28
 800726e:	2100      	movs	r1, #0
 8007270:	4618      	mov	r0, r3
 8007272:	f002 fb5f 	bl	8009934 <RCCEx_PLL3_Config>
 8007276:	4603      	mov	r3, r0
 8007278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800727c:	e006      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007284:	e002      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007286:	bf00      	nop
 8007288:	e000      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800728a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800728c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007294:	4b4f      	ldr	r3, [pc, #316]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007298:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800729c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a2:	4a4c      	ldr	r2, [pc, #304]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80072a4:	430b      	orrs	r3, r1
 80072a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80072a8:	e003      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80072b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80072be:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80072c2:	2300      	movs	r3, #0
 80072c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80072c8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80072cc:	460b      	mov	r3, r1
 80072ce:	4313      	orrs	r3, r2
 80072d0:	d053      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80072d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80072da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072de:	d035      	beq.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80072e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80072e4:	d82e      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072e6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80072ea:	d031      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80072ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80072f0:	d828      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072f6:	d01a      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80072f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072fc:	d822      	bhi.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007302:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007306:	d007      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007308:	e01c      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800730a:	4b32      	ldr	r3, [pc, #200]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800730c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800730e:	4a31      	ldr	r2, [pc, #196]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007314:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007316:	e01c      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800731c:	3308      	adds	r3, #8
 800731e:	2100      	movs	r1, #0
 8007320:	4618      	mov	r0, r3
 8007322:	f002 fa55 	bl	80097d0 <RCCEx_PLL2_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800732c:	e011      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800732e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007332:	3328      	adds	r3, #40	@ 0x28
 8007334:	2100      	movs	r1, #0
 8007336:	4618      	mov	r0, r3
 8007338:	f002 fafc 	bl	8009934 <RCCEx_PLL3_Config>
 800733c:	4603      	mov	r3, r0
 800733e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007342:	e006      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800734a:	e002      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800734c:	bf00      	nop
 800734e:	e000      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10b      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800735a:	4b1e      	ldr	r3, [pc, #120]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800735c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007366:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800736a:	4a1a      	ldr	r2, [pc, #104]	@ (80073d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800736c:	430b      	orrs	r3, r1
 800736e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007370:	e003      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800737a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8007386:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800738a:	2300      	movs	r3, #0
 800738c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007390:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007394:	460b      	mov	r3, r1
 8007396:	4313      	orrs	r3, r2
 8007398:	d056      	beq.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800739a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80073a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073a6:	d038      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80073a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80073ac:	d831      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80073b2:	d034      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80073b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80073b8:	d82b      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073be:	d01d      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80073c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073c4:	d825      	bhi.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d006      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80073ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073ce:	d00a      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80073d0:	e01f      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80073d2:	bf00      	nop
 80073d4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d8:	4ba2      	ldr	r3, [pc, #648]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073dc:	4aa1      	ldr	r2, [pc, #644]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80073de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073e4:	e01c      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ea:	3308      	adds	r3, #8
 80073ec:	2100      	movs	r1, #0
 80073ee:	4618      	mov	r0, r3
 80073f0:	f002 f9ee 	bl	80097d0 <RCCEx_PLL2_Config>
 80073f4:	4603      	mov	r3, r0
 80073f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80073fa:	e011      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007400:	3328      	adds	r3, #40	@ 0x28
 8007402:	2100      	movs	r1, #0
 8007404:	4618      	mov	r0, r3
 8007406:	f002 fa95 	bl	8009934 <RCCEx_PLL3_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007410:	e006      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007418:	e002      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800741a:	bf00      	nop
 800741c:	e000      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800741e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10b      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007428:	4b8e      	ldr	r3, [pc, #568]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800742a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007434:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007438:	4a8a      	ldr	r2, [pc, #552]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800743a:	430b      	orrs	r3, r1
 800743c:	6593      	str	r3, [r2, #88]	@ 0x58
 800743e:	e003      	b.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007454:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007458:	2300      	movs	r3, #0
 800745a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800745e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007462:	460b      	mov	r3, r1
 8007464:	4313      	orrs	r3, r2
 8007466:	d03a      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800746e:	2b30      	cmp	r3, #48	@ 0x30
 8007470:	d01f      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007472:	2b30      	cmp	r3, #48	@ 0x30
 8007474:	d819      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007476:	2b20      	cmp	r3, #32
 8007478:	d00c      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800747a:	2b20      	cmp	r3, #32
 800747c:	d815      	bhi.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800747e:	2b00      	cmp	r3, #0
 8007480:	d019      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007482:	2b10      	cmp	r3, #16
 8007484:	d111      	bne.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007486:	4b77      	ldr	r3, [pc, #476]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748a:	4a76      	ldr	r2, [pc, #472]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800748c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007490:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007492:	e011      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007498:	3308      	adds	r3, #8
 800749a:	2102      	movs	r1, #2
 800749c:	4618      	mov	r0, r3
 800749e:	f002 f997 	bl	80097d0 <RCCEx_PLL2_Config>
 80074a2:	4603      	mov	r3, r0
 80074a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80074a8:	e006      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074b0:	e002      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80074b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10a      	bne.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80074c0:	4b68      	ldr	r3, [pc, #416]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074c4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ce:	4a65      	ldr	r2, [pc, #404]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80074d0:	430b      	orrs	r3, r1
 80074d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074d4:	e003      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80074ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80074ee:	2300      	movs	r3, #0
 80074f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074f4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4313      	orrs	r3, r2
 80074fc:	d051      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80074fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007504:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007508:	d035      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800750a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800750e:	d82e      	bhi.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007510:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007514:	d031      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007516:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800751a:	d828      	bhi.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800751c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007520:	d01a      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007526:	d822      	bhi.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800752c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007530:	d007      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007532:	e01c      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007534:	4b4b      	ldr	r3, [pc, #300]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007538:	4a4a      	ldr	r2, [pc, #296]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800753a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800753e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007540:	e01c      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007546:	3308      	adds	r3, #8
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f002 f940 	bl	80097d0 <RCCEx_PLL2_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007556:	e011      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800755c:	3328      	adds	r3, #40	@ 0x28
 800755e:	2100      	movs	r1, #0
 8007560:	4618      	mov	r0, r3
 8007562:	f002 f9e7 	bl	8009934 <RCCEx_PLL3_Config>
 8007566:	4603      	mov	r3, r0
 8007568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800756c:	e006      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007574:	e002      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007576:	bf00      	nop
 8007578:	e000      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800757a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800757c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007584:	4b37      	ldr	r3, [pc, #220]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007588:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800758c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007592:	4a34      	ldr	r2, [pc, #208]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007594:	430b      	orrs	r3, r1
 8007596:	6513      	str	r3, [r2, #80]	@ 0x50
 8007598:	e003      	b.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800759e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80075a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80075ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075b2:	2300      	movs	r3, #0
 80075b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80075b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80075bc:	460b      	mov	r3, r1
 80075be:	4313      	orrs	r3, r2
 80075c0:	d056      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80075c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075cc:	d033      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80075ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075d2:	d82c      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075d8:	d02f      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80075da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075de:	d826      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075e4:	d02b      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80075e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075ea:	d820      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075f0:	d012      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80075f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075f6:	d81a      	bhi.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d022      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80075fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007600:	d115      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007606:	3308      	adds	r3, #8
 8007608:	2101      	movs	r1, #1
 800760a:	4618      	mov	r0, r3
 800760c:	f002 f8e0 	bl	80097d0 <RCCEx_PLL2_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007616:	e015      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800761c:	3328      	adds	r3, #40	@ 0x28
 800761e:	2101      	movs	r1, #1
 8007620:	4618      	mov	r0, r3
 8007622:	f002 f987 	bl	8009934 <RCCEx_PLL3_Config>
 8007626:	4603      	mov	r3, r0
 8007628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800762c:	e00a      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007634:	e006      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007636:	bf00      	nop
 8007638:	e004      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800763a:	bf00      	nop
 800763c:	e002      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800763e:	bf00      	nop
 8007640:	e000      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10d      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800764c:	4b05      	ldr	r3, [pc, #20]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800764e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007650:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007658:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800765a:	4a02      	ldr	r2, [pc, #8]	@ (8007664 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800765c:	430b      	orrs	r3, r1
 800765e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007660:	e006      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007662:	bf00      	nop
 8007664:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800767c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007680:	2300      	movs	r3, #0
 8007682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007686:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800768a:	460b      	mov	r3, r1
 800768c:	4313      	orrs	r3, r2
 800768e:	d055      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800769c:	d033      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800769e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076a2:	d82c      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076a8:	d02f      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80076aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ae:	d826      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076b4:	d02b      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80076b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076ba:	d820      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076c0:	d012      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80076c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076c6:	d81a      	bhi.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d022      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80076cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076d0:	d115      	bne.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	3308      	adds	r3, #8
 80076d8:	2101      	movs	r1, #1
 80076da:	4618      	mov	r0, r3
 80076dc:	f002 f878 	bl	80097d0 <RCCEx_PLL2_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076e6:	e015      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ec:	3328      	adds	r3, #40	@ 0x28
 80076ee:	2101      	movs	r1, #1
 80076f0:	4618      	mov	r0, r3
 80076f2:	f002 f91f 	bl	8009934 <RCCEx_PLL3_Config>
 80076f6:	4603      	mov	r3, r0
 80076f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076fc:	e00a      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007704:	e006      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007706:	bf00      	nop
 8007708:	e004      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800770a:	bf00      	nop
 800770c:	e002      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10b      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800771c:	4ba3      	ldr	r3, [pc, #652]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800771e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007720:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800772c:	4a9f      	ldr	r2, [pc, #636]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800772e:	430b      	orrs	r3, r1
 8007730:	6593      	str	r3, [r2, #88]	@ 0x58
 8007732:	e003      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007738:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800773c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007748:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800774c:	2300      	movs	r3, #0
 800774e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007756:	460b      	mov	r3, r1
 8007758:	4313      	orrs	r3, r2
 800775a:	d037      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800775c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007766:	d00e      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007768:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800776c:	d816      	bhi.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800776e:	2b00      	cmp	r3, #0
 8007770:	d018      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007772:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007776:	d111      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007778:	4b8c      	ldr	r3, [pc, #560]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800777a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800777c:	4a8b      	ldr	r2, [pc, #556]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800777e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007784:	e00f      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778a:	3308      	adds	r3, #8
 800778c:	2101      	movs	r1, #1
 800778e:	4618      	mov	r0, r3
 8007790:	f002 f81e 	bl	80097d0 <RCCEx_PLL2_Config>
 8007794:	4603      	mov	r3, r0
 8007796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800779a:	e004      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077a2:	e000      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80077a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077ae:	4b7f      	ldr	r3, [pc, #508]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077bc:	4a7b      	ldr	r2, [pc, #492]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80077be:	430b      	orrs	r3, r1
 80077c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80077c2:	e003      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80077d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077dc:	2300      	movs	r3, #0
 80077de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4313      	orrs	r3, r2
 80077ea:	d039      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077f2:	2b03      	cmp	r3, #3
 80077f4:	d81c      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80077f6:	a201      	add	r2, pc, #4	@ (adr r2, 80077fc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80077f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fc:	08007839 	.word	0x08007839
 8007800:	0800780d 	.word	0x0800780d
 8007804:	0800781b 	.word	0x0800781b
 8007808:	08007839 	.word	0x08007839
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800780c:	4b67      	ldr	r3, [pc, #412]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800780e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007810:	4a66      	ldr	r2, [pc, #408]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007812:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007818:	e00f      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781e:	3308      	adds	r3, #8
 8007820:	2102      	movs	r1, #2
 8007822:	4618      	mov	r0, r3
 8007824:	f001 ffd4 	bl	80097d0 <RCCEx_PLL2_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800782e:	e004      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007836:	e000      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800783a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007842:	4b5a      	ldr	r3, [pc, #360]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007846:	f023 0103 	bic.w	r1, r3, #3
 800784a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007850:	4a56      	ldr	r2, [pc, #344]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007852:	430b      	orrs	r3, r1
 8007854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007856:	e003      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800785c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800786c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007870:	2300      	movs	r3, #0
 8007872:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007876:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800787a:	460b      	mov	r3, r1
 800787c:	4313      	orrs	r3, r2
 800787e:	f000 809f 	beq.w	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007882:	4b4b      	ldr	r3, [pc, #300]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a4a      	ldr	r2, [pc, #296]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007888:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800788c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800788e:	f7fa fa79 	bl	8001d84 <HAL_GetTick>
 8007892:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007896:	e00b      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007898:	f7fa fa74 	bl	8001d84 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b64      	cmp	r3, #100	@ 0x64
 80078a6:	d903      	bls.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ae:	e005      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80078b0:	4b3f      	ldr	r3, [pc, #252]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0ed      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80078bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d179      	bne.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80078c4:	4b39      	ldr	r3, [pc, #228]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078d0:	4053      	eors	r3, r2
 80078d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d015      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078da:	4b34      	ldr	r3, [pc, #208]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078e6:	4b31      	ldr	r3, [pc, #196]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ea:	4a30      	ldr	r2, [pc, #192]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078f0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078f2:	4b2e      	ldr	r3, [pc, #184]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f6:	4a2d      	ldr	r2, [pc, #180]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80078f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078fc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078fe:	4a2b      	ldr	r2, [pc, #172]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007904:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800790e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007912:	d118      	bne.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007914:	f7fa fa36 	bl	8001d84 <HAL_GetTick>
 8007918:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800791c:	e00d      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800791e:	f7fa fa31 	bl	8001d84 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007928:	1ad2      	subs	r2, r2, r3
 800792a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800792e:	429a      	cmp	r2, r3
 8007930:	d903      	bls.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007938:	e005      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800793a:	4b1c      	ldr	r3, [pc, #112]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800793c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0eb      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800794a:	2b00      	cmp	r3, #0
 800794c:	d129      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800794e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007952:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800795a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800795e:	d10e      	bne.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007960:	4b12      	ldr	r3, [pc, #72]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007968:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007970:	091a      	lsrs	r2, r3, #4
 8007972:	4b10      	ldr	r3, [pc, #64]	@ (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007974:	4013      	ands	r3, r2
 8007976:	4a0d      	ldr	r2, [pc, #52]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007978:	430b      	orrs	r3, r1
 800797a:	6113      	str	r3, [r2, #16]
 800797c:	e005      	b.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800797e:	4b0b      	ldr	r3, [pc, #44]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	4a0a      	ldr	r2, [pc, #40]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007984:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007988:	6113      	str	r3, [r2, #16]
 800798a:	4b08      	ldr	r3, [pc, #32]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800798c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800798e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007992:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800799a:	4a04      	ldr	r2, [pc, #16]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800799c:	430b      	orrs	r3, r1
 800799e:	6713      	str	r3, [r2, #112]	@ 0x70
 80079a0:	e00e      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80079aa:	e009      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80079ac:	58024400 	.word	0x58024400
 80079b0:	58024800 	.word	0x58024800
 80079b4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80079c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f002 0301 	and.w	r3, r2, #1
 80079cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079d0:	2300      	movs	r3, #0
 80079d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079d6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079da:	460b      	mov	r3, r1
 80079dc:	4313      	orrs	r3, r2
 80079de:	f000 8089 	beq.w	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80079e8:	2b28      	cmp	r3, #40	@ 0x28
 80079ea:	d86b      	bhi.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80079ec:	a201      	add	r2, pc, #4	@ (adr r2, 80079f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80079ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f2:	bf00      	nop
 80079f4:	08007acd 	.word	0x08007acd
 80079f8:	08007ac5 	.word	0x08007ac5
 80079fc:	08007ac5 	.word	0x08007ac5
 8007a00:	08007ac5 	.word	0x08007ac5
 8007a04:	08007ac5 	.word	0x08007ac5
 8007a08:	08007ac5 	.word	0x08007ac5
 8007a0c:	08007ac5 	.word	0x08007ac5
 8007a10:	08007ac5 	.word	0x08007ac5
 8007a14:	08007a99 	.word	0x08007a99
 8007a18:	08007ac5 	.word	0x08007ac5
 8007a1c:	08007ac5 	.word	0x08007ac5
 8007a20:	08007ac5 	.word	0x08007ac5
 8007a24:	08007ac5 	.word	0x08007ac5
 8007a28:	08007ac5 	.word	0x08007ac5
 8007a2c:	08007ac5 	.word	0x08007ac5
 8007a30:	08007ac5 	.word	0x08007ac5
 8007a34:	08007aaf 	.word	0x08007aaf
 8007a38:	08007ac5 	.word	0x08007ac5
 8007a3c:	08007ac5 	.word	0x08007ac5
 8007a40:	08007ac5 	.word	0x08007ac5
 8007a44:	08007ac5 	.word	0x08007ac5
 8007a48:	08007ac5 	.word	0x08007ac5
 8007a4c:	08007ac5 	.word	0x08007ac5
 8007a50:	08007ac5 	.word	0x08007ac5
 8007a54:	08007acd 	.word	0x08007acd
 8007a58:	08007ac5 	.word	0x08007ac5
 8007a5c:	08007ac5 	.word	0x08007ac5
 8007a60:	08007ac5 	.word	0x08007ac5
 8007a64:	08007ac5 	.word	0x08007ac5
 8007a68:	08007ac5 	.word	0x08007ac5
 8007a6c:	08007ac5 	.word	0x08007ac5
 8007a70:	08007ac5 	.word	0x08007ac5
 8007a74:	08007acd 	.word	0x08007acd
 8007a78:	08007ac5 	.word	0x08007ac5
 8007a7c:	08007ac5 	.word	0x08007ac5
 8007a80:	08007ac5 	.word	0x08007ac5
 8007a84:	08007ac5 	.word	0x08007ac5
 8007a88:	08007ac5 	.word	0x08007ac5
 8007a8c:	08007ac5 	.word	0x08007ac5
 8007a90:	08007ac5 	.word	0x08007ac5
 8007a94:	08007acd 	.word	0x08007acd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f001 fe95 	bl	80097d0 <RCCEx_PLL2_Config>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007aac:	e00f      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ab2:	3328      	adds	r3, #40	@ 0x28
 8007ab4:	2101      	movs	r1, #1
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 ff3c 	bl	8009934 <RCCEx_PLL3_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ac2:	e004      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007aca:	e000      	b.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ad6:	4bbf      	ldr	r3, [pc, #764]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ada:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007ae4:	4abb      	ldr	r2, [pc, #748]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	6553      	str	r3, [r2, #84]	@ 0x54
 8007aea:	e003      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afc:	f002 0302 	and.w	r3, r2, #2
 8007b00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b04:	2300      	movs	r3, #0
 8007b06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b0a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007b0e:	460b      	mov	r3, r1
 8007b10:	4313      	orrs	r3, r2
 8007b12:	d041      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b1a:	2b05      	cmp	r3, #5
 8007b1c:	d824      	bhi.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b71 	.word	0x08007b71
 8007b28:	08007b3d 	.word	0x08007b3d
 8007b2c:	08007b53 	.word	0x08007b53
 8007b30:	08007b71 	.word	0x08007b71
 8007b34:	08007b71 	.word	0x08007b71
 8007b38:	08007b71 	.word	0x08007b71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b40:	3308      	adds	r3, #8
 8007b42:	2101      	movs	r1, #1
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 fe43 	bl	80097d0 <RCCEx_PLL2_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b50:	e00f      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b56:	3328      	adds	r3, #40	@ 0x28
 8007b58:	2101      	movs	r1, #1
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f001 feea 	bl	8009934 <RCCEx_PLL3_Config>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b66:	e004      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b6e:	e000      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007b70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b7a:	4b96      	ldr	r3, [pc, #600]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7e:	f023 0107 	bic.w	r1, r3, #7
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b88:	4a92      	ldr	r2, [pc, #584]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b8a:	430b      	orrs	r3, r1
 8007b8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b8e:	e003      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	f002 0304 	and.w	r3, r2, #4
 8007ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	d044      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bc0:	2b05      	cmp	r3, #5
 8007bc2:	d825      	bhi.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bcc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bca:	bf00      	nop
 8007bcc:	08007c19 	.word	0x08007c19
 8007bd0:	08007be5 	.word	0x08007be5
 8007bd4:	08007bfb 	.word	0x08007bfb
 8007bd8:	08007c19 	.word	0x08007c19
 8007bdc:	08007c19 	.word	0x08007c19
 8007be0:	08007c19 	.word	0x08007c19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be8:	3308      	adds	r3, #8
 8007bea:	2101      	movs	r1, #1
 8007bec:	4618      	mov	r0, r3
 8007bee:	f001 fdef 	bl	80097d0 <RCCEx_PLL2_Config>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bf8:	e00f      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfe:	3328      	adds	r3, #40	@ 0x28
 8007c00:	2101      	movs	r1, #1
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 fe96 	bl	8009934 <RCCEx_PLL3_Config>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007c0e:	e004      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c16:	e000      	b.n	8007c1a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10b      	bne.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c22:	4b6c      	ldr	r3, [pc, #432]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c26:	f023 0107 	bic.w	r1, r3, #7
 8007c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c32:	4a68      	ldr	r2, [pc, #416]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c38:	e003      	b.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	f002 0320 	and.w	r3, r2, #32
 8007c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c52:	2300      	movs	r3, #0
 8007c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	d055      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c6e:	d033      	beq.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c74:	d82c      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c7a:	d02f      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c80:	d826      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c86:	d02b      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007c88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c8c:	d820      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c92:	d012      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c98:	d81a      	bhi.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d022      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ca2:	d115      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca8:	3308      	adds	r3, #8
 8007caa:	2100      	movs	r1, #0
 8007cac:	4618      	mov	r0, r3
 8007cae:	f001 fd8f 	bl	80097d0 <RCCEx_PLL2_Config>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007cb8:	e015      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cbe:	3328      	adds	r3, #40	@ 0x28
 8007cc0:	2102      	movs	r1, #2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 fe36 	bl	8009934 <RCCEx_PLL3_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007cce:	e00a      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007cd6:	e006      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cd8:	bf00      	nop
 8007cda:	e004      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007cdc:	bf00      	nop
 8007cde:	e002      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ce0:	bf00      	nop
 8007ce2:	e000      	b.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d10b      	bne.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cee:	4b39      	ldr	r3, [pc, #228]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cfe:	4a35      	ldr	r2, [pc, #212]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d00:	430b      	orrs	r3, r1
 8007d02:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d04:	e003      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	d058      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d3a:	d033      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007d3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d40:	d82c      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d46:	d02f      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d4c:	d826      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d52:	d02b      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007d54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d58:	d820      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d5e:	d012      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007d60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d64:	d81a      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d022      	beq.n	8007db0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007d6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d6e:	d115      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d74:	3308      	adds	r3, #8
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 fd29 	bl	80097d0 <RCCEx_PLL2_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d84:	e015      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8a:	3328      	adds	r3, #40	@ 0x28
 8007d8c:	2102      	movs	r1, #2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f001 fdd0 	bl	8009934 <RCCEx_PLL3_Config>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d9a:	e00a      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007da2:	e006      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007da4:	bf00      	nop
 8007da6:	e004      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007da8:	bf00      	nop
 8007daa:	e002      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007dac:	bf00      	nop
 8007dae:	e000      	b.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d10e      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dba:	4b06      	ldr	r3, [pc, #24]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dbe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dca:	4a02      	ldr	r2, [pc, #8]	@ (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dd0:	e006      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007dd2:	bf00      	nop
 8007dd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007dec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007df0:	2300      	movs	r3, #0
 8007df2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007df6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	d055      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e0c:	d033      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007e0e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007e12:	d82c      	bhi.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e18:	d02f      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007e1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e1e:	d826      	bhi.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e24:	d02b      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007e26:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e2a:	d820      	bhi.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e30:	d012      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007e32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e36:	d81a      	bhi.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d022      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e40:	d115      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e46:	3308      	adds	r3, #8
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 fcc0 	bl	80097d0 <RCCEx_PLL2_Config>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e56:	e015      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e5c:	3328      	adds	r3, #40	@ 0x28
 8007e5e:	2102      	movs	r1, #2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 fd67 	bl	8009934 <RCCEx_PLL3_Config>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e6c:	e00a      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e74:	e006      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e76:	bf00      	nop
 8007e78:	e004      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e7a:	bf00      	nop
 8007e7c:	e002      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e7e:	bf00      	nop
 8007e80:	e000      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10b      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e8c:	4ba1      	ldr	r3, [pc, #644]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e90:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e9c:	4a9d      	ldr	r2, [pc, #628]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e9e:	430b      	orrs	r3, r1
 8007ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ea2:	e003      	b.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	f002 0308 	and.w	r3, r2, #8
 8007eb8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ec2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	d01e      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ed8:	d10c      	bne.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ede:	3328      	adds	r3, #40	@ 0x28
 8007ee0:	2102      	movs	r1, #2
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f001 fd26 	bl	8009934 <RCCEx_PLL3_Config>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ef4:	4b87      	ldr	r3, [pc, #540]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ef8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007f04:	4a83      	ldr	r2, [pc, #524]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f06:	430b      	orrs	r3, r1
 8007f08:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	f002 0310 	and.w	r3, r2, #16
 8007f16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f20:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007f24:	460b      	mov	r3, r1
 8007f26:	4313      	orrs	r3, r2
 8007f28:	d01e      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f36:	d10c      	bne.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3c:	3328      	adds	r3, #40	@ 0x28
 8007f3e:	2102      	movs	r1, #2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 fcf7 	bl	8009934 <RCCEx_PLL3_Config>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f52:	4b70      	ldr	r3, [pc, #448]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f62:	4a6c      	ldr	r2, [pc, #432]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007f64:	430b      	orrs	r3, r1
 8007f66:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f7e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007f82:	460b      	mov	r3, r1
 8007f84:	4313      	orrs	r3, r2
 8007f86:	d03e      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f94:	d022      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007f96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f9a:	d81b      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007fa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa4:	d00b      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007fa6:	e015      	b.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fac:	3308      	adds	r3, #8
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 fc0d 	bl	80097d0 <RCCEx_PLL2_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fbc:	e00f      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	3328      	adds	r3, #40	@ 0x28
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 fcb4 	bl	8009934 <RCCEx_PLL3_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fd2:	e004      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fda:	e000      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fe6:	4b4b      	ldr	r3, [pc, #300]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ff6:	4a47      	ldr	r2, [pc, #284]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ffc:	e003      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008002:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008012:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008014:	2300      	movs	r3, #0
 8008016:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008018:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800801c:	460b      	mov	r3, r1
 800801e:	4313      	orrs	r3, r2
 8008020:	d03b      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800802e:	d01f      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008030:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008034:	d818      	bhi.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800803a:	d003      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800803c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008040:	d007      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008042:	e011      	b.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008044:	4b33      	ldr	r3, [pc, #204]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008048:	4a32      	ldr	r2, [pc, #200]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800804a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800804e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008050:	e00f      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008056:	3328      	adds	r3, #40	@ 0x28
 8008058:	2101      	movs	r1, #1
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fc6a 	bl	8009934 <RCCEx_PLL3_Config>
 8008060:	4603      	mov	r3, r0
 8008062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008066:	e004      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800806e:	e000      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10b      	bne.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800807a:	4b26      	ldr	r3, [pc, #152]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800807c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800807e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800808a:	4a22      	ldr	r2, [pc, #136]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800808c:	430b      	orrs	r3, r1
 800808e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008090:	e003      	b.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800809a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80080a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80080a8:	2300      	movs	r3, #0
 80080aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80080ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80080b0:	460b      	mov	r3, r1
 80080b2:	4313      	orrs	r3, r2
 80080b4:	d034      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80080b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80080c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c4:	d007      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80080c6:	e011      	b.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080c8:	4b12      	ldr	r3, [pc, #72]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080cc:	4a11      	ldr	r2, [pc, #68]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080d4:	e00e      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080da:	3308      	adds	r3, #8
 80080dc:	2102      	movs	r1, #2
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fb76 	bl	80097d0 <RCCEx_PLL2_Config>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080ea:	e003      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10d      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080fc:	4b05      	ldr	r3, [pc, #20]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008100:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800810a:	4a02      	ldr	r2, [pc, #8]	@ (8008114 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800810c:	430b      	orrs	r3, r1
 800810e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008110:	e006      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008112:	bf00      	nop
 8008114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800811c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800812c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800812e:	2300      	movs	r3, #0
 8008130:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008132:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008136:	460b      	mov	r3, r1
 8008138:	4313      	orrs	r3, r2
 800813a:	d00c      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008140:	3328      	adds	r3, #40	@ 0x28
 8008142:	2102      	movs	r1, #2
 8008144:	4618      	mov	r0, r3
 8008146:	f001 fbf5 	bl	8009934 <RCCEx_PLL3_Config>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008162:	663b      	str	r3, [r7, #96]	@ 0x60
 8008164:	2300      	movs	r3, #0
 8008166:	667b      	str	r3, [r7, #100]	@ 0x64
 8008168:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800816c:	460b      	mov	r3, r1
 800816e:	4313      	orrs	r3, r2
 8008170:	d038      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800817a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800817e:	d018      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008180:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008184:	d811      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008186:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800818a:	d014      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800818c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008190:	d80b      	bhi.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008192:	2b00      	cmp	r3, #0
 8008194:	d011      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800819a:	d106      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800819c:	4bc3      	ldr	r3, [pc, #780]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800819e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a0:	4ac2      	ldr	r2, [pc, #776]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80081a8:	e008      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081b0:	e004      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80081b2:	bf00      	nop
 80081b4:	e002      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80081b6:	bf00      	nop
 80081b8:	e000      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80081ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10b      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081c4:	4bb9      	ldr	r3, [pc, #740]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081c8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081d4:	4ab5      	ldr	r2, [pc, #724]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80081d6:	430b      	orrs	r3, r1
 80081d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80081da:	e003      	b.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80081f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081f2:	2300      	movs	r3, #0
 80081f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80081fa:	460b      	mov	r3, r1
 80081fc:	4313      	orrs	r3, r2
 80081fe:	d009      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008200:	4baa      	ldr	r3, [pc, #680]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008204:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800820c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800820e:	4aa7      	ldr	r2, [pc, #668]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008210:	430b      	orrs	r3, r1
 8008212:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008220:	653b      	str	r3, [r7, #80]	@ 0x50
 8008222:	2300      	movs	r3, #0
 8008224:	657b      	str	r3, [r7, #84]	@ 0x54
 8008226:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800822a:	460b      	mov	r3, r1
 800822c:	4313      	orrs	r3, r2
 800822e:	d00a      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008230:	4b9e      	ldr	r3, [pc, #632]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008240:	4a9a      	ldr	r2, [pc, #616]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008242:	430b      	orrs	r3, r1
 8008244:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008254:	2300      	movs	r3, #0
 8008256:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008258:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800825c:	460b      	mov	r3, r1
 800825e:	4313      	orrs	r3, r2
 8008260:	d009      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008262:	4b92      	ldr	r3, [pc, #584]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008266:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800826a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800826e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008270:	4a8e      	ldr	r2, [pc, #568]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008272:	430b      	orrs	r3, r1
 8008274:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008282:	643b      	str	r3, [r7, #64]	@ 0x40
 8008284:	2300      	movs	r3, #0
 8008286:	647b      	str	r3, [r7, #68]	@ 0x44
 8008288:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800828c:	460b      	mov	r3, r1
 800828e:	4313      	orrs	r3, r2
 8008290:	d00e      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008292:	4b86      	ldr	r3, [pc, #536]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	4a85      	ldr	r2, [pc, #532]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008298:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800829c:	6113      	str	r3, [r2, #16]
 800829e:	4b83      	ldr	r3, [pc, #524]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082a0:	6919      	ldr	r1, [r3, #16]
 80082a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80082aa:	4a80      	ldr	r2, [pc, #512]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082ac:	430b      	orrs	r3, r1
 80082ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80082b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80082bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082be:	2300      	movs	r3, #0
 80082c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d009      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082cc:	4b77      	ldr	r3, [pc, #476]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80082d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082da:	4a74      	ldr	r2, [pc, #464]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082dc:	430b      	orrs	r3, r1
 80082de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80082ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80082ee:	2300      	movs	r3, #0
 80082f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80082f6:	460b      	mov	r3, r1
 80082f8:	4313      	orrs	r3, r2
 80082fa:	d00a      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082fc:	4b6b      	ldr	r3, [pc, #428]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80082fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008300:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800830c:	4a67      	ldr	r2, [pc, #412]	@ (80084ac <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800830e:	430b      	orrs	r3, r1
 8008310:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831a:	2100      	movs	r1, #0
 800831c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008324:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008328:	460b      	mov	r3, r1
 800832a:	4313      	orrs	r3, r2
 800832c:	d011      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800832e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008332:	3308      	adds	r3, #8
 8008334:	2100      	movs	r1, #0
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fa4a 	bl	80097d0 <RCCEx_PLL2_Config>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800834e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	2100      	movs	r1, #0
 800835c:	6239      	str	r1, [r7, #32]
 800835e:	f003 0302 	and.w	r3, r3, #2
 8008362:	627b      	str	r3, [r7, #36]	@ 0x24
 8008364:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008368:	460b      	mov	r3, r1
 800836a:	4313      	orrs	r3, r2
 800836c:	d011      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008372:	3308      	adds	r3, #8
 8008374:	2101      	movs	r1, #1
 8008376:	4618      	mov	r0, r3
 8008378:	f001 fa2a 	bl	80097d0 <RCCEx_PLL2_Config>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800838e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	2100      	movs	r1, #0
 800839c:	61b9      	str	r1, [r7, #24]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	61fb      	str	r3, [r7, #28]
 80083a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80083a8:	460b      	mov	r3, r1
 80083aa:	4313      	orrs	r3, r2
 80083ac:	d011      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b2:	3308      	adds	r3, #8
 80083b4:	2102      	movs	r1, #2
 80083b6:	4618      	mov	r0, r3
 80083b8:	f001 fa0a 	bl	80097d0 <RCCEx_PLL2_Config>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80083c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80083d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083da:	2100      	movs	r1, #0
 80083dc:	6139      	str	r1, [r7, #16]
 80083de:	f003 0308 	and.w	r3, r3, #8
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80083e8:	460b      	mov	r3, r1
 80083ea:	4313      	orrs	r3, r2
 80083ec:	d011      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f2:	3328      	adds	r3, #40	@ 0x28
 80083f4:	2100      	movs	r1, #0
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 fa9c 	bl	8009934 <RCCEx_PLL3_Config>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8008402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800840a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800841a:	2100      	movs	r1, #0
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	f003 0310 	and.w	r3, r3, #16
 8008422:	60fb      	str	r3, [r7, #12]
 8008424:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008428:	460b      	mov	r3, r1
 800842a:	4313      	orrs	r3, r2
 800842c:	d011      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800842e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008432:	3328      	adds	r3, #40	@ 0x28
 8008434:	2101      	movs	r1, #1
 8008436:	4618      	mov	r0, r3
 8008438:	f001 fa7c 	bl	8009934 <RCCEx_PLL3_Config>
 800843c:	4603      	mov	r3, r0
 800843e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800844e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	2100      	movs	r1, #0
 800845c:	6039      	str	r1, [r7, #0]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	607b      	str	r3, [r7, #4]
 8008464:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008468:	460b      	mov	r3, r1
 800846a:	4313      	orrs	r3, r2
 800846c:	d011      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008472:	3328      	adds	r3, #40	@ 0x28
 8008474:	2102      	movs	r1, #2
 8008476:	4618      	mov	r0, r3
 8008478:	f001 fa5c 	bl	8009934 <RCCEx_PLL3_Config>
 800847c:	4603      	mov	r3, r0
 800847e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008486:	2b00      	cmp	r3, #0
 8008488:	d003      	beq.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800848e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8008492:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	e000      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80084a6:	46bd      	mov	sp, r7
 80084a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084ac:	58024400 	.word	0x58024400

080084b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b090      	sub	sp, #64	@ 0x40
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80084ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084be:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80084c2:	430b      	orrs	r3, r1
 80084c4:	f040 8094 	bne.w	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80084c8:	4b9e      	ldr	r3, [pc, #632]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	f200 8087 	bhi.w	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80084da:	a201      	add	r2, pc, #4	@ (adr r2, 80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	080084f5 	.word	0x080084f5
 80084e4:	0800851d 	.word	0x0800851d
 80084e8:	08008545 	.word	0x08008545
 80084ec:	080085e1 	.word	0x080085e1
 80084f0:	0800856d 	.word	0x0800856d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084f4:	4b93      	ldr	r3, [pc, #588]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008500:	d108      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008506:	4618      	mov	r0, r3
 8008508:	f001 f810 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800850c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008510:	f000 bd45 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008518:	f000 bd41 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800851c:	4b89      	ldr	r3, [pc, #548]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008528:	d108      	bne.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800852a:	f107 0318 	add.w	r3, r7, #24
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fd54 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008538:	f000 bd31 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008540:	f000 bd2d 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008544:	4b7f      	ldr	r3, [pc, #508]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800854c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008550:	d108      	bne.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008552:	f107 030c 	add.w	r3, r7, #12
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fe94 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008560:	f000 bd1d 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008568:	f000 bd19 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800856c:	4b75      	ldr	r3, [pc, #468]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800856e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008570:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008574:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008576:	4b73      	ldr	r3, [pc, #460]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b04      	cmp	r3, #4
 8008580:	d10c      	bne.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008584:	2b00      	cmp	r3, #0
 8008586:	d109      	bne.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008588:	4b6e      	ldr	r3, [pc, #440]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	08db      	lsrs	r3, r3, #3
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	4a6d      	ldr	r2, [pc, #436]	@ (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008594:	fa22 f303 	lsr.w	r3, r2, r3
 8008598:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800859a:	e01f      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800859c:	4b69      	ldr	r3, [pc, #420]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085a8:	d106      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80085aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085b0:	d102      	bne.n	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085b2:	4b66      	ldr	r3, [pc, #408]	@ (800874c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80085b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085b6:	e011      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085b8:	4b62      	ldr	r3, [pc, #392]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085c4:	d106      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80085c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085cc:	d102      	bne.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085ce:	4b60      	ldr	r3, [pc, #384]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80085d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085d2:	e003      	b.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085d8:	f000 bce1 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085dc:	f000 bcdf 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085e0:	4b5c      	ldr	r3, [pc, #368]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80085e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e4:	f000 bcdb 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ec:	f000 bcd7 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80085f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80085f8:	430b      	orrs	r3, r1
 80085fa:	f040 80ad 	bne.w	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80085fe:	4b51      	ldr	r3, [pc, #324]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008602:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008606:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800860e:	d056      	beq.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008616:	f200 8090 	bhi.w	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	2bc0      	cmp	r3, #192	@ 0xc0
 800861e:	f000 8088 	beq.w	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	2bc0      	cmp	r3, #192	@ 0xc0
 8008626:	f200 8088 	bhi.w	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	2b80      	cmp	r3, #128	@ 0x80
 800862e:	d032      	beq.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	2b80      	cmp	r3, #128	@ 0x80
 8008634:	f200 8081 	bhi.w	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008640:	2b40      	cmp	r3, #64	@ 0x40
 8008642:	d014      	beq.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008644:	e079      	b.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008646:	4b3f      	ldr	r3, [pc, #252]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800864e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008652:	d108      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008658:	4618      	mov	r0, r3
 800865a:	f000 ff67 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800865e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008662:	f000 bc9c 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800866a:	f000 bc98 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800866e:	4b35      	ldr	r3, [pc, #212]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800867a:	d108      	bne.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800867c:	f107 0318 	add.w	r3, r7, #24
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fcab 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800868a:	f000 bc88 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800868e:	2300      	movs	r3, #0
 8008690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008692:	f000 bc84 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008696:	4b2b      	ldr	r3, [pc, #172]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800869e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086a2:	d108      	bne.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a4:	f107 030c 	add.w	r3, r7, #12
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fdeb 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086b2:	f000 bc74 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086ba:	f000 bc70 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086be:	4b21      	ldr	r3, [pc, #132]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086c8:	4b1e      	ldr	r3, [pc, #120]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d10c      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 80086d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d109      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086da:	4b1a      	ldr	r3, [pc, #104]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	08db      	lsrs	r3, r3, #3
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	4a18      	ldr	r2, [pc, #96]	@ (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80086e6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086ec:	e01f      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086ee:	4b15      	ldr	r3, [pc, #84]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fa:	d106      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80086fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008702:	d102      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008704:	4b11      	ldr	r3, [pc, #68]	@ (800874c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008708:	e011      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800870a:	4b0e      	ldr	r3, [pc, #56]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008712:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008716:	d106      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800871e:	d102      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008720:	4b0b      	ldr	r3, [pc, #44]	@ (8008750 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008724:	e003      	b.n	800872e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800872a:	f000 bc38 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800872e:	f000 bc36 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008732:	4b08      	ldr	r3, [pc, #32]	@ (8008754 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008736:	f000 bc32 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800873a:	2300      	movs	r3, #0
 800873c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800873e:	f000 bc2e 	b.w	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008742:	bf00      	nop
 8008744:	58024400 	.word	0x58024400
 8008748:	03d09000 	.word	0x03d09000
 800874c:	003d0900 	.word	0x003d0900
 8008750:	007a1200 	.word	0x007a1200
 8008754:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008758:	e9d7 2300 	ldrd	r2, r3, [r7]
 800875c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008760:	430b      	orrs	r3, r1
 8008762:	f040 809c 	bne.w	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008766:	4b9e      	ldr	r3, [pc, #632]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800876a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800876e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008772:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008776:	d054      	beq.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800877e:	f200 808b 	bhi.w	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008788:	f000 8083 	beq.w	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800878c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800878e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008792:	f200 8081 	bhi.w	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008798:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800879c:	d02f      	beq.n	80087fe <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800879e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087a4:	d878      	bhi.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d004      	beq.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087b2:	d012      	beq.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80087b4:	e070      	b.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80087b6:	4b8a      	ldr	r3, [pc, #552]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80087c2:	d107      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 feaf 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d2:	e3e4      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d8:	e3e1      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087da:	4b81      	ldr	r3, [pc, #516]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087e6:	d107      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e8:	f107 0318 	add.w	r3, r7, #24
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fbf5 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f6:	e3d2      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fc:	e3cf      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087fe:	4b78      	ldr	r3, [pc, #480]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800880a:	d107      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800880c:	f107 030c 	add.w	r3, r7, #12
 8008810:	4618      	mov	r0, r3
 8008812:	f000 fd37 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800881a:	e3c0      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008820:	e3bd      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008822:	4b6f      	ldr	r3, [pc, #444]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008826:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800882a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800882c:	4b6c      	ldr	r3, [pc, #432]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b04      	cmp	r3, #4
 8008836:	d10c      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800883a:	2b00      	cmp	r3, #0
 800883c:	d109      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800883e:	4b68      	ldr	r3, [pc, #416]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	08db      	lsrs	r3, r3, #3
 8008844:	f003 0303 	and.w	r3, r3, #3
 8008848:	4a66      	ldr	r2, [pc, #408]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800884a:	fa22 f303 	lsr.w	r3, r2, r3
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008850:	e01e      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008852:	4b63      	ldr	r3, [pc, #396]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800885a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800885e:	d106      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008866:	d102      	bne.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008868:	4b5f      	ldr	r3, [pc, #380]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800886a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800886c:	e010      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800886e:	4b5c      	ldr	r3, [pc, #368]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800887a:	d106      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800887c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800887e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008882:	d102      	bne.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008884:	4b59      	ldr	r3, [pc, #356]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008888:	e002      	b.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800888e:	e386      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008890:	e385      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008892:	4b57      	ldr	r3, [pc, #348]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008896:	e382      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008898:	2300      	movs	r3, #0
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889c:	e37f      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800889e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80088a6:	430b      	orrs	r3, r1
 80088a8:	f040 80a7 	bne.w	80089fa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80088ac:	4b4c      	ldr	r3, [pc, #304]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80088ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088b0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80088b4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80088b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088bc:	d055      	beq.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80088be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80088c4:	f200 8096 	bhi.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088ce:	f000 8084 	beq.w	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80088d8:	f200 808c 	bhi.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088e2:	d030      	beq.n	8008946 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 80088e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088ea:	f200 8083 	bhi.w	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d004      	beq.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80088f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088fa:	d012      	beq.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80088fc:	e07a      	b.n	80089f4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088fe:	4b38      	ldr	r3, [pc, #224]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008906:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800890a:	d107      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800890c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008910:	4618      	mov	r0, r3
 8008912:	f000 fe0b 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800891a:	e340      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008920:	e33d      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008922:	4b2f      	ldr	r3, [pc, #188]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800892a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800892e:	d107      	bne.n	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008930:	f107 0318 	add.w	r3, r7, #24
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fb51 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800893e:	e32e      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008940:	2300      	movs	r3, #0
 8008942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008944:	e32b      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008946:	4b26      	ldr	r3, [pc, #152]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800894e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008952:	d107      	bne.n	8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008954:	f107 030c 	add.w	r3, r7, #12
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fc93 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008962:	e31c      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008964:	2300      	movs	r3, #0
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008968:	e319      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800896a:	4b1d      	ldr	r3, [pc, #116]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800896c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800896e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008972:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008974:	4b1a      	ldr	r3, [pc, #104]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0304 	and.w	r3, r3, #4
 800897c:	2b04      	cmp	r3, #4
 800897e:	d10c      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008986:	4b16      	ldr	r3, [pc, #88]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	08db      	lsrs	r3, r3, #3
 800898c:	f003 0303 	and.w	r3, r3, #3
 8008990:	4a14      	ldr	r2, [pc, #80]	@ (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008992:	fa22 f303 	lsr.w	r3, r2, r3
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008998:	e01e      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800899a:	4b11      	ldr	r3, [pc, #68]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089a6:	d106      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80089a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ae:	d102      	bne.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80089b0:	4b0d      	ldr	r3, [pc, #52]	@ (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089b4:	e010      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089b6:	4b0a      	ldr	r3, [pc, #40]	@ (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089c2:	d106      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80089c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089ca:	d102      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089cc:	4b07      	ldr	r3, [pc, #28]	@ (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80089ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089d0:	e002      	b.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089d6:	e2e2      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089d8:	e2e1      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089da:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80089dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089de:	e2de      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089e0:	58024400 	.word	0x58024400
 80089e4:	03d09000 	.word	0x03d09000
 80089e8:	003d0900 	.word	0x003d0900
 80089ec:	007a1200 	.word	0x007a1200
 80089f0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f8:	e2d1      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80089fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089fe:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008a02:	430b      	orrs	r3, r1
 8008a04:	f040 809c 	bne.w	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008a08:	4b93      	ldr	r3, [pc, #588]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a0c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a18:	d054      	beq.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a20:	f200 808b 	bhi.w	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a2a:	f000 8083 	beq.w	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008a34:	f200 8081 	bhi.w	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a3e:	d02f      	beq.n	8008aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a46:	d878      	bhi.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d004      	beq.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a54:	d012      	beq.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008a56:	e070      	b.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a58:	4b7f      	ldr	r3, [pc, #508]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a64:	d107      	bne.n	8008a76 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 fd5e 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a74:	e293      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a7a:	e290      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a7c:	4b76      	ldr	r3, [pc, #472]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a88:	d107      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a8a:	f107 0318 	add.w	r3, r7, #24
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 faa4 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a98:	e281      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a9e:	e27e      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008aa0:	4b6d      	ldr	r3, [pc, #436]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aa8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aac:	d107      	bne.n	8008abe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aae:	f107 030c 	add.w	r3, r7, #12
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 fbe6 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008abc:	e26f      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac2:	e26c      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ac4:	4b64      	ldr	r3, [pc, #400]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ac8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008acc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ace:	4b62      	ldr	r3, [pc, #392]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0304 	and.w	r3, r3, #4
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d10c      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d109      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ae0:	4b5d      	ldr	r3, [pc, #372]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	08db      	lsrs	r3, r3, #3
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	4a5c      	ldr	r2, [pc, #368]	@ (8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008aec:	fa22 f303 	lsr.w	r3, r2, r3
 8008af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008af2:	e01e      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008af4:	4b58      	ldr	r3, [pc, #352]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b00:	d106      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b08:	d102      	bne.n	8008b10 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b0a:	4b55      	ldr	r3, [pc, #340]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b0e:	e010      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b10:	4b51      	ldr	r3, [pc, #324]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b1c:	d106      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b24:	d102      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b26:	4b4f      	ldr	r3, [pc, #316]	@ (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b2a:	e002      	b.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b30:	e235      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b32:	e234      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b34:	4b4c      	ldr	r3, [pc, #304]	@ (8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b38:	e231      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3e:	e22e      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b44:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	f040 808f 	bne.w	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008b4e:	4b42      	ldr	r3, [pc, #264]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b52:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008b56:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b5e:	d06b      	beq.n	8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008b66:	d874      	bhi.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b6e:	d056      	beq.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008b76:	d86c      	bhi.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b7e:	d03b      	beq.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b82:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008b86:	d864      	bhi.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b8e:	d021      	beq.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b96:	d85c      	bhi.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d004      	beq.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ba4:	d004      	beq.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008ba6:	e054      	b.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008ba8:	f7fe fa4c 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 8008bac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008bae:	e1f6      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bb0:	4b29      	ldr	r3, [pc, #164]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bbc:	d107      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bbe:	f107 0318 	add.w	r3, r7, #24
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fa0a 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bcc:	e1e7      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd2:	e1e4      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bd4:	4b20      	ldr	r3, [pc, #128]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008be0:	d107      	bne.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be2:	f107 030c 	add.w	r3, r7, #12
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fb4c 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf0:	e1d5      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf6:	e1d2      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bf8:	4b17      	ldr	r3, [pc, #92]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0304 	and.w	r3, r3, #4
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d109      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c04:	4b14      	ldr	r3, [pc, #80]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	08db      	lsrs	r3, r3, #3
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	4a13      	ldr	r2, [pc, #76]	@ (8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008c10:	fa22 f303 	lsr.w	r3, r2, r3
 8008c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c16:	e1c2      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1c:	e1bf      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c2a:	d102      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c30:	e1b5      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c32:	2300      	movs	r3, #0
 8008c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c36:	e1b2      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c38:	4b07      	ldr	r3, [pc, #28]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c44:	d102      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008c46:	4b07      	ldr	r3, [pc, #28]	@ (8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c4a:	e1a8      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c50:	e1a5      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c56:	e1a2      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c58:	58024400 	.word	0x58024400
 8008c5c:	03d09000 	.word	0x03d09000
 8008c60:	003d0900 	.word	0x003d0900
 8008c64:	007a1200 	.word	0x007a1200
 8008c68:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008c6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c70:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008c74:	430b      	orrs	r3, r1
 8008c76:	d173      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008c78:	4b9c      	ldr	r3, [pc, #624]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008c80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c88:	d02f      	beq.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c90:	d863      	bhi.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c9e:	d012      	beq.n	8008cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008ca0:	e05b      	b.n	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ca2:	4b92      	ldr	r3, [pc, #584]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008caa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cae:	d107      	bne.n	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cb0:	f107 0318 	add.w	r3, r7, #24
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 f991 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cbe:	e16e      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cc4:	e16b      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cc6:	4b89      	ldr	r3, [pc, #548]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cd2:	d107      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cd4:	f107 030c 	add.w	r3, r7, #12
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fad3 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce2:	e15c      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ce8:	e159      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cea:	4b80      	ldr	r3, [pc, #512]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cf2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cf4:	4b7d      	ldr	r3, [pc, #500]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d10c      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d06:	4b79      	ldr	r3, [pc, #484]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	08db      	lsrs	r3, r3, #3
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	4a77      	ldr	r2, [pc, #476]	@ (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008d12:	fa22 f303 	lsr.w	r3, r2, r3
 8008d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d18:	e01e      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d1a:	4b74      	ldr	r3, [pc, #464]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d26:	d106      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d2e:	d102      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d30:	4b70      	ldr	r3, [pc, #448]	@ (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d34:	e010      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d36:	4b6d      	ldr	r3, [pc, #436]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d42:	d106      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d4a:	d102      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d4c:	4b6a      	ldr	r3, [pc, #424]	@ (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d50:	e002      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d56:	e122      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008d58:	e121      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d5e:	e11e      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008d60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d64:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008d68:	430b      	orrs	r3, r1
 8008d6a:	d133      	bne.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008d6c:	4b5f      	ldr	r3, [pc, #380]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d74:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d004      	beq.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d82:	d012      	beq.n	8008daa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008d84:	e023      	b.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d86:	4b59      	ldr	r3, [pc, #356]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d92:	d107      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fbc7 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da2:	e0fc      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008da4:	2300      	movs	r3, #0
 8008da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da8:	e0f9      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008daa:	4b50      	ldr	r3, [pc, #320]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008db2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008db6:	d107      	bne.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db8:	f107 0318 	add.w	r3, r7, #24
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 f90d 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dc6:	e0ea      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dcc:	e0e7      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dd2:	e0e4      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dd8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	f040 808d 	bne.w	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008de2:	4b42      	ldr	r3, [pc, #264]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008de6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008dea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008df2:	d06b      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dfa:	d874      	bhi.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e02:	d056      	beq.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e0a:	d86c      	bhi.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e12:	d03b      	beq.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e1a:	d864      	bhi.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e22:	d021      	beq.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e2a:	d85c      	bhi.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8008e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d004      	beq.n	8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8008e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e38:	d004      	beq.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8008e3a:	e054      	b.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008e3c:	f000 f8b8 	bl	8008fb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e40:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008e42:	e0ac      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e44:	4b29      	ldr	r3, [pc, #164]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e50:	d107      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e52:	f107 0318 	add.w	r3, r7, #24
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 f8c0 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e60:	e09d      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e66:	e09a      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e68:	4b20      	ldr	r3, [pc, #128]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e74:	d107      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e76:	f107 030c 	add.w	r3, r7, #12
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 fa02 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e84:	e08b      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e8a:	e088      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e8c:	4b17      	ldr	r3, [pc, #92]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d109      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e98:	4b14      	ldr	r3, [pc, #80]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	08db      	lsrs	r3, r3, #3
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	4a13      	ldr	r2, [pc, #76]	@ (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eaa:	e078      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eb0:	e075      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ebe:	d102      	bne.n	8008ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec4:	e06b      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eca:	e068      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ecc:	4b07      	ldr	r3, [pc, #28]	@ (8008eec <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ed8:	d102      	bne.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8008eda:	4b07      	ldr	r3, [pc, #28]	@ (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ede:	e05e      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee4:	e05b      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eea:	e058      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008eec:	58024400 	.word	0x58024400
 8008ef0:	03d09000 	.word	0x03d09000
 8008ef4:	003d0900 	.word	0x003d0900
 8008ef8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f00:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008f04:	430b      	orrs	r3, r1
 8008f06:	d148      	bne.n	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008f08:	4b27      	ldr	r3, [pc, #156]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008f10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f18:	d02a      	beq.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f20:	d838      	bhi.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8008f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8008f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f2e:	d00d      	beq.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8008f30:	e030      	b.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008f32:	4b1d      	ldr	r3, [pc, #116]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f3e:	d102      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8008f40:	4b1a      	ldr	r3, [pc, #104]	@ (8008fac <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f44:	e02b      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f4a:	e028      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f4c:	4b16      	ldr	r3, [pc, #88]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f58:	d107      	bne.n	8008f6a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fae4 	bl	800952c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f68:	e019      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6e:	e016      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f70:	4b0d      	ldr	r3, [pc, #52]	@ (8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f7c:	d107      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f7e:	f107 0318 	add.w	r3, r7, #24
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 f82a 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f8c:	e007      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f92:	e004      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f98:	e001      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3740      	adds	r7, #64	@ 0x40
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	58024400 	.word	0x58024400
 8008fac:	007a1200 	.word	0x007a1200

08008fb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008fb4:	f7fe f816 	bl	8006fe4 <HAL_RCC_GetHCLKFreq>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	4b06      	ldr	r3, [pc, #24]	@ (8008fd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	091b      	lsrs	r3, r3, #4
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	4904      	ldr	r1, [pc, #16]	@ (8008fd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008fc6:	5ccb      	ldrb	r3, [r1, r3]
 8008fc8:	f003 031f 	and.w	r3, r3, #31
 8008fcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	58024400 	.word	0x58024400
 8008fd8:	0800e88c 	.word	0x0800e88c

08008fdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b089      	sub	sp, #36	@ 0x24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fe4:	4ba1      	ldr	r3, [pc, #644]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe8:	f003 0303 	and.w	r3, r3, #3
 8008fec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008fee:	4b9f      	ldr	r3, [pc, #636]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ff2:	0b1b      	lsrs	r3, r3, #12
 8008ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ff8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffe:	091b      	lsrs	r3, r3, #4
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009006:	4b99      	ldr	r3, [pc, #612]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800900a:	08db      	lsrs	r3, r3, #3
 800900c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009010:	693a      	ldr	r2, [r7, #16]
 8009012:	fb02 f303 	mul.w	r3, r2, r3
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800901e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	f000 8111 	beq.w	800924c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	2b02      	cmp	r3, #2
 800902e:	f000 8083 	beq.w	8009138 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	2b02      	cmp	r3, #2
 8009036:	f200 80a1 	bhi.w	800917c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d056      	beq.n	80090f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009046:	e099      	b.n	800917c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009048:	4b88      	ldr	r3, [pc, #544]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0320 	and.w	r3, r3, #32
 8009050:	2b00      	cmp	r3, #0
 8009052:	d02d      	beq.n	80090b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009054:	4b85      	ldr	r3, [pc, #532]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	08db      	lsrs	r3, r3, #3
 800905a:	f003 0303 	and.w	r3, r3, #3
 800905e:	4a84      	ldr	r2, [pc, #528]	@ (8009270 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009060:	fa22 f303 	lsr.w	r3, r2, r3
 8009064:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	ee07 3a90 	vmov	s15, r3
 800906c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	ee07 3a90 	vmov	s15, r3
 8009076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800907a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800907e:	4b7b      	ldr	r3, [pc, #492]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800908e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009092:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800909a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800909e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80090ae:	e087      	b.n	80091c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009278 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80090be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090c2:	4b6a      	ldr	r3, [pc, #424]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80090da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090f2:	e065      	b.n	80091c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800927c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009106:	4b59      	ldr	r3, [pc, #356]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800910a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009116:	ed97 6a03 	vldr	s12, [r7, #12]
 800911a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800911e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800912a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009136:	e043      	b.n	80091c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	ee07 3a90 	vmov	s15, r3
 800913e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009142:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009280 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800914a:	4b48      	ldr	r3, [pc, #288]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800914c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800915a:	ed97 6a03 	vldr	s12, [r7, #12]
 800915e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800916a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800916e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009176:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800917a:	e021      	b.n	80091c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009186:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800927c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800918a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918e:	4b37      	ldr	r3, [pc, #220]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919e:	ed97 6a03 	vldr	s12, [r7, #12]
 80091a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009274 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80091c0:	4b2a      	ldr	r3, [pc, #168]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c4:	0a5b      	lsrs	r3, r3, #9
 80091c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091da:	edd7 6a07 	vldr	s13, [r7, #28]
 80091de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091e6:	ee17 2a90 	vmov	r2, s15
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80091ee:	4b1f      	ldr	r3, [pc, #124]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f2:	0c1b      	lsrs	r3, r3, #16
 80091f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f8:	ee07 3a90 	vmov	s15, r3
 80091fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009200:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009208:	edd7 6a07 	vldr	s13, [r7, #28]
 800920c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009214:	ee17 2a90 	vmov	r2, s15
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800921c:	4b13      	ldr	r3, [pc, #76]	@ (800926c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009220:	0e1b      	lsrs	r3, r3, #24
 8009222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009226:	ee07 3a90 	vmov	s15, r3
 800922a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800922e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009236:	edd7 6a07 	vldr	s13, [r7, #28]
 800923a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800923e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009242:	ee17 2a90 	vmov	r2, s15
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800924a:	e008      	b.n	800925e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	609a      	str	r2, [r3, #8]
}
 800925e:	bf00      	nop
 8009260:	3724      	adds	r7, #36	@ 0x24
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	58024400 	.word	0x58024400
 8009270:	03d09000 	.word	0x03d09000
 8009274:	46000000 	.word	0x46000000
 8009278:	4c742400 	.word	0x4c742400
 800927c:	4a742400 	.word	0x4a742400
 8009280:	4af42400 	.word	0x4af42400

08009284 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009284:	b480      	push	{r7}
 8009286:	b089      	sub	sp, #36	@ 0x24
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800928c:	4ba1      	ldr	r3, [pc, #644]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800928e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009290:	f003 0303 	and.w	r3, r3, #3
 8009294:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009296:	4b9f      	ldr	r3, [pc, #636]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929a:	0d1b      	lsrs	r3, r3, #20
 800929c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80092a2:	4b9c      	ldr	r3, [pc, #624]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a6:	0a1b      	lsrs	r3, r3, #8
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80092ae:	4b99      	ldr	r3, [pc, #612]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b2:	08db      	lsrs	r3, r3, #3
 80092b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092b8:	693a      	ldr	r2, [r7, #16]
 80092ba:	fb02 f303 	mul.w	r3, r2, r3
 80092be:	ee07 3a90 	vmov	s15, r3
 80092c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 8111 	beq.w	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	f000 8083 	beq.w	80093e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	2b02      	cmp	r3, #2
 80092de:	f200 80a1 	bhi.w	8009424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d003      	beq.n	80092f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d056      	beq.n	800939c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80092ee:	e099      	b.n	8009424 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092f0:	4b88      	ldr	r3, [pc, #544]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d02d      	beq.n	8009358 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092fc:	4b85      	ldr	r3, [pc, #532]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	08db      	lsrs	r3, r3, #3
 8009302:	f003 0303 	and.w	r3, r3, #3
 8009306:	4a84      	ldr	r2, [pc, #528]	@ (8009518 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009308:	fa22 f303 	lsr.w	r3, r2, r3
 800930c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	ee07 3a90 	vmov	s15, r3
 8009314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009326:	4b7b      	ldr	r3, [pc, #492]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800932a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009336:	ed97 6a03 	vldr	s12, [r7, #12]
 800933a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800933e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800934a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800934e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009352:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009356:	e087      	b.n	8009468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	ee07 3a90 	vmov	s15, r3
 800935e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009362:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009520 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936a:	4b6a      	ldr	r3, [pc, #424]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800936c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009372:	ee07 3a90 	vmov	s15, r3
 8009376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937a:	ed97 6a03 	vldr	s12, [r7, #12]
 800937e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800938e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009396:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800939a:	e065      	b.n	8009468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80093aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093ae:	4b59      	ldr	r3, [pc, #356]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b6:	ee07 3a90 	vmov	s15, r3
 80093ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093be:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80093c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093de:	e043      	b.n	8009468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	ee07 3a90 	vmov	s15, r3
 80093e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ea:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009528 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80093ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f2:	4b48      	ldr	r3, [pc, #288]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009402:	ed97 6a03 	vldr	s12, [r7, #12]
 8009406:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800940a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800940e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800941e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009422:	e021      	b.n	8009468 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800942e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009524 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009436:	4b37      	ldr	r3, [pc, #220]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009446:	ed97 6a03 	vldr	s12, [r7, #12]
 800944a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800951c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800944e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800945e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009462:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009466:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009468:	4b2a      	ldr	r3, [pc, #168]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800946a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946c:	0a5b      	lsrs	r3, r3, #9
 800946e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009472:	ee07 3a90 	vmov	s15, r3
 8009476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800947e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009482:	edd7 6a07 	vldr	s13, [r7, #28]
 8009486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800948e:	ee17 2a90 	vmov	r2, s15
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009496:	4b1f      	ldr	r3, [pc, #124]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949a:	0c1b      	lsrs	r3, r3, #16
 800949c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a0:	ee07 3a90 	vmov	s15, r3
 80094a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094bc:	ee17 2a90 	vmov	r2, s15
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80094c4:	4b13      	ldr	r3, [pc, #76]	@ (8009514 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094c8:	0e1b      	lsrs	r3, r3, #24
 80094ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ce:	ee07 3a90 	vmov	s15, r3
 80094d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094de:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ea:	ee17 2a90 	vmov	r2, s15
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80094f2:	e008      	b.n	8009506 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	609a      	str	r2, [r3, #8]
}
 8009506:	bf00      	nop
 8009508:	3724      	adds	r7, #36	@ 0x24
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	58024400 	.word	0x58024400
 8009518:	03d09000 	.word	0x03d09000
 800951c:	46000000 	.word	0x46000000
 8009520:	4c742400 	.word	0x4c742400
 8009524:	4a742400 	.word	0x4a742400
 8009528:	4af42400 	.word	0x4af42400

0800952c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800952c:	b480      	push	{r7}
 800952e:	b089      	sub	sp, #36	@ 0x24
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009534:	4ba0      	ldr	r3, [pc, #640]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800953e:	4b9e      	ldr	r3, [pc, #632]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009542:	091b      	lsrs	r3, r3, #4
 8009544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009548:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800954a:	4b9b      	ldr	r3, [pc, #620]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800954c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009554:	4b98      	ldr	r3, [pc, #608]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009558:	08db      	lsrs	r3, r3, #3
 800955a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800955e:	693a      	ldr	r2, [r7, #16]
 8009560:	fb02 f303 	mul.w	r3, r2, r3
 8009564:	ee07 3a90 	vmov	s15, r3
 8009568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800956c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2b00      	cmp	r3, #0
 8009574:	f000 8111 	beq.w	800979a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	2b02      	cmp	r3, #2
 800957c:	f000 8083 	beq.w	8009686 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	2b02      	cmp	r3, #2
 8009584:	f200 80a1 	bhi.w	80096ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d003      	beq.n	8009596 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d056      	beq.n	8009642 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009594:	e099      	b.n	80096ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009596:	4b88      	ldr	r3, [pc, #544]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d02d      	beq.n	80095fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095a2:	4b85      	ldr	r3, [pc, #532]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	08db      	lsrs	r3, r3, #3
 80095a8:	f003 0303 	and.w	r3, r3, #3
 80095ac:	4a83      	ldr	r2, [pc, #524]	@ (80097bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80095ae:	fa22 f303 	lsr.w	r3, r2, r3
 80095b2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	ee07 3a90 	vmov	s15, r3
 80095c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095cc:	4b7a      	ldr	r3, [pc, #488]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d4:	ee07 3a90 	vmov	s15, r3
 80095d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80095e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095fc:	e087      	b.n	800970e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	ee07 3a90 	vmov	s15, r3
 8009604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009608:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80097c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800960c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009610:	4b69      	ldr	r3, [pc, #420]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009618:	ee07 3a90 	vmov	s15, r3
 800961c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009620:	ed97 6a03 	vldr	s12, [r7, #12]
 8009624:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009630:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009640:	e065      	b.n	800970e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	ee07 3a90 	vmov	s15, r3
 8009648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80097c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009654:	4b58      	ldr	r3, [pc, #352]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965c:	ee07 3a90 	vmov	s15, r3
 8009660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009664:	ed97 6a03 	vldr	s12, [r7, #12]
 8009668:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800966c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009674:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009680:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009684:	e043      	b.n	800970e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	ee07 3a90 	vmov	s15, r3
 800968c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009690:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80097cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009698:	4b47      	ldr	r3, [pc, #284]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800969a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a0:	ee07 3a90 	vmov	s15, r3
 80096a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ac:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096c8:	e021      	b.n	800970e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	ee07 3a90 	vmov	s15, r3
 80096d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096d4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80097c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096dc:	4b36      	ldr	r3, [pc, #216]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80097c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009708:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800970c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800970e:	4b2a      	ldr	r3, [pc, #168]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009712:	0a5b      	lsrs	r3, r3, #9
 8009714:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009718:	ee07 3a90 	vmov	s15, r3
 800971c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009720:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009724:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009728:	edd7 6a07 	vldr	s13, [r7, #28]
 800972c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009734:	ee17 2a90 	vmov	r2, s15
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800973c:	4b1e      	ldr	r3, [pc, #120]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009740:	0c1b      	lsrs	r3, r3, #16
 8009742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009752:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009756:	edd7 6a07 	vldr	s13, [r7, #28]
 800975a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009762:	ee17 2a90 	vmov	r2, s15
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800976a:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800976c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976e:	0e1b      	lsrs	r3, r3, #24
 8009770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009774:	ee07 3a90 	vmov	s15, r3
 8009778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009780:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009784:	edd7 6a07 	vldr	s13, [r7, #28]
 8009788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800978c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009790:	ee17 2a90 	vmov	r2, s15
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009798:	e008      	b.n	80097ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	609a      	str	r2, [r3, #8]
}
 80097ac:	bf00      	nop
 80097ae:	3724      	adds	r7, #36	@ 0x24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr
 80097b8:	58024400 	.word	0x58024400
 80097bc:	03d09000 	.word	0x03d09000
 80097c0:	46000000 	.word	0x46000000
 80097c4:	4c742400 	.word	0x4c742400
 80097c8:	4a742400 	.word	0x4a742400
 80097cc:	4af42400 	.word	0x4af42400

080097d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097de:	4b53      	ldr	r3, [pc, #332]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80097e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e2:	f003 0303 	and.w	r3, r3, #3
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d101      	bne.n	80097ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e099      	b.n	8009922 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097ee:	4b4f      	ldr	r3, [pc, #316]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a4e      	ldr	r2, [pc, #312]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80097f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80097f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097fa:	f7f8 fac3 	bl	8001d84 <HAL_GetTick>
 80097fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009800:	e008      	b.n	8009814 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009802:	f7f8 fabf 	bl	8001d84 <HAL_GetTick>
 8009806:	4602      	mov	r2, r0
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	1ad3      	subs	r3, r2, r3
 800980c:	2b02      	cmp	r3, #2
 800980e:	d901      	bls.n	8009814 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009810:	2303      	movs	r3, #3
 8009812:	e086      	b.n	8009922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009814:	4b45      	ldr	r3, [pc, #276]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1f0      	bne.n	8009802 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009820:	4b42      	ldr	r3, [pc, #264]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009824:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	031b      	lsls	r3, r3, #12
 800982e:	493f      	ldr	r1, [pc, #252]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009830:	4313      	orrs	r3, r2
 8009832:	628b      	str	r3, [r1, #40]	@ 0x28
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	3b01      	subs	r3, #1
 800983a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	3b01      	subs	r3, #1
 8009844:	025b      	lsls	r3, r3, #9
 8009846:	b29b      	uxth	r3, r3
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68db      	ldr	r3, [r3, #12]
 800984e:	3b01      	subs	r3, #1
 8009850:	041b      	lsls	r3, r3, #16
 8009852:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009856:	431a      	orrs	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	691b      	ldr	r3, [r3, #16]
 800985c:	3b01      	subs	r3, #1
 800985e:	061b      	lsls	r3, r3, #24
 8009860:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009864:	4931      	ldr	r1, [pc, #196]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009866:	4313      	orrs	r3, r2
 8009868:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800986a:	4b30      	ldr	r3, [pc, #192]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 800986c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	492d      	ldr	r1, [pc, #180]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009878:	4313      	orrs	r3, r2
 800987a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800987c:	4b2b      	ldr	r3, [pc, #172]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 800987e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009880:	f023 0220 	bic.w	r2, r3, #32
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	4928      	ldr	r1, [pc, #160]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 800988a:	4313      	orrs	r3, r2
 800988c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800988e:	4b27      	ldr	r3, [pc, #156]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009892:	4a26      	ldr	r2, [pc, #152]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009894:	f023 0310 	bic.w	r3, r3, #16
 8009898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800989a:	4b24      	ldr	r3, [pc, #144]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 800989c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800989e:	4b24      	ldr	r3, [pc, #144]	@ (8009930 <RCCEx_PLL2_Config+0x160>)
 80098a0:	4013      	ands	r3, r2
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	69d2      	ldr	r2, [r2, #28]
 80098a6:	00d2      	lsls	r2, r2, #3
 80098a8:	4920      	ldr	r1, [pc, #128]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098aa:	4313      	orrs	r3, r2
 80098ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098ae:	4b1f      	ldr	r3, [pc, #124]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b2:	4a1e      	ldr	r2, [pc, #120]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098b4:	f043 0310 	orr.w	r3, r3, #16
 80098b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098c0:	4b1a      	ldr	r3, [pc, #104]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c4:	4a19      	ldr	r2, [pc, #100]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098cc:	e00f      	b.n	80098ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d106      	bne.n	80098e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098d4:	4b15      	ldr	r3, [pc, #84]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d8:	4a14      	ldr	r2, [pc, #80]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098e0:	e005      	b.n	80098ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098e2:	4b12      	ldr	r3, [pc, #72]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e6:	4a11      	ldr	r2, [pc, #68]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098ee:	4b0f      	ldr	r3, [pc, #60]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a0e      	ldr	r2, [pc, #56]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 80098f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80098f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098fa:	f7f8 fa43 	bl	8001d84 <HAL_GetTick>
 80098fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009900:	e008      	b.n	8009914 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009902:	f7f8 fa3f 	bl	8001d84 <HAL_GetTick>
 8009906:	4602      	mov	r2, r0
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	1ad3      	subs	r3, r2, r3
 800990c:	2b02      	cmp	r3, #2
 800990e:	d901      	bls.n	8009914 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009910:	2303      	movs	r3, #3
 8009912:	e006      	b.n	8009922 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009914:	4b05      	ldr	r3, [pc, #20]	@ (800992c <RCCEx_PLL2_Config+0x15c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d0f0      	beq.n	8009902 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009920:	7bfb      	ldrb	r3, [r7, #15]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	58024400 	.word	0x58024400
 8009930:	ffff0007 	.word	0xffff0007

08009934 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009942:	4b53      	ldr	r3, [pc, #332]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	2b03      	cmp	r3, #3
 800994c:	d101      	bne.n	8009952 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e099      	b.n	8009a86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009952:	4b4f      	ldr	r3, [pc, #316]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a4e      	ldr	r2, [pc, #312]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009958:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800995c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800995e:	f7f8 fa11 	bl	8001d84 <HAL_GetTick>
 8009962:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009964:	e008      	b.n	8009978 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009966:	f7f8 fa0d 	bl	8001d84 <HAL_GetTick>
 800996a:	4602      	mov	r2, r0
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	2b02      	cmp	r3, #2
 8009972:	d901      	bls.n	8009978 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009974:	2303      	movs	r3, #3
 8009976:	e086      	b.n	8009a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009978:	4b45      	ldr	r3, [pc, #276]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1f0      	bne.n	8009966 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009984:	4b42      	ldr	r3, [pc, #264]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009988:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	051b      	lsls	r3, r3, #20
 8009992:	493f      	ldr	r1, [pc, #252]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009994:	4313      	orrs	r3, r2
 8009996:	628b      	str	r3, [r1, #40]	@ 0x28
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	3b01      	subs	r3, #1
 800999e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	025b      	lsls	r3, r3, #9
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	3b01      	subs	r3, #1
 80099b4:	041b      	lsls	r3, r3, #16
 80099b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099ba:	431a      	orrs	r2, r3
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	3b01      	subs	r3, #1
 80099c2:	061b      	lsls	r3, r3, #24
 80099c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099c8:	4931      	ldr	r1, [pc, #196]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099ce:	4b30      	ldr	r3, [pc, #192]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	492d      	ldr	r1, [pc, #180]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099e0:	4b2b      	ldr	r3, [pc, #172]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	4928      	ldr	r1, [pc, #160]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099f2:	4b27      	ldr	r3, [pc, #156]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f6:	4a26      	ldr	r2, [pc, #152]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 80099f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80099fe:	4b24      	ldr	r3, [pc, #144]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a02:	4b24      	ldr	r3, [pc, #144]	@ (8009a94 <RCCEx_PLL3_Config+0x160>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	69d2      	ldr	r2, [r2, #28]
 8009a0a:	00d2      	lsls	r2, r2, #3
 8009a0c:	4920      	ldr	r1, [pc, #128]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a12:	4b1f      	ldr	r3, [pc, #124]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a16:	4a1e      	ldr	r2, [pc, #120]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d106      	bne.n	8009a32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a24:	4b1a      	ldr	r3, [pc, #104]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a28:	4a19      	ldr	r2, [pc, #100]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a30:	e00f      	b.n	8009a52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d106      	bne.n	8009a46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a38:	4b15      	ldr	r3, [pc, #84]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3c:	4a14      	ldr	r2, [pc, #80]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a44:	e005      	b.n	8009a52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a46:	4b12      	ldr	r3, [pc, #72]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4a:	4a11      	ldr	r2, [pc, #68]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a52:	4b0f      	ldr	r3, [pc, #60]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a0e      	ldr	r2, [pc, #56]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a5e:	f7f8 f991 	bl	8001d84 <HAL_GetTick>
 8009a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a64:	e008      	b.n	8009a78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a66:	f7f8 f98d 	bl	8001d84 <HAL_GetTick>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	1ad3      	subs	r3, r2, r3
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d901      	bls.n	8009a78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e006      	b.n	8009a86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a78:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <RCCEx_PLL3_Config+0x15c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0f0      	beq.n	8009a66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	58024400 	.word	0x58024400
 8009a94:	ffff0007 	.word	0xffff0007

08009a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e049      	b.n	8009b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d106      	bne.n	8009ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7f7 fe1e 	bl	8001700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2202      	movs	r2, #2
 8009ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	3304      	adds	r3, #4
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4610      	mov	r0, r2
 8009ad8:	f000 fbb0 	bl	800a23c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}

08009b46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b082      	sub	sp, #8
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e049      	b.n	8009bec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d106      	bne.n	8009b72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f841 	bl	8009bf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2202      	movs	r2, #2
 8009b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4619      	mov	r1, r3
 8009b84:	4610      	mov	r0, r2
 8009b86:	f000 fb59 	bl	800a23c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2201      	movs	r2, #1
 8009b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d109      	bne.n	8009c2c <HAL_TIM_PWM_Start+0x24>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009c1e:	b2db      	uxtb	r3, r3
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	bf14      	ite	ne
 8009c24:	2301      	movne	r3, #1
 8009c26:	2300      	moveq	r3, #0
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	e03c      	b.n	8009ca6 <HAL_TIM_PWM_Start+0x9e>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b04      	cmp	r3, #4
 8009c30:	d109      	bne.n	8009c46 <HAL_TIM_PWM_Start+0x3e>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	bf14      	ite	ne
 8009c3e:	2301      	movne	r3, #1
 8009c40:	2300      	moveq	r3, #0
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	e02f      	b.n	8009ca6 <HAL_TIM_PWM_Start+0x9e>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d109      	bne.n	8009c60 <HAL_TIM_PWM_Start+0x58>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	bf14      	ite	ne
 8009c58:	2301      	movne	r3, #1
 8009c5a:	2300      	moveq	r3, #0
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	e022      	b.n	8009ca6 <HAL_TIM_PWM_Start+0x9e>
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	2b0c      	cmp	r3, #12
 8009c64:	d109      	bne.n	8009c7a <HAL_TIM_PWM_Start+0x72>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	bf14      	ite	ne
 8009c72:	2301      	movne	r3, #1
 8009c74:	2300      	moveq	r3, #0
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	e015      	b.n	8009ca6 <HAL_TIM_PWM_Start+0x9e>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b10      	cmp	r3, #16
 8009c7e:	d109      	bne.n	8009c94 <HAL_TIM_PWM_Start+0x8c>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	bf14      	ite	ne
 8009c8c:	2301      	movne	r3, #1
 8009c8e:	2300      	moveq	r3, #0
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	e008      	b.n	8009ca6 <HAL_TIM_PWM_Start+0x9e>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	bf14      	ite	ne
 8009ca0:	2301      	movne	r3, #1
 8009ca2:	2300      	moveq	r3, #0
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e0a1      	b.n	8009df2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d104      	bne.n	8009cbe <HAL_TIM_PWM_Start+0xb6>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cbc:	e023      	b.n	8009d06 <HAL_TIM_PWM_Start+0xfe>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d104      	bne.n	8009cce <HAL_TIM_PWM_Start+0xc6>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2202      	movs	r2, #2
 8009cc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ccc:	e01b      	b.n	8009d06 <HAL_TIM_PWM_Start+0xfe>
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b08      	cmp	r3, #8
 8009cd2:	d104      	bne.n	8009cde <HAL_TIM_PWM_Start+0xd6>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2202      	movs	r2, #2
 8009cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cdc:	e013      	b.n	8009d06 <HAL_TIM_PWM_Start+0xfe>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b0c      	cmp	r3, #12
 8009ce2:	d104      	bne.n	8009cee <HAL_TIM_PWM_Start+0xe6>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2202      	movs	r2, #2
 8009ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009cec:	e00b      	b.n	8009d06 <HAL_TIM_PWM_Start+0xfe>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b10      	cmp	r3, #16
 8009cf2:	d104      	bne.n	8009cfe <HAL_TIM_PWM_Start+0xf6>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009cfc:	e003      	b.n	8009d06 <HAL_TIM_PWM_Start+0xfe>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2202      	movs	r2, #2
 8009d02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	6839      	ldr	r1, [r7, #0]
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f000 feae 	bl	800aa70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a38      	ldr	r2, [pc, #224]	@ (8009dfc <HAL_TIM_PWM_Start+0x1f4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d013      	beq.n	8009d46 <HAL_TIM_PWM_Start+0x13e>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a37      	ldr	r2, [pc, #220]	@ (8009e00 <HAL_TIM_PWM_Start+0x1f8>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d00e      	beq.n	8009d46 <HAL_TIM_PWM_Start+0x13e>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a35      	ldr	r2, [pc, #212]	@ (8009e04 <HAL_TIM_PWM_Start+0x1fc>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d009      	beq.n	8009d46 <HAL_TIM_PWM_Start+0x13e>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a34      	ldr	r2, [pc, #208]	@ (8009e08 <HAL_TIM_PWM_Start+0x200>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d004      	beq.n	8009d46 <HAL_TIM_PWM_Start+0x13e>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a32      	ldr	r2, [pc, #200]	@ (8009e0c <HAL_TIM_PWM_Start+0x204>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d101      	bne.n	8009d4a <HAL_TIM_PWM_Start+0x142>
 8009d46:	2301      	movs	r3, #1
 8009d48:	e000      	b.n	8009d4c <HAL_TIM_PWM_Start+0x144>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d007      	beq.n	8009d60 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a25      	ldr	r2, [pc, #148]	@ (8009dfc <HAL_TIM_PWM_Start+0x1f4>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d022      	beq.n	8009db0 <HAL_TIM_PWM_Start+0x1a8>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d72:	d01d      	beq.n	8009db0 <HAL_TIM_PWM_Start+0x1a8>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a25      	ldr	r2, [pc, #148]	@ (8009e10 <HAL_TIM_PWM_Start+0x208>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d018      	beq.n	8009db0 <HAL_TIM_PWM_Start+0x1a8>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a24      	ldr	r2, [pc, #144]	@ (8009e14 <HAL_TIM_PWM_Start+0x20c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d013      	beq.n	8009db0 <HAL_TIM_PWM_Start+0x1a8>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a22      	ldr	r2, [pc, #136]	@ (8009e18 <HAL_TIM_PWM_Start+0x210>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d00e      	beq.n	8009db0 <HAL_TIM_PWM_Start+0x1a8>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a1a      	ldr	r2, [pc, #104]	@ (8009e00 <HAL_TIM_PWM_Start+0x1f8>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d009      	beq.n	8009db0 <HAL_TIM_PWM_Start+0x1a8>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a1e      	ldr	r2, [pc, #120]	@ (8009e1c <HAL_TIM_PWM_Start+0x214>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d004      	beq.n	8009db0 <HAL_TIM_PWM_Start+0x1a8>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a16      	ldr	r2, [pc, #88]	@ (8009e04 <HAL_TIM_PWM_Start+0x1fc>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d115      	bne.n	8009ddc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689a      	ldr	r2, [r3, #8]
 8009db6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e20 <HAL_TIM_PWM_Start+0x218>)
 8009db8:	4013      	ands	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b06      	cmp	r3, #6
 8009dc0:	d015      	beq.n	8009dee <HAL_TIM_PWM_Start+0x1e6>
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dc8:	d011      	beq.n	8009dee <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f042 0201 	orr.w	r2, r2, #1
 8009dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dda:	e008      	b.n	8009dee <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f042 0201 	orr.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]
 8009dec:	e000      	b.n	8009df0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009df0:	2300      	movs	r3, #0
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3710      	adds	r7, #16
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	40010000 	.word	0x40010000
 8009e00:	40010400 	.word	0x40010400
 8009e04:	40014000 	.word	0x40014000
 8009e08:	40014400 	.word	0x40014400
 8009e0c:	40014800 	.word	0x40014800
 8009e10:	40000400 	.word	0x40000400
 8009e14:	40000800 	.word	0x40000800
 8009e18:	40000c00 	.word	0x40000c00
 8009e1c:	40001800 	.word	0x40001800
 8009e20:	00010007 	.word	0x00010007

08009e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e0ff      	b.n	800a042 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2b14      	cmp	r3, #20
 8009e4e:	f200 80f0 	bhi.w	800a032 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009e52:	a201      	add	r2, pc, #4	@ (adr r2, 8009e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e58:	08009ead 	.word	0x08009ead
 8009e5c:	0800a033 	.word	0x0800a033
 8009e60:	0800a033 	.word	0x0800a033
 8009e64:	0800a033 	.word	0x0800a033
 8009e68:	08009eed 	.word	0x08009eed
 8009e6c:	0800a033 	.word	0x0800a033
 8009e70:	0800a033 	.word	0x0800a033
 8009e74:	0800a033 	.word	0x0800a033
 8009e78:	08009f2f 	.word	0x08009f2f
 8009e7c:	0800a033 	.word	0x0800a033
 8009e80:	0800a033 	.word	0x0800a033
 8009e84:	0800a033 	.word	0x0800a033
 8009e88:	08009f6f 	.word	0x08009f6f
 8009e8c:	0800a033 	.word	0x0800a033
 8009e90:	0800a033 	.word	0x0800a033
 8009e94:	0800a033 	.word	0x0800a033
 8009e98:	08009fb1 	.word	0x08009fb1
 8009e9c:	0800a033 	.word	0x0800a033
 8009ea0:	0800a033 	.word	0x0800a033
 8009ea4:	0800a033 	.word	0x0800a033
 8009ea8:	08009ff1 	.word	0x08009ff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f000 fa68 	bl	800a388 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699a      	ldr	r2, [r3, #24]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0208 	orr.w	r2, r2, #8
 8009ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	699a      	ldr	r2, [r3, #24]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f022 0204 	bic.w	r2, r2, #4
 8009ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6999      	ldr	r1, [r3, #24]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	691a      	ldr	r2, [r3, #16]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	619a      	str	r2, [r3, #24]
      break;
 8009eea:	e0a5      	b.n	800a038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68b9      	ldr	r1, [r7, #8]
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f000 fad8 	bl	800a4a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	699a      	ldr	r2, [r3, #24]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	699a      	ldr	r2, [r3, #24]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6999      	ldr	r1, [r3, #24]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	021a      	lsls	r2, r3, #8
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	619a      	str	r2, [r3, #24]
      break;
 8009f2c:	e084      	b.n	800a038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 fb41 	bl	800a5bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	69da      	ldr	r2, [r3, #28]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f042 0208 	orr.w	r2, r2, #8
 8009f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69da      	ldr	r2, [r3, #28]
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0204 	bic.w	r2, r2, #4
 8009f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	69d9      	ldr	r1, [r3, #28]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	691a      	ldr	r2, [r3, #16]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	61da      	str	r2, [r3, #28]
      break;
 8009f6c:	e064      	b.n	800a038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f000 fba9 	bl	800a6cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69da      	ldr	r2, [r3, #28]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	69da      	ldr	r2, [r3, #28]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	69d9      	ldr	r1, [r3, #28]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	691b      	ldr	r3, [r3, #16]
 8009fa4:	021a      	lsls	r2, r3, #8
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	61da      	str	r2, [r3, #28]
      break;
 8009fae:	e043      	b.n	800a038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68b9      	ldr	r1, [r7, #8]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 fbf2 	bl	800a7a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f042 0208 	orr.w	r2, r2, #8
 8009fca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f022 0204 	bic.w	r2, r2, #4
 8009fda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	691a      	ldr	r2, [r3, #16]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	430a      	orrs	r2, r1
 8009fec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009fee:	e023      	b.n	800a038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68b9      	ldr	r1, [r7, #8]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f000 fc36 	bl	800a868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a00a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a01a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	021a      	lsls	r2, r3, #8
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	430a      	orrs	r2, r1
 800a02e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a030:	e002      	b.n	800a038 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	75fb      	strb	r3, [r7, #23]
      break;
 800a036:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop

0800a04c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a060:	2b01      	cmp	r3, #1
 800a062:	d101      	bne.n	800a068 <HAL_TIM_ConfigClockSource+0x1c>
 800a064:	2302      	movs	r3, #2
 800a066:	e0dc      	b.n	800a222 <HAL_TIM_ConfigClockSource+0x1d6>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a080:	68ba      	ldr	r2, [r7, #8]
 800a082:	4b6a      	ldr	r3, [pc, #424]	@ (800a22c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a084:	4013      	ands	r3, r2
 800a086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a08e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a64      	ldr	r2, [pc, #400]	@ (800a230 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	f000 80a9 	beq.w	800a1f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0a4:	4a62      	ldr	r2, [pc, #392]	@ (800a230 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	f200 80ae 	bhi.w	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0ac:	4a61      	ldr	r2, [pc, #388]	@ (800a234 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	f000 80a1 	beq.w	800a1f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0b4:	4a5f      	ldr	r2, [pc, #380]	@ (800a234 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	f200 80a6 	bhi.w	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0bc:	4a5e      	ldr	r2, [pc, #376]	@ (800a238 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	f000 8099 	beq.w	800a1f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0c4:	4a5c      	ldr	r2, [pc, #368]	@ (800a238 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	f200 809e 	bhi.w	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a0d0:	f000 8091 	beq.w	800a1f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a0d8:	f200 8096 	bhi.w	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0e0:	f000 8089 	beq.w	800a1f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a0e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0e8:	f200 808e 	bhi.w	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0f0:	d03e      	beq.n	800a170 <HAL_TIM_ConfigClockSource+0x124>
 800a0f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0f6:	f200 8087 	bhi.w	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0fe:	f000 8086 	beq.w	800a20e <HAL_TIM_ConfigClockSource+0x1c2>
 800a102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a106:	d87f      	bhi.n	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a108:	2b70      	cmp	r3, #112	@ 0x70
 800a10a:	d01a      	beq.n	800a142 <HAL_TIM_ConfigClockSource+0xf6>
 800a10c:	2b70      	cmp	r3, #112	@ 0x70
 800a10e:	d87b      	bhi.n	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a110:	2b60      	cmp	r3, #96	@ 0x60
 800a112:	d050      	beq.n	800a1b6 <HAL_TIM_ConfigClockSource+0x16a>
 800a114:	2b60      	cmp	r3, #96	@ 0x60
 800a116:	d877      	bhi.n	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a118:	2b50      	cmp	r3, #80	@ 0x50
 800a11a:	d03c      	beq.n	800a196 <HAL_TIM_ConfigClockSource+0x14a>
 800a11c:	2b50      	cmp	r3, #80	@ 0x50
 800a11e:	d873      	bhi.n	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a120:	2b40      	cmp	r3, #64	@ 0x40
 800a122:	d058      	beq.n	800a1d6 <HAL_TIM_ConfigClockSource+0x18a>
 800a124:	2b40      	cmp	r3, #64	@ 0x40
 800a126:	d86f      	bhi.n	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a128:	2b30      	cmp	r3, #48	@ 0x30
 800a12a:	d064      	beq.n	800a1f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a12c:	2b30      	cmp	r3, #48	@ 0x30
 800a12e:	d86b      	bhi.n	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a130:	2b20      	cmp	r3, #32
 800a132:	d060      	beq.n	800a1f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a134:	2b20      	cmp	r3, #32
 800a136:	d867      	bhi.n	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d05c      	beq.n	800a1f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a13c:	2b10      	cmp	r3, #16
 800a13e:	d05a      	beq.n	800a1f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a140:	e062      	b.n	800a208 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a152:	f000 fc6d 	bl	800aa30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	609a      	str	r2, [r3, #8]
      break;
 800a16e:	e04f      	b.n	800a210 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a180:	f000 fc56 	bl	800aa30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a192:	609a      	str	r2, [r3, #8]
      break;
 800a194:	e03c      	b.n	800a210 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f000 fbc6 	bl	800a934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2150      	movs	r1, #80	@ 0x50
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fc20 	bl	800a9f4 <TIM_ITRx_SetConfig>
      break;
 800a1b4:	e02c      	b.n	800a210 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f000 fbe5 	bl	800a992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2160      	movs	r1, #96	@ 0x60
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fc10 	bl	800a9f4 <TIM_ITRx_SetConfig>
      break;
 800a1d4:	e01c      	b.n	800a210 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	f000 fba6 	bl	800a934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	2140      	movs	r1, #64	@ 0x40
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 fc00 	bl	800a9f4 <TIM_ITRx_SetConfig>
      break;
 800a1f4:	e00c      	b.n	800a210 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4619      	mov	r1, r3
 800a200:	4610      	mov	r0, r2
 800a202:	f000 fbf7 	bl	800a9f4 <TIM_ITRx_SetConfig>
      break;
 800a206:	e003      	b.n	800a210 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]
      break;
 800a20c:	e000      	b.n	800a210 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a20e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2201      	movs	r2, #1
 800a214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}
 800a22a:	bf00      	nop
 800a22c:	ffceff88 	.word	0xffceff88
 800a230:	00100040 	.word	0x00100040
 800a234:	00100030 	.word	0x00100030
 800a238:	00100020 	.word	0x00100020

0800a23c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b085      	sub	sp, #20
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a46      	ldr	r2, [pc, #280]	@ (800a368 <TIM_Base_SetConfig+0x12c>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d013      	beq.n	800a27c <TIM_Base_SetConfig+0x40>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a25a:	d00f      	beq.n	800a27c <TIM_Base_SetConfig+0x40>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a43      	ldr	r2, [pc, #268]	@ (800a36c <TIM_Base_SetConfig+0x130>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d00b      	beq.n	800a27c <TIM_Base_SetConfig+0x40>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a42      	ldr	r2, [pc, #264]	@ (800a370 <TIM_Base_SetConfig+0x134>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d007      	beq.n	800a27c <TIM_Base_SetConfig+0x40>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a41      	ldr	r2, [pc, #260]	@ (800a374 <TIM_Base_SetConfig+0x138>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d003      	beq.n	800a27c <TIM_Base_SetConfig+0x40>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a40      	ldr	r2, [pc, #256]	@ (800a378 <TIM_Base_SetConfig+0x13c>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d108      	bne.n	800a28e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	4a35      	ldr	r2, [pc, #212]	@ (800a368 <TIM_Base_SetConfig+0x12c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d01f      	beq.n	800a2d6 <TIM_Base_SetConfig+0x9a>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a29c:	d01b      	beq.n	800a2d6 <TIM_Base_SetConfig+0x9a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a32      	ldr	r2, [pc, #200]	@ (800a36c <TIM_Base_SetConfig+0x130>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d017      	beq.n	800a2d6 <TIM_Base_SetConfig+0x9a>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a31      	ldr	r2, [pc, #196]	@ (800a370 <TIM_Base_SetConfig+0x134>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d013      	beq.n	800a2d6 <TIM_Base_SetConfig+0x9a>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a30      	ldr	r2, [pc, #192]	@ (800a374 <TIM_Base_SetConfig+0x138>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d00f      	beq.n	800a2d6 <TIM_Base_SetConfig+0x9a>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a2f      	ldr	r2, [pc, #188]	@ (800a378 <TIM_Base_SetConfig+0x13c>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00b      	beq.n	800a2d6 <TIM_Base_SetConfig+0x9a>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a2e      	ldr	r2, [pc, #184]	@ (800a37c <TIM_Base_SetConfig+0x140>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d007      	beq.n	800a2d6 <TIM_Base_SetConfig+0x9a>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a2d      	ldr	r2, [pc, #180]	@ (800a380 <TIM_Base_SetConfig+0x144>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d003      	beq.n	800a2d6 <TIM_Base_SetConfig+0x9a>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a2c      	ldr	r2, [pc, #176]	@ (800a384 <TIM_Base_SetConfig+0x148>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d108      	bne.n	800a2e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	68fa      	ldr	r2, [r7, #12]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	695b      	ldr	r3, [r3, #20]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a16      	ldr	r2, [pc, #88]	@ (800a368 <TIM_Base_SetConfig+0x12c>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d00f      	beq.n	800a334 <TIM_Base_SetConfig+0xf8>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a18      	ldr	r2, [pc, #96]	@ (800a378 <TIM_Base_SetConfig+0x13c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d00b      	beq.n	800a334 <TIM_Base_SetConfig+0xf8>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a17      	ldr	r2, [pc, #92]	@ (800a37c <TIM_Base_SetConfig+0x140>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d007      	beq.n	800a334 <TIM_Base_SetConfig+0xf8>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a16      	ldr	r2, [pc, #88]	@ (800a380 <TIM_Base_SetConfig+0x144>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d003      	beq.n	800a334 <TIM_Base_SetConfig+0xf8>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a15      	ldr	r2, [pc, #84]	@ (800a384 <TIM_Base_SetConfig+0x148>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d103      	bne.n	800a33c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	691a      	ldr	r2, [r3, #16]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d105      	bne.n	800a35a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	f023 0201 	bic.w	r2, r3, #1
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	611a      	str	r2, [r3, #16]
  }
}
 800a35a:	bf00      	nop
 800a35c:	3714      	adds	r7, #20
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	40010000 	.word	0x40010000
 800a36c:	40000400 	.word	0x40000400
 800a370:	40000800 	.word	0x40000800
 800a374:	40000c00 	.word	0x40000c00
 800a378:	40010400 	.word	0x40010400
 800a37c:	40014000 	.word	0x40014000
 800a380:	40014400 	.word	0x40014400
 800a384:	40014800 	.word	0x40014800

0800a388 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a388:	b480      	push	{r7}
 800a38a:	b087      	sub	sp, #28
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	f023 0201 	bic.w	r2, r3, #1
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4b37      	ldr	r3, [pc, #220]	@ (800a490 <TIM_OC1_SetConfig+0x108>)
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f023 0303 	bic.w	r3, r3, #3
 800a3be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	f023 0302 	bic.w	r3, r3, #2
 800a3d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	697a      	ldr	r2, [r7, #20]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a2d      	ldr	r2, [pc, #180]	@ (800a494 <TIM_OC1_SetConfig+0x10c>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d00f      	beq.n	800a404 <TIM_OC1_SetConfig+0x7c>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a2c      	ldr	r2, [pc, #176]	@ (800a498 <TIM_OC1_SetConfig+0x110>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00b      	beq.n	800a404 <TIM_OC1_SetConfig+0x7c>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a2b      	ldr	r2, [pc, #172]	@ (800a49c <TIM_OC1_SetConfig+0x114>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d007      	beq.n	800a404 <TIM_OC1_SetConfig+0x7c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	4a2a      	ldr	r2, [pc, #168]	@ (800a4a0 <TIM_OC1_SetConfig+0x118>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d003      	beq.n	800a404 <TIM_OC1_SetConfig+0x7c>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	4a29      	ldr	r2, [pc, #164]	@ (800a4a4 <TIM_OC1_SetConfig+0x11c>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d10c      	bne.n	800a41e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	f023 0308 	bic.w	r3, r3, #8
 800a40a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	4313      	orrs	r3, r2
 800a414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f023 0304 	bic.w	r3, r3, #4
 800a41c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a1c      	ldr	r2, [pc, #112]	@ (800a494 <TIM_OC1_SetConfig+0x10c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d00f      	beq.n	800a446 <TIM_OC1_SetConfig+0xbe>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a1b      	ldr	r2, [pc, #108]	@ (800a498 <TIM_OC1_SetConfig+0x110>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00b      	beq.n	800a446 <TIM_OC1_SetConfig+0xbe>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a1a      	ldr	r2, [pc, #104]	@ (800a49c <TIM_OC1_SetConfig+0x114>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d007      	beq.n	800a446 <TIM_OC1_SetConfig+0xbe>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a19      	ldr	r2, [pc, #100]	@ (800a4a0 <TIM_OC1_SetConfig+0x118>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d003      	beq.n	800a446 <TIM_OC1_SetConfig+0xbe>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	4a18      	ldr	r2, [pc, #96]	@ (800a4a4 <TIM_OC1_SetConfig+0x11c>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d111      	bne.n	800a46a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a44c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	4313      	orrs	r3, r2
 800a45e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	4313      	orrs	r3, r2
 800a468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	68fa      	ldr	r2, [r7, #12]
 800a474:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	621a      	str	r2, [r3, #32]
}
 800a484:	bf00      	nop
 800a486:	371c      	adds	r7, #28
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	fffeff8f 	.word	0xfffeff8f
 800a494:	40010000 	.word	0x40010000
 800a498:	40010400 	.word	0x40010400
 800a49c:	40014000 	.word	0x40014000
 800a4a0:	40014400 	.word	0x40014400
 800a4a4:	40014800 	.word	0x40014800

0800a4a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a1b      	ldr	r3, [r3, #32]
 800a4b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6a1b      	ldr	r3, [r3, #32]
 800a4bc:	f023 0210 	bic.w	r2, r3, #16
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	4b34      	ldr	r3, [pc, #208]	@ (800a5a4 <TIM_OC2_SetConfig+0xfc>)
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	021b      	lsls	r3, r3, #8
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f023 0320 	bic.w	r3, r3, #32
 800a4f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	011b      	lsls	r3, r3, #4
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a29      	ldr	r2, [pc, #164]	@ (800a5a8 <TIM_OC2_SetConfig+0x100>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d003      	beq.n	800a510 <TIM_OC2_SetConfig+0x68>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a28      	ldr	r2, [pc, #160]	@ (800a5ac <TIM_OC2_SetConfig+0x104>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d10d      	bne.n	800a52c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	697a      	ldr	r2, [r7, #20]
 800a520:	4313      	orrs	r3, r2
 800a522:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a52a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a1e      	ldr	r2, [pc, #120]	@ (800a5a8 <TIM_OC2_SetConfig+0x100>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d00f      	beq.n	800a554 <TIM_OC2_SetConfig+0xac>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a1d      	ldr	r2, [pc, #116]	@ (800a5ac <TIM_OC2_SetConfig+0x104>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d00b      	beq.n	800a554 <TIM_OC2_SetConfig+0xac>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a1c      	ldr	r2, [pc, #112]	@ (800a5b0 <TIM_OC2_SetConfig+0x108>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d007      	beq.n	800a554 <TIM_OC2_SetConfig+0xac>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a1b      	ldr	r2, [pc, #108]	@ (800a5b4 <TIM_OC2_SetConfig+0x10c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d003      	beq.n	800a554 <TIM_OC2_SetConfig+0xac>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a1a      	ldr	r2, [pc, #104]	@ (800a5b8 <TIM_OC2_SetConfig+0x110>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d113      	bne.n	800a57c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a55a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a562:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	4313      	orrs	r3, r2
 800a57a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685a      	ldr	r2, [r3, #4]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	621a      	str	r2, [r3, #32]
}
 800a596:	bf00      	nop
 800a598:	371c      	adds	r7, #28
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	feff8fff 	.word	0xfeff8fff
 800a5a8:	40010000 	.word	0x40010000
 800a5ac:	40010400 	.word	0x40010400
 800a5b0:	40014000 	.word	0x40014000
 800a5b4:	40014400 	.word	0x40014400
 800a5b8:	40014800 	.word	0x40014800

0800a5bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b087      	sub	sp, #28
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
 800a5ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a1b      	ldr	r3, [r3, #32]
 800a5d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	4b33      	ldr	r3, [pc, #204]	@ (800a6b4 <TIM_OC3_SetConfig+0xf8>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f023 0303 	bic.w	r3, r3, #3
 800a5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	021b      	lsls	r3, r3, #8
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	4313      	orrs	r3, r2
 800a610:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	4a28      	ldr	r2, [pc, #160]	@ (800a6b8 <TIM_OC3_SetConfig+0xfc>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d003      	beq.n	800a622 <TIM_OC3_SetConfig+0x66>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a27      	ldr	r2, [pc, #156]	@ (800a6bc <TIM_OC3_SetConfig+0x100>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d10d      	bne.n	800a63e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a628:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	021b      	lsls	r3, r3, #8
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	4313      	orrs	r3, r2
 800a634:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a63c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a1d      	ldr	r2, [pc, #116]	@ (800a6b8 <TIM_OC3_SetConfig+0xfc>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d00f      	beq.n	800a666 <TIM_OC3_SetConfig+0xaa>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a1c      	ldr	r2, [pc, #112]	@ (800a6bc <TIM_OC3_SetConfig+0x100>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d00b      	beq.n	800a666 <TIM_OC3_SetConfig+0xaa>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a1b      	ldr	r2, [pc, #108]	@ (800a6c0 <TIM_OC3_SetConfig+0x104>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d007      	beq.n	800a666 <TIM_OC3_SetConfig+0xaa>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a1a      	ldr	r2, [pc, #104]	@ (800a6c4 <TIM_OC3_SetConfig+0x108>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d003      	beq.n	800a666 <TIM_OC3_SetConfig+0xaa>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a19      	ldr	r2, [pc, #100]	@ (800a6c8 <TIM_OC3_SetConfig+0x10c>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d113      	bne.n	800a68e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a66c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a674:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	695b      	ldr	r3, [r3, #20]
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	693a      	ldr	r2, [r7, #16]
 800a67e:	4313      	orrs	r3, r2
 800a680:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	011b      	lsls	r3, r3, #4
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	693a      	ldr	r2, [r7, #16]
 800a692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	621a      	str	r2, [r3, #32]
}
 800a6a8:	bf00      	nop
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	fffeff8f 	.word	0xfffeff8f
 800a6b8:	40010000 	.word	0x40010000
 800a6bc:	40010400 	.word	0x40010400
 800a6c0:	40014000 	.word	0x40014000
 800a6c4:	40014400 	.word	0x40014400
 800a6c8:	40014800 	.word	0x40014800

0800a6cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a1b      	ldr	r3, [r3, #32]
 800a6e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	69db      	ldr	r3, [r3, #28]
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	4b24      	ldr	r3, [pc, #144]	@ (800a788 <TIM_OC4_SetConfig+0xbc>)
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	021b      	lsls	r3, r3, #8
 800a70a:	68fa      	ldr	r2, [r7, #12]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	031b      	lsls	r3, r3, #12
 800a71e:	693a      	ldr	r2, [r7, #16]
 800a720:	4313      	orrs	r3, r2
 800a722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a19      	ldr	r2, [pc, #100]	@ (800a78c <TIM_OC4_SetConfig+0xc0>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d00f      	beq.n	800a74c <TIM_OC4_SetConfig+0x80>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a18      	ldr	r2, [pc, #96]	@ (800a790 <TIM_OC4_SetConfig+0xc4>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d00b      	beq.n	800a74c <TIM_OC4_SetConfig+0x80>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a17      	ldr	r2, [pc, #92]	@ (800a794 <TIM_OC4_SetConfig+0xc8>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d007      	beq.n	800a74c <TIM_OC4_SetConfig+0x80>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a16      	ldr	r2, [pc, #88]	@ (800a798 <TIM_OC4_SetConfig+0xcc>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d003      	beq.n	800a74c <TIM_OC4_SetConfig+0x80>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a15      	ldr	r2, [pc, #84]	@ (800a79c <TIM_OC4_SetConfig+0xd0>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d109      	bne.n	800a760 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a752:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	019b      	lsls	r3, r3, #6
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	693a      	ldr	r2, [r7, #16]
 800a778:	621a      	str	r2, [r3, #32]
}
 800a77a:	bf00      	nop
 800a77c:	371c      	adds	r7, #28
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
 800a786:	bf00      	nop
 800a788:	feff8fff 	.word	0xfeff8fff
 800a78c:	40010000 	.word	0x40010000
 800a790:	40010400 	.word	0x40010400
 800a794:	40014000 	.word	0x40014000
 800a798:	40014400 	.word	0x40014400
 800a79c:	40014800 	.word	0x40014800

0800a7a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b087      	sub	sp, #28
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4b21      	ldr	r3, [pc, #132]	@ (800a850 <TIM_OC5_SetConfig+0xb0>)
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a7e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	041b      	lsls	r3, r3, #16
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a18      	ldr	r2, [pc, #96]	@ (800a854 <TIM_OC5_SetConfig+0xb4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d00f      	beq.n	800a816 <TIM_OC5_SetConfig+0x76>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a17      	ldr	r2, [pc, #92]	@ (800a858 <TIM_OC5_SetConfig+0xb8>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d00b      	beq.n	800a816 <TIM_OC5_SetConfig+0x76>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a16      	ldr	r2, [pc, #88]	@ (800a85c <TIM_OC5_SetConfig+0xbc>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d007      	beq.n	800a816 <TIM_OC5_SetConfig+0x76>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a15      	ldr	r2, [pc, #84]	@ (800a860 <TIM_OC5_SetConfig+0xc0>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d003      	beq.n	800a816 <TIM_OC5_SetConfig+0x76>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	4a14      	ldr	r2, [pc, #80]	@ (800a864 <TIM_OC5_SetConfig+0xc4>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d109      	bne.n	800a82a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a81c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	021b      	lsls	r3, r3, #8
 800a824:	697a      	ldr	r2, [r7, #20]
 800a826:	4313      	orrs	r3, r2
 800a828:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	621a      	str	r2, [r3, #32]
}
 800a844:	bf00      	nop
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	fffeff8f 	.word	0xfffeff8f
 800a854:	40010000 	.word	0x40010000
 800a858:	40010400 	.word	0x40010400
 800a85c:	40014000 	.word	0x40014000
 800a860:	40014400 	.word	0x40014400
 800a864:	40014800 	.word	0x40014800

0800a868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	4b22      	ldr	r3, [pc, #136]	@ (800a91c <TIM_OC6_SetConfig+0xb4>)
 800a894:	4013      	ands	r3, r2
 800a896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	021b      	lsls	r3, r3, #8
 800a89e:	68fa      	ldr	r2, [r7, #12]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a8aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	051b      	lsls	r3, r3, #20
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a19      	ldr	r2, [pc, #100]	@ (800a920 <TIM_OC6_SetConfig+0xb8>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d00f      	beq.n	800a8e0 <TIM_OC6_SetConfig+0x78>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a18      	ldr	r2, [pc, #96]	@ (800a924 <TIM_OC6_SetConfig+0xbc>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d00b      	beq.n	800a8e0 <TIM_OC6_SetConfig+0x78>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a17      	ldr	r2, [pc, #92]	@ (800a928 <TIM_OC6_SetConfig+0xc0>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d007      	beq.n	800a8e0 <TIM_OC6_SetConfig+0x78>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a16      	ldr	r2, [pc, #88]	@ (800a92c <TIM_OC6_SetConfig+0xc4>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d003      	beq.n	800a8e0 <TIM_OC6_SetConfig+0x78>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a15      	ldr	r2, [pc, #84]	@ (800a930 <TIM_OC6_SetConfig+0xc8>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d109      	bne.n	800a8f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a8e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	695b      	ldr	r3, [r3, #20]
 800a8ec:	029b      	lsls	r3, r3, #10
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68fa      	ldr	r2, [r7, #12]
 800a8fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	621a      	str	r2, [r3, #32]
}
 800a90e:	bf00      	nop
 800a910:	371c      	adds	r7, #28
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr
 800a91a:	bf00      	nop
 800a91c:	feff8fff 	.word	0xfeff8fff
 800a920:	40010000 	.word	0x40010000
 800a924:	40010400 	.word	0x40010400
 800a928:	40014000 	.word	0x40014000
 800a92c:	40014400 	.word	0x40014400
 800a930:	40014800 	.word	0x40014800

0800a934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a934:	b480      	push	{r7}
 800a936:	b087      	sub	sp, #28
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6a1b      	ldr	r3, [r3, #32]
 800a944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	f023 0201 	bic.w	r2, r3, #1
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a95e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	011b      	lsls	r3, r3, #4
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	4313      	orrs	r3, r2
 800a968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f023 030a 	bic.w	r3, r3, #10
 800a970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	4313      	orrs	r3, r2
 800a978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	621a      	str	r2, [r3, #32]
}
 800a986:	bf00      	nop
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a992:	b480      	push	{r7}
 800a994:	b087      	sub	sp, #28
 800a996:	af00      	add	r7, sp, #0
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6a1b      	ldr	r3, [r3, #32]
 800a9a8:	f023 0210 	bic.w	r2, r3, #16
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	031b      	lsls	r3, r3, #12
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a9ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	011b      	lsls	r3, r3, #4
 800a9d4:	697a      	ldr	r2, [r7, #20]
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	621a      	str	r2, [r3, #32]
}
 800a9e6:	bf00      	nop
 800a9e8:	371c      	adds	r7, #28
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
	...

0800a9f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	4b09      	ldr	r3, [pc, #36]	@ (800aa2c <TIM_ITRx_SetConfig+0x38>)
 800aa08:	4013      	ands	r3, r2
 800aa0a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa0c:	683a      	ldr	r2, [r7, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	f043 0307 	orr.w	r3, r3, #7
 800aa16:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	609a      	str	r2, [r3, #8]
}
 800aa1e:	bf00      	nop
 800aa20:	3714      	adds	r7, #20
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
 800aa2a:	bf00      	nop
 800aa2c:	ffcfff8f 	.word	0xffcfff8f

0800aa30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b087      	sub	sp, #28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
 800aa3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	021a      	lsls	r2, r3, #8
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	431a      	orrs	r2, r3
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	609a      	str	r2, [r3, #8]
}
 800aa64:	bf00      	nop
 800aa66:	371c      	adds	r7, #28
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	f003 031f 	and.w	r3, r3, #31
 800aa82:	2201      	movs	r2, #1
 800aa84:	fa02 f303 	lsl.w	r3, r2, r3
 800aa88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6a1a      	ldr	r2, [r3, #32]
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	43db      	mvns	r3, r3
 800aa92:	401a      	ands	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6a1a      	ldr	r2, [r3, #32]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	f003 031f 	and.w	r3, r3, #31
 800aaa2:	6879      	ldr	r1, [r7, #4]
 800aaa4:	fa01 f303 	lsl.w	r3, r1, r3
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	621a      	str	r2, [r3, #32]
}
 800aaae:	bf00      	nop
 800aab0:	371c      	adds	r7, #28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
	...

0800aabc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d101      	bne.n	800aad4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aad0:	2302      	movs	r3, #2
 800aad2:	e06d      	b.n	800abb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2202      	movs	r2, #2
 800aae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a30      	ldr	r2, [pc, #192]	@ (800abbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d004      	beq.n	800ab08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a2f      	ldr	r2, [pc, #188]	@ (800abc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d108      	bne.n	800ab1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ab0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a20      	ldr	r2, [pc, #128]	@ (800abbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d022      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab46:	d01d      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a1d      	ldr	r2, [pc, #116]	@ (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d018      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a1c      	ldr	r2, [pc, #112]	@ (800abc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d013      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a1a      	ldr	r2, [pc, #104]	@ (800abcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d00e      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a15      	ldr	r2, [pc, #84]	@ (800abc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d009      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a16      	ldr	r2, [pc, #88]	@ (800abd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d004      	beq.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a15      	ldr	r2, [pc, #84]	@ (800abd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d10c      	bne.n	800ab9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2201      	movs	r2, #1
 800aba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3714      	adds	r7, #20
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	40010000 	.word	0x40010000
 800abc0:	40010400 	.word	0x40010400
 800abc4:	40000400 	.word	0x40000400
 800abc8:	40000800 	.word	0x40000800
 800abcc:	40000c00 	.word	0x40000c00
 800abd0:	40001800 	.word	0x40001800
 800abd4:	40014000 	.word	0x40014000

0800abd8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abe2:	2300      	movs	r3, #0
 800abe4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800abec:	2b01      	cmp	r3, #1
 800abee:	d101      	bne.n	800abf4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800abf0:	2302      	movs	r3, #2
 800abf2:	e065      	b.n	800acc0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2201      	movs	r2, #1
 800abf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	041b      	lsls	r3, r3, #16
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a16      	ldr	r2, [pc, #88]	@ (800accc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d004      	beq.n	800ac82 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a14      	ldr	r2, [pc, #80]	@ (800acd0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d115      	bne.n	800acae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac8c:	051b      	lsls	r3, r3, #20
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	69db      	ldr	r3, [r3, #28]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	4313      	orrs	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	40010000 	.word	0x40010000
 800acd0:	40010400 	.word	0x40010400

0800acd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d101      	bne.n	800ace6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e042      	b.n	800ad6c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7f6 fd9b 	bl	8001834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2224      	movs	r2, #36	@ 0x24
 800ad02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f022 0201 	bic.w	r2, r2, #1
 800ad14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f001 fa4a 	bl	800c1b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fcdf 	bl	800b6e8 <UART_SetConfig>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d101      	bne.n	800ad34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e01b      	b.n	800ad6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685a      	ldr	r2, [r3, #4]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ad42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	689a      	ldr	r2, [r3, #8]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ad52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f042 0201 	orr.w	r2, r2, #1
 800ad62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f001 fac9 	bl	800c2fc <UART_CheckIdleState>
 800ad6a:	4603      	mov	r3, r0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b091      	sub	sp, #68	@ 0x44
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad88:	2b20      	cmp	r3, #32
 800ad8a:	d178      	bne.n	800ae7e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <HAL_UART_Transmit_IT+0x24>
 800ad92:	88fb      	ldrh	r3, [r7, #6]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d101      	bne.n	800ad9c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e071      	b.n	800ae80 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	88fa      	ldrh	r2, [r7, #6]
 800ada6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	88fa      	ldrh	r2, [r7, #6]
 800adae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2221      	movs	r2, #33	@ 0x21
 800adc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800add0:	d12a      	bne.n	800ae28 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800adda:	d107      	bne.n	800adec <HAL_UART_Transmit_IT+0x78>
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d103      	bne.n	800adec <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4a29      	ldr	r2, [pc, #164]	@ (800ae8c <HAL_UART_Transmit_IT+0x118>)
 800ade8:	679a      	str	r2, [r3, #120]	@ 0x78
 800adea:	e002      	b.n	800adf2 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4a28      	ldr	r2, [pc, #160]	@ (800ae90 <HAL_UART_Transmit_IT+0x11c>)
 800adf0:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3308      	adds	r3, #8
 800adf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfc:	e853 3f00 	ldrex	r3, [r3]
 800ae00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ae08:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	3308      	adds	r3, #8
 800ae10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae12:	637a      	str	r2, [r7, #52]	@ 0x34
 800ae14:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae1a:	e841 2300 	strex	r3, r2, [r1]
 800ae1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ae20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d1e5      	bne.n	800adf2 <HAL_UART_Transmit_IT+0x7e>
 800ae26:	e028      	b.n	800ae7a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae30:	d107      	bne.n	800ae42 <HAL_UART_Transmit_IT+0xce>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d103      	bne.n	800ae42 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	4a15      	ldr	r2, [pc, #84]	@ (800ae94 <HAL_UART_Transmit_IT+0x120>)
 800ae3e:	679a      	str	r2, [r3, #120]	@ 0x78
 800ae40:	e002      	b.n	800ae48 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	4a14      	ldr	r2, [pc, #80]	@ (800ae98 <HAL_UART_Transmit_IT+0x124>)
 800ae46:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	e853 3f00 	ldrex	r3, [r3]
 800ae54:	613b      	str	r3, [r7, #16]
   return(result);
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae66:	623b      	str	r3, [r7, #32]
 800ae68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6a:	69f9      	ldr	r1, [r7, #28]
 800ae6c:	6a3a      	ldr	r2, [r7, #32]
 800ae6e:	e841 2300 	strex	r3, r2, [r1]
 800ae72:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d1e6      	bne.n	800ae48 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e000      	b.n	800ae80 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800ae7e:	2302      	movs	r3, #2
  }
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3744      	adds	r7, #68	@ 0x44
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	0800cac3 	.word	0x0800cac3
 800ae90:	0800c9e3 	.word	0x0800c9e3
 800ae94:	0800c921 	.word	0x0800c921
 800ae98:	0800c869 	.word	0x0800c869

0800ae9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	@ 0x28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	4613      	mov	r3, r2
 800aea8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aeb0:	2b20      	cmp	r3, #32
 800aeb2:	d137      	bne.n	800af24 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d002      	beq.n	800aec0 <HAL_UART_Receive_IT+0x24>
 800aeba:	88fb      	ldrh	r3, [r7, #6]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d101      	bne.n	800aec4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e030      	b.n	800af26 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a18      	ldr	r2, [pc, #96]	@ (800af30 <HAL_UART_Receive_IT+0x94>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d01f      	beq.n	800af14 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d018      	beq.n	800af14 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	e853 3f00 	ldrex	r3, [r3]
 800aeee:	613b      	str	r3, [r7, #16]
   return(result);
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800aef6:	627b      	str	r3, [r7, #36]	@ 0x24
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	461a      	mov	r2, r3
 800aefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af00:	623b      	str	r3, [r7, #32]
 800af02:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	69f9      	ldr	r1, [r7, #28]
 800af06:	6a3a      	ldr	r2, [r7, #32]
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e6      	bne.n	800aee2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af14:	88fb      	ldrh	r3, [r7, #6]
 800af16:	461a      	mov	r2, r3
 800af18:	68b9      	ldr	r1, [r7, #8]
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f001 fb06 	bl	800c52c <UART_Start_Receive_IT>
 800af20:	4603      	mov	r3, r0
 800af22:	e000      	b.n	800af26 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800af24:	2302      	movs	r3, #2
  }
}
 800af26:	4618      	mov	r0, r3
 800af28:	3728      	adds	r7, #40	@ 0x28
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	58000c00 	.word	0x58000c00

0800af34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b0ba      	sub	sp, #232	@ 0xe8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800af5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800af62:	4013      	ands	r3, r2
 800af64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800af68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d11b      	bne.n	800afa8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af74:	f003 0320 	and.w	r3, r3, #32
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d015      	beq.n	800afa8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af80:	f003 0320 	and.w	r3, r3, #32
 800af84:	2b00      	cmp	r3, #0
 800af86:	d105      	bne.n	800af94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af90:	2b00      	cmp	r3, #0
 800af92:	d009      	beq.n	800afa8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 8377 	beq.w	800b68c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	4798      	blx	r3
      }
      return;
 800afa6:	e371      	b.n	800b68c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800afa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 8123 	beq.w	800b1f8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800afb2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800afb6:	4b8d      	ldr	r3, [pc, #564]	@ (800b1ec <HAL_UART_IRQHandler+0x2b8>)
 800afb8:	4013      	ands	r3, r2
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d106      	bne.n	800afcc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800afbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800afc2:	4b8b      	ldr	r3, [pc, #556]	@ (800b1f0 <HAL_UART_IRQHandler+0x2bc>)
 800afc4:	4013      	ands	r3, r2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f000 8116 	beq.w	800b1f8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d011      	beq.n	800affc <HAL_UART_IRQHandler+0xc8>
 800afd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00b      	beq.n	800affc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2201      	movs	r2, #1
 800afea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aff2:	f043 0201 	orr.w	r2, r3, #1
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800affc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b000:	f003 0302 	and.w	r3, r3, #2
 800b004:	2b00      	cmp	r3, #0
 800b006:	d011      	beq.n	800b02c <HAL_UART_IRQHandler+0xf8>
 800b008:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00b      	beq.n	800b02c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2202      	movs	r2, #2
 800b01a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b022:	f043 0204 	orr.w	r2, r3, #4
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	d011      	beq.n	800b05c <HAL_UART_IRQHandler+0x128>
 800b038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b03c:	f003 0301 	and.w	r3, r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00b      	beq.n	800b05c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2204      	movs	r2, #4
 800b04a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b052:	f043 0202 	orr.w	r2, r3, #2
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b060:	f003 0308 	and.w	r3, r3, #8
 800b064:	2b00      	cmp	r3, #0
 800b066:	d017      	beq.n	800b098 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b06c:	f003 0320 	and.w	r3, r3, #32
 800b070:	2b00      	cmp	r3, #0
 800b072:	d105      	bne.n	800b080 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b074:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b078:	4b5c      	ldr	r3, [pc, #368]	@ (800b1ec <HAL_UART_IRQHandler+0x2b8>)
 800b07a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00b      	beq.n	800b098 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2208      	movs	r2, #8
 800b086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b08e:	f043 0208 	orr.w	r2, r3, #8
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b09c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d012      	beq.n	800b0ca <HAL_UART_IRQHandler+0x196>
 800b0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00c      	beq.n	800b0ca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b0b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0c0:	f043 0220 	orr.w	r2, r3, #32
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 82dd 	beq.w	800b690 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0da:	f003 0320 	and.w	r3, r3, #32
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d013      	beq.n	800b10a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0e6:	f003 0320 	and.w	r3, r3, #32
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d105      	bne.n	800b0fa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d007      	beq.n	800b10a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d003      	beq.n	800b10a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b110:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b11e:	2b40      	cmp	r3, #64	@ 0x40
 800b120:	d005      	beq.n	800b12e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b126:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d054      	beq.n	800b1d8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f001 fb1e 	bl	800c770 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	689b      	ldr	r3, [r3, #8]
 800b13a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b13e:	2b40      	cmp	r3, #64	@ 0x40
 800b140:	d146      	bne.n	800b1d0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3308      	adds	r3, #8
 800b148:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b150:	e853 3f00 	ldrex	r3, [r3]
 800b154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b158:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b15c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b160:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	3308      	adds	r3, #8
 800b16a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b16e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b172:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b17a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b17e:	e841 2300 	strex	r3, r2, [r1]
 800b182:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1d9      	bne.n	800b142 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b194:	2b00      	cmp	r3, #0
 800b196:	d017      	beq.n	800b1c8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b19e:	4a15      	ldr	r2, [pc, #84]	@ (800b1f4 <HAL_UART_IRQHandler+0x2c0>)
 800b1a0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7f8 ffb7 	bl	800411c <HAL_DMA_Abort_IT>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d019      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c6:	e00f      	b.n	800b1e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 fa77 	bl	800b6bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ce:	e00b      	b.n	800b1e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fa73 	bl	800b6bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d6:	e007      	b.n	800b1e8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fa6f 	bl	800b6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b1e6:	e253      	b.n	800b690 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e8:	bf00      	nop
    return;
 800b1ea:	e251      	b.n	800b690 <HAL_UART_IRQHandler+0x75c>
 800b1ec:	10000001 	.word	0x10000001
 800b1f0:	04000120 	.word	0x04000120
 800b1f4:	0800c83d 	.word	0x0800c83d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	f040 81e7 	bne.w	800b5d0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b206:	f003 0310 	and.w	r3, r3, #16
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 81e0 	beq.w	800b5d0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b214:	f003 0310 	and.w	r3, r3, #16
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 81d9 	beq.w	800b5d0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2210      	movs	r2, #16
 800b224:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b230:	2b40      	cmp	r3, #64	@ 0x40
 800b232:	f040 8151 	bne.w	800b4d8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a96      	ldr	r2, [pc, #600]	@ (800b498 <HAL_UART_IRQHandler+0x564>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d068      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a93      	ldr	r2, [pc, #588]	@ (800b49c <HAL_UART_IRQHandler+0x568>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d061      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a91      	ldr	r2, [pc, #580]	@ (800b4a0 <HAL_UART_IRQHandler+0x56c>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d05a      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a8e      	ldr	r2, [pc, #568]	@ (800b4a4 <HAL_UART_IRQHandler+0x570>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d053      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a8c      	ldr	r2, [pc, #560]	@ (800b4a8 <HAL_UART_IRQHandler+0x574>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d04c      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a89      	ldr	r2, [pc, #548]	@ (800b4ac <HAL_UART_IRQHandler+0x578>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d045      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a87      	ldr	r2, [pc, #540]	@ (800b4b0 <HAL_UART_IRQHandler+0x57c>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d03e      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a84      	ldr	r2, [pc, #528]	@ (800b4b4 <HAL_UART_IRQHandler+0x580>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d037      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a82      	ldr	r2, [pc, #520]	@ (800b4b8 <HAL_UART_IRQHandler+0x584>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d030      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	4a7f      	ldr	r2, [pc, #508]	@ (800b4bc <HAL_UART_IRQHandler+0x588>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d029      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a7d      	ldr	r2, [pc, #500]	@ (800b4c0 <HAL_UART_IRQHandler+0x58c>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d022      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a7a      	ldr	r2, [pc, #488]	@ (800b4c4 <HAL_UART_IRQHandler+0x590>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d01b      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a78      	ldr	r2, [pc, #480]	@ (800b4c8 <HAL_UART_IRQHandler+0x594>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d014      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a75      	ldr	r2, [pc, #468]	@ (800b4cc <HAL_UART_IRQHandler+0x598>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d00d      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a73      	ldr	r2, [pc, #460]	@ (800b4d0 <HAL_UART_IRQHandler+0x59c>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d006      	beq.n	800b316 <HAL_UART_IRQHandler+0x3e2>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a70      	ldr	r2, [pc, #448]	@ (800b4d4 <HAL_UART_IRQHandler+0x5a0>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d106      	bne.n	800b324 <HAL_UART_IRQHandler+0x3f0>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	b29b      	uxth	r3, r3
 800b322:	e005      	b.n	800b330 <HAL_UART_IRQHandler+0x3fc>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b334:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 81ab 	beq.w	800b694 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b344:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b348:	429a      	cmp	r2, r3
 800b34a:	f080 81a3 	bcs.w	800b694 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b354:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b35e:	69db      	ldr	r3, [r3, #28]
 800b360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b364:	f000 8087 	beq.w	800b476 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b370:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b374:	e853 3f00 	ldrex	r3, [r3]
 800b378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b37c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b384:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	461a      	mov	r2, r3
 800b38e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b392:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b396:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b39e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b3a2:	e841 2300 	strex	r3, r2, [r1]
 800b3a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b3aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1da      	bne.n	800b368 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3bc:	e853 3f00 	ldrex	r3, [r3]
 800b3c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b3c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b3c4:	f023 0301 	bic.w	r3, r3, #1
 800b3c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b3d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b3da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b3de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b3e2:	e841 2300 	strex	r3, r2, [r1]
 800b3e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b3e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e1      	bne.n	800b3b2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3308      	adds	r3, #8
 800b3f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3f8:	e853 3f00 	ldrex	r3, [r3]
 800b3fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b3fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b404:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3308      	adds	r3, #8
 800b40e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b412:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b414:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b416:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b418:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b41a:	e841 2300 	strex	r3, r2, [r1]
 800b41e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1e3      	bne.n	800b3ee <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2220      	movs	r2, #32
 800b42a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b43c:	e853 3f00 	ldrex	r3, [r3]
 800b440:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b442:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b444:	f023 0310 	bic.w	r3, r3, #16
 800b448:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	461a      	mov	r2, r3
 800b452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b456:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b458:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b45c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b45e:	e841 2300 	strex	r3, r2, [r1]
 800b462:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e4      	bne.n	800b434 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b470:	4618      	mov	r0, r3
 800b472:	f7f8 fb35 	bl	8003ae0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2202      	movs	r2, #2
 800b47a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b488:	b29b      	uxth	r3, r3
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f91d 	bl	800b6d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b496:	e0fd      	b.n	800b694 <HAL_UART_IRQHandler+0x760>
 800b498:	40020010 	.word	0x40020010
 800b49c:	40020028 	.word	0x40020028
 800b4a0:	40020040 	.word	0x40020040
 800b4a4:	40020058 	.word	0x40020058
 800b4a8:	40020070 	.word	0x40020070
 800b4ac:	40020088 	.word	0x40020088
 800b4b0:	400200a0 	.word	0x400200a0
 800b4b4:	400200b8 	.word	0x400200b8
 800b4b8:	40020410 	.word	0x40020410
 800b4bc:	40020428 	.word	0x40020428
 800b4c0:	40020440 	.word	0x40020440
 800b4c4:	40020458 	.word	0x40020458
 800b4c8:	40020470 	.word	0x40020470
 800b4cc:	40020488 	.word	0x40020488
 800b4d0:	400204a0 	.word	0x400204a0
 800b4d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	1ad3      	subs	r3, r2, r3
 800b4e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 80cf 	beq.w	800b698 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b4fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f000 80ca 	beq.w	800b698 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b50c:	e853 3f00 	ldrex	r3, [r3]
 800b510:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b518:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	461a      	mov	r2, r3
 800b522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b526:	647b      	str	r3, [r7, #68]	@ 0x44
 800b528:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b52a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b52c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b52e:	e841 2300 	strex	r3, r2, [r1]
 800b532:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1e4      	bne.n	800b504 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3308      	adds	r3, #8
 800b540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b544:	e853 3f00 	ldrex	r3, [r3]
 800b548:	623b      	str	r3, [r7, #32]
   return(result);
 800b54a:	6a3a      	ldr	r2, [r7, #32]
 800b54c:	4b55      	ldr	r3, [pc, #340]	@ (800b6a4 <HAL_UART_IRQHandler+0x770>)
 800b54e:	4013      	ands	r3, r2
 800b550:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	3308      	adds	r3, #8
 800b55a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b55e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b566:	e841 2300 	strex	r3, r2, [r1]
 800b56a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b56c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d1e3      	bne.n	800b53a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2220      	movs	r2, #32
 800b576:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	e853 3f00 	ldrex	r3, [r3]
 800b592:	60fb      	str	r3, [r7, #12]
   return(result);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f023 0310 	bic.w	r3, r3, #16
 800b59a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b5a8:	61fb      	str	r3, [r7, #28]
 800b5aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ac:	69b9      	ldr	r1, [r7, #24]
 800b5ae:	69fa      	ldr	r2, [r7, #28]
 800b5b0:	e841 2300 	strex	r3, r2, [r1]
 800b5b4:	617b      	str	r3, [r7, #20]
   return(result);
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e4      	bne.n	800b586 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2202      	movs	r2, #2
 800b5c0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b5c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 f881 	bl	800b6d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5ce:	e063      	b.n	800b698 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00e      	beq.n	800b5fa <HAL_UART_IRQHandler+0x6c6>
 800b5dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d008      	beq.n	800b5fa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b5f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f002 f822 	bl	800d63c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5f8:	e051      	b.n	800b69e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b5fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b602:	2b00      	cmp	r3, #0
 800b604:	d014      	beq.n	800b630 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b60a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d105      	bne.n	800b61e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b616:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d008      	beq.n	800b630 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b622:	2b00      	cmp	r3, #0
 800b624:	d03a      	beq.n	800b69c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	4798      	blx	r3
    }
    return;
 800b62e:	e035      	b.n	800b69c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d009      	beq.n	800b650 <HAL_UART_IRQHandler+0x71c>
 800b63c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b644:	2b00      	cmp	r3, #0
 800b646:	d003      	beq.n	800b650 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f001 faaf 	bl	800cbac <UART_EndTransmit_IT>
    return;
 800b64e:	e026      	b.n	800b69e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d009      	beq.n	800b670 <HAL_UART_IRQHandler+0x73c>
 800b65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b660:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b664:	2b00      	cmp	r3, #0
 800b666:	d003      	beq.n	800b670 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f001 fffb 	bl	800d664 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b66e:	e016      	b.n	800b69e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b674:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d010      	beq.n	800b69e <HAL_UART_IRQHandler+0x76a>
 800b67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b680:	2b00      	cmp	r3, #0
 800b682:	da0c      	bge.n	800b69e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f001 ffe3 	bl	800d650 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b68a:	e008      	b.n	800b69e <HAL_UART_IRQHandler+0x76a>
      return;
 800b68c:	bf00      	nop
 800b68e:	e006      	b.n	800b69e <HAL_UART_IRQHandler+0x76a>
    return;
 800b690:	bf00      	nop
 800b692:	e004      	b.n	800b69e <HAL_UART_IRQHandler+0x76a>
      return;
 800b694:	bf00      	nop
 800b696:	e002      	b.n	800b69e <HAL_UART_IRQHandler+0x76a>
      return;
 800b698:	bf00      	nop
 800b69a:	e000      	b.n	800b69e <HAL_UART_IRQHandler+0x76a>
    return;
 800b69c:	bf00      	nop
  }
}
 800b69e:	37e8      	adds	r7, #232	@ 0xe8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	effffffe 	.word	0xeffffffe

0800b6a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	460b      	mov	r3, r1
 800b6da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6dc:	bf00      	nop
 800b6de:	370c      	adds	r7, #12
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr

0800b6e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6ec:	b092      	sub	sp, #72	@ 0x48
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	689a      	ldr	r2, [r3, #8]
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	431a      	orrs	r2, r3
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	431a      	orrs	r2, r3
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	69db      	ldr	r3, [r3, #28]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	4bbe      	ldr	r3, [pc, #760]	@ (800ba10 <UART_SetConfig+0x328>)
 800b718:	4013      	ands	r3, r2
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	6812      	ldr	r2, [r2, #0]
 800b71e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b720:	430b      	orrs	r3, r1
 800b722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	68da      	ldr	r2, [r3, #12]
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	430a      	orrs	r2, r1
 800b738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4ab3      	ldr	r2, [pc, #716]	@ (800ba14 <UART_SetConfig+0x32c>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d004      	beq.n	800b754 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	6a1b      	ldr	r3, [r3, #32]
 800b74e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b750:	4313      	orrs	r3, r2
 800b752:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	689a      	ldr	r2, [r3, #8]
 800b75a:	4baf      	ldr	r3, [pc, #700]	@ (800ba18 <UART_SetConfig+0x330>)
 800b75c:	4013      	ands	r3, r2
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	6812      	ldr	r2, [r2, #0]
 800b762:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b764:	430b      	orrs	r3, r1
 800b766:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76e:	f023 010f 	bic.w	r1, r3, #15
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	430a      	orrs	r2, r1
 800b77c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4aa6      	ldr	r2, [pc, #664]	@ (800ba1c <UART_SetConfig+0x334>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d177      	bne.n	800b878 <UART_SetConfig+0x190>
 800b788:	4ba5      	ldr	r3, [pc, #660]	@ (800ba20 <UART_SetConfig+0x338>)
 800b78a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b78c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b790:	2b28      	cmp	r3, #40	@ 0x28
 800b792:	d86d      	bhi.n	800b870 <UART_SetConfig+0x188>
 800b794:	a201      	add	r2, pc, #4	@ (adr r2, 800b79c <UART_SetConfig+0xb4>)
 800b796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b79a:	bf00      	nop
 800b79c:	0800b841 	.word	0x0800b841
 800b7a0:	0800b871 	.word	0x0800b871
 800b7a4:	0800b871 	.word	0x0800b871
 800b7a8:	0800b871 	.word	0x0800b871
 800b7ac:	0800b871 	.word	0x0800b871
 800b7b0:	0800b871 	.word	0x0800b871
 800b7b4:	0800b871 	.word	0x0800b871
 800b7b8:	0800b871 	.word	0x0800b871
 800b7bc:	0800b849 	.word	0x0800b849
 800b7c0:	0800b871 	.word	0x0800b871
 800b7c4:	0800b871 	.word	0x0800b871
 800b7c8:	0800b871 	.word	0x0800b871
 800b7cc:	0800b871 	.word	0x0800b871
 800b7d0:	0800b871 	.word	0x0800b871
 800b7d4:	0800b871 	.word	0x0800b871
 800b7d8:	0800b871 	.word	0x0800b871
 800b7dc:	0800b851 	.word	0x0800b851
 800b7e0:	0800b871 	.word	0x0800b871
 800b7e4:	0800b871 	.word	0x0800b871
 800b7e8:	0800b871 	.word	0x0800b871
 800b7ec:	0800b871 	.word	0x0800b871
 800b7f0:	0800b871 	.word	0x0800b871
 800b7f4:	0800b871 	.word	0x0800b871
 800b7f8:	0800b871 	.word	0x0800b871
 800b7fc:	0800b859 	.word	0x0800b859
 800b800:	0800b871 	.word	0x0800b871
 800b804:	0800b871 	.word	0x0800b871
 800b808:	0800b871 	.word	0x0800b871
 800b80c:	0800b871 	.word	0x0800b871
 800b810:	0800b871 	.word	0x0800b871
 800b814:	0800b871 	.word	0x0800b871
 800b818:	0800b871 	.word	0x0800b871
 800b81c:	0800b861 	.word	0x0800b861
 800b820:	0800b871 	.word	0x0800b871
 800b824:	0800b871 	.word	0x0800b871
 800b828:	0800b871 	.word	0x0800b871
 800b82c:	0800b871 	.word	0x0800b871
 800b830:	0800b871 	.word	0x0800b871
 800b834:	0800b871 	.word	0x0800b871
 800b838:	0800b871 	.word	0x0800b871
 800b83c:	0800b869 	.word	0x0800b869
 800b840:	2301      	movs	r3, #1
 800b842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b846:	e222      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b848:	2304      	movs	r3, #4
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84e:	e21e      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b850:	2308      	movs	r3, #8
 800b852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b856:	e21a      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b858:	2310      	movs	r3, #16
 800b85a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b85e:	e216      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b860:	2320      	movs	r3, #32
 800b862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b866:	e212      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b868:	2340      	movs	r3, #64	@ 0x40
 800b86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b86e:	e20e      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b870:	2380      	movs	r3, #128	@ 0x80
 800b872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b876:	e20a      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a69      	ldr	r2, [pc, #420]	@ (800ba24 <UART_SetConfig+0x33c>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d130      	bne.n	800b8e4 <UART_SetConfig+0x1fc>
 800b882:	4b67      	ldr	r3, [pc, #412]	@ (800ba20 <UART_SetConfig+0x338>)
 800b884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b886:	f003 0307 	and.w	r3, r3, #7
 800b88a:	2b05      	cmp	r3, #5
 800b88c:	d826      	bhi.n	800b8dc <UART_SetConfig+0x1f4>
 800b88e:	a201      	add	r2, pc, #4	@ (adr r2, 800b894 <UART_SetConfig+0x1ac>)
 800b890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b894:	0800b8ad 	.word	0x0800b8ad
 800b898:	0800b8b5 	.word	0x0800b8b5
 800b89c:	0800b8bd 	.word	0x0800b8bd
 800b8a0:	0800b8c5 	.word	0x0800b8c5
 800b8a4:	0800b8cd 	.word	0x0800b8cd
 800b8a8:	0800b8d5 	.word	0x0800b8d5
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b2:	e1ec      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b8b4:	2304      	movs	r3, #4
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ba:	e1e8      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b8bc:	2308      	movs	r3, #8
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8c2:	e1e4      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b8c4:	2310      	movs	r3, #16
 800b8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ca:	e1e0      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b8cc:	2320      	movs	r3, #32
 800b8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8d2:	e1dc      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b8d4:	2340      	movs	r3, #64	@ 0x40
 800b8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8da:	e1d8      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b8dc:	2380      	movs	r3, #128	@ 0x80
 800b8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8e2:	e1d4      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a4f      	ldr	r2, [pc, #316]	@ (800ba28 <UART_SetConfig+0x340>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d130      	bne.n	800b950 <UART_SetConfig+0x268>
 800b8ee:	4b4c      	ldr	r3, [pc, #304]	@ (800ba20 <UART_SetConfig+0x338>)
 800b8f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8f2:	f003 0307 	and.w	r3, r3, #7
 800b8f6:	2b05      	cmp	r3, #5
 800b8f8:	d826      	bhi.n	800b948 <UART_SetConfig+0x260>
 800b8fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b900 <UART_SetConfig+0x218>)
 800b8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b900:	0800b919 	.word	0x0800b919
 800b904:	0800b921 	.word	0x0800b921
 800b908:	0800b929 	.word	0x0800b929
 800b90c:	0800b931 	.word	0x0800b931
 800b910:	0800b939 	.word	0x0800b939
 800b914:	0800b941 	.word	0x0800b941
 800b918:	2300      	movs	r3, #0
 800b91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91e:	e1b6      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b920:	2304      	movs	r3, #4
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b926:	e1b2      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b928:	2308      	movs	r3, #8
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92e:	e1ae      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b930:	2310      	movs	r3, #16
 800b932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b936:	e1aa      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b938:	2320      	movs	r3, #32
 800b93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b93e:	e1a6      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b940:	2340      	movs	r3, #64	@ 0x40
 800b942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b946:	e1a2      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b948:	2380      	movs	r3, #128	@ 0x80
 800b94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b94e:	e19e      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a35      	ldr	r2, [pc, #212]	@ (800ba2c <UART_SetConfig+0x344>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d130      	bne.n	800b9bc <UART_SetConfig+0x2d4>
 800b95a:	4b31      	ldr	r3, [pc, #196]	@ (800ba20 <UART_SetConfig+0x338>)
 800b95c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b95e:	f003 0307 	and.w	r3, r3, #7
 800b962:	2b05      	cmp	r3, #5
 800b964:	d826      	bhi.n	800b9b4 <UART_SetConfig+0x2cc>
 800b966:	a201      	add	r2, pc, #4	@ (adr r2, 800b96c <UART_SetConfig+0x284>)
 800b968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96c:	0800b985 	.word	0x0800b985
 800b970:	0800b98d 	.word	0x0800b98d
 800b974:	0800b995 	.word	0x0800b995
 800b978:	0800b99d 	.word	0x0800b99d
 800b97c:	0800b9a5 	.word	0x0800b9a5
 800b980:	0800b9ad 	.word	0x0800b9ad
 800b984:	2300      	movs	r3, #0
 800b986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98a:	e180      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b98c:	2304      	movs	r3, #4
 800b98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b992:	e17c      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b994:	2308      	movs	r3, #8
 800b996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b99a:	e178      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b99c:	2310      	movs	r3, #16
 800b99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9a2:	e174      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b9a4:	2320      	movs	r3, #32
 800b9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9aa:	e170      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b9ac:	2340      	movs	r3, #64	@ 0x40
 800b9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9b2:	e16c      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b9b4:	2380      	movs	r3, #128	@ 0x80
 800b9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ba:	e168      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a1b      	ldr	r2, [pc, #108]	@ (800ba30 <UART_SetConfig+0x348>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d142      	bne.n	800ba4c <UART_SetConfig+0x364>
 800b9c6:	4b16      	ldr	r3, [pc, #88]	@ (800ba20 <UART_SetConfig+0x338>)
 800b9c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ca:	f003 0307 	and.w	r3, r3, #7
 800b9ce:	2b05      	cmp	r3, #5
 800b9d0:	d838      	bhi.n	800ba44 <UART_SetConfig+0x35c>
 800b9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d8 <UART_SetConfig+0x2f0>)
 800b9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d8:	0800b9f1 	.word	0x0800b9f1
 800b9dc:	0800b9f9 	.word	0x0800b9f9
 800b9e0:	0800ba01 	.word	0x0800ba01
 800b9e4:	0800ba09 	.word	0x0800ba09
 800b9e8:	0800ba35 	.word	0x0800ba35
 800b9ec:	0800ba3d 	.word	0x0800ba3d
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f6:	e14a      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800b9f8:	2304      	movs	r3, #4
 800b9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fe:	e146      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800ba00:	2308      	movs	r3, #8
 800ba02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba06:	e142      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800ba08:	2310      	movs	r3, #16
 800ba0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba0e:	e13e      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800ba10:	cfff69f3 	.word	0xcfff69f3
 800ba14:	58000c00 	.word	0x58000c00
 800ba18:	11fff4ff 	.word	0x11fff4ff
 800ba1c:	40011000 	.word	0x40011000
 800ba20:	58024400 	.word	0x58024400
 800ba24:	40004400 	.word	0x40004400
 800ba28:	40004800 	.word	0x40004800
 800ba2c:	40004c00 	.word	0x40004c00
 800ba30:	40005000 	.word	0x40005000
 800ba34:	2320      	movs	r3, #32
 800ba36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba3a:	e128      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800ba3c:	2340      	movs	r3, #64	@ 0x40
 800ba3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba42:	e124      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800ba44:	2380      	movs	r3, #128	@ 0x80
 800ba46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4a:	e120      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4acb      	ldr	r2, [pc, #812]	@ (800bd80 <UART_SetConfig+0x698>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d176      	bne.n	800bb44 <UART_SetConfig+0x45c>
 800ba56:	4bcb      	ldr	r3, [pc, #812]	@ (800bd84 <UART_SetConfig+0x69c>)
 800ba58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba5e:	2b28      	cmp	r3, #40	@ 0x28
 800ba60:	d86c      	bhi.n	800bb3c <UART_SetConfig+0x454>
 800ba62:	a201      	add	r2, pc, #4	@ (adr r2, 800ba68 <UART_SetConfig+0x380>)
 800ba64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba68:	0800bb0d 	.word	0x0800bb0d
 800ba6c:	0800bb3d 	.word	0x0800bb3d
 800ba70:	0800bb3d 	.word	0x0800bb3d
 800ba74:	0800bb3d 	.word	0x0800bb3d
 800ba78:	0800bb3d 	.word	0x0800bb3d
 800ba7c:	0800bb3d 	.word	0x0800bb3d
 800ba80:	0800bb3d 	.word	0x0800bb3d
 800ba84:	0800bb3d 	.word	0x0800bb3d
 800ba88:	0800bb15 	.word	0x0800bb15
 800ba8c:	0800bb3d 	.word	0x0800bb3d
 800ba90:	0800bb3d 	.word	0x0800bb3d
 800ba94:	0800bb3d 	.word	0x0800bb3d
 800ba98:	0800bb3d 	.word	0x0800bb3d
 800ba9c:	0800bb3d 	.word	0x0800bb3d
 800baa0:	0800bb3d 	.word	0x0800bb3d
 800baa4:	0800bb3d 	.word	0x0800bb3d
 800baa8:	0800bb1d 	.word	0x0800bb1d
 800baac:	0800bb3d 	.word	0x0800bb3d
 800bab0:	0800bb3d 	.word	0x0800bb3d
 800bab4:	0800bb3d 	.word	0x0800bb3d
 800bab8:	0800bb3d 	.word	0x0800bb3d
 800babc:	0800bb3d 	.word	0x0800bb3d
 800bac0:	0800bb3d 	.word	0x0800bb3d
 800bac4:	0800bb3d 	.word	0x0800bb3d
 800bac8:	0800bb25 	.word	0x0800bb25
 800bacc:	0800bb3d 	.word	0x0800bb3d
 800bad0:	0800bb3d 	.word	0x0800bb3d
 800bad4:	0800bb3d 	.word	0x0800bb3d
 800bad8:	0800bb3d 	.word	0x0800bb3d
 800badc:	0800bb3d 	.word	0x0800bb3d
 800bae0:	0800bb3d 	.word	0x0800bb3d
 800bae4:	0800bb3d 	.word	0x0800bb3d
 800bae8:	0800bb2d 	.word	0x0800bb2d
 800baec:	0800bb3d 	.word	0x0800bb3d
 800baf0:	0800bb3d 	.word	0x0800bb3d
 800baf4:	0800bb3d 	.word	0x0800bb3d
 800baf8:	0800bb3d 	.word	0x0800bb3d
 800bafc:	0800bb3d 	.word	0x0800bb3d
 800bb00:	0800bb3d 	.word	0x0800bb3d
 800bb04:	0800bb3d 	.word	0x0800bb3d
 800bb08:	0800bb35 	.word	0x0800bb35
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb12:	e0bc      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb14:	2304      	movs	r3, #4
 800bb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1a:	e0b8      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb22:	e0b4      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb24:	2310      	movs	r3, #16
 800bb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2a:	e0b0      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb2c:	2320      	movs	r3, #32
 800bb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb32:	e0ac      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb34:	2340      	movs	r3, #64	@ 0x40
 800bb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb3a:	e0a8      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb3c:	2380      	movs	r3, #128	@ 0x80
 800bb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb42:	e0a4      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a8f      	ldr	r2, [pc, #572]	@ (800bd88 <UART_SetConfig+0x6a0>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d130      	bne.n	800bbb0 <UART_SetConfig+0x4c8>
 800bb4e:	4b8d      	ldr	r3, [pc, #564]	@ (800bd84 <UART_SetConfig+0x69c>)
 800bb50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb52:	f003 0307 	and.w	r3, r3, #7
 800bb56:	2b05      	cmp	r3, #5
 800bb58:	d826      	bhi.n	800bba8 <UART_SetConfig+0x4c0>
 800bb5a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb60 <UART_SetConfig+0x478>)
 800bb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb60:	0800bb79 	.word	0x0800bb79
 800bb64:	0800bb81 	.word	0x0800bb81
 800bb68:	0800bb89 	.word	0x0800bb89
 800bb6c:	0800bb91 	.word	0x0800bb91
 800bb70:	0800bb99 	.word	0x0800bb99
 800bb74:	0800bba1 	.word	0x0800bba1
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7e:	e086      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb80:	2304      	movs	r3, #4
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb86:	e082      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb88:	2308      	movs	r3, #8
 800bb8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8e:	e07e      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb90:	2310      	movs	r3, #16
 800bb92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb96:	e07a      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bb98:	2320      	movs	r3, #32
 800bb9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb9e:	e076      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bba0:	2340      	movs	r3, #64	@ 0x40
 800bba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bba6:	e072      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bba8:	2380      	movs	r3, #128	@ 0x80
 800bbaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbae:	e06e      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a75      	ldr	r2, [pc, #468]	@ (800bd8c <UART_SetConfig+0x6a4>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d130      	bne.n	800bc1c <UART_SetConfig+0x534>
 800bbba:	4b72      	ldr	r3, [pc, #456]	@ (800bd84 <UART_SetConfig+0x69c>)
 800bbbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbbe:	f003 0307 	and.w	r3, r3, #7
 800bbc2:	2b05      	cmp	r3, #5
 800bbc4:	d826      	bhi.n	800bc14 <UART_SetConfig+0x52c>
 800bbc6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbcc <UART_SetConfig+0x4e4>)
 800bbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbcc:	0800bbe5 	.word	0x0800bbe5
 800bbd0:	0800bbed 	.word	0x0800bbed
 800bbd4:	0800bbf5 	.word	0x0800bbf5
 800bbd8:	0800bbfd 	.word	0x0800bbfd
 800bbdc:	0800bc05 	.word	0x0800bc05
 800bbe0:	0800bc0d 	.word	0x0800bc0d
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbea:	e050      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bbec:	2304      	movs	r3, #4
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf2:	e04c      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bbf4:	2308      	movs	r3, #8
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbfa:	e048      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bbfc:	2310      	movs	r3, #16
 800bbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc02:	e044      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc04:	2320      	movs	r3, #32
 800bc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc0a:	e040      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc0c:	2340      	movs	r3, #64	@ 0x40
 800bc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc12:	e03c      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc14:	2380      	movs	r3, #128	@ 0x80
 800bc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc1a:	e038      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4a5b      	ldr	r2, [pc, #364]	@ (800bd90 <UART_SetConfig+0x6a8>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d130      	bne.n	800bc88 <UART_SetConfig+0x5a0>
 800bc26:	4b57      	ldr	r3, [pc, #348]	@ (800bd84 <UART_SetConfig+0x69c>)
 800bc28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc2a:	f003 0307 	and.w	r3, r3, #7
 800bc2e:	2b05      	cmp	r3, #5
 800bc30:	d826      	bhi.n	800bc80 <UART_SetConfig+0x598>
 800bc32:	a201      	add	r2, pc, #4	@ (adr r2, 800bc38 <UART_SetConfig+0x550>)
 800bc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc38:	0800bc51 	.word	0x0800bc51
 800bc3c:	0800bc59 	.word	0x0800bc59
 800bc40:	0800bc61 	.word	0x0800bc61
 800bc44:	0800bc69 	.word	0x0800bc69
 800bc48:	0800bc71 	.word	0x0800bc71
 800bc4c:	0800bc79 	.word	0x0800bc79
 800bc50:	2302      	movs	r3, #2
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc56:	e01a      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc58:	2304      	movs	r3, #4
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5e:	e016      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc60:	2308      	movs	r3, #8
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc66:	e012      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc68:	2310      	movs	r3, #16
 800bc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc6e:	e00e      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc70:	2320      	movs	r3, #32
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc76:	e00a      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc78:	2340      	movs	r3, #64	@ 0x40
 800bc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc7e:	e006      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc80:	2380      	movs	r3, #128	@ 0x80
 800bc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc86:	e002      	b.n	800bc8e <UART_SetConfig+0x5a6>
 800bc88:	2380      	movs	r3, #128	@ 0x80
 800bc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a3f      	ldr	r2, [pc, #252]	@ (800bd90 <UART_SetConfig+0x6a8>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	f040 80f8 	bne.w	800be8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bc9a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bc9e:	2b20      	cmp	r3, #32
 800bca0:	dc46      	bgt.n	800bd30 <UART_SetConfig+0x648>
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	f2c0 8082 	blt.w	800bdac <UART_SetConfig+0x6c4>
 800bca8:	3b02      	subs	r3, #2
 800bcaa:	2b1e      	cmp	r3, #30
 800bcac:	d87e      	bhi.n	800bdac <UART_SetConfig+0x6c4>
 800bcae:	a201      	add	r2, pc, #4	@ (adr r2, 800bcb4 <UART_SetConfig+0x5cc>)
 800bcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb4:	0800bd37 	.word	0x0800bd37
 800bcb8:	0800bdad 	.word	0x0800bdad
 800bcbc:	0800bd3f 	.word	0x0800bd3f
 800bcc0:	0800bdad 	.word	0x0800bdad
 800bcc4:	0800bdad 	.word	0x0800bdad
 800bcc8:	0800bdad 	.word	0x0800bdad
 800bccc:	0800bd4f 	.word	0x0800bd4f
 800bcd0:	0800bdad 	.word	0x0800bdad
 800bcd4:	0800bdad 	.word	0x0800bdad
 800bcd8:	0800bdad 	.word	0x0800bdad
 800bcdc:	0800bdad 	.word	0x0800bdad
 800bce0:	0800bdad 	.word	0x0800bdad
 800bce4:	0800bdad 	.word	0x0800bdad
 800bce8:	0800bdad 	.word	0x0800bdad
 800bcec:	0800bd5f 	.word	0x0800bd5f
 800bcf0:	0800bdad 	.word	0x0800bdad
 800bcf4:	0800bdad 	.word	0x0800bdad
 800bcf8:	0800bdad 	.word	0x0800bdad
 800bcfc:	0800bdad 	.word	0x0800bdad
 800bd00:	0800bdad 	.word	0x0800bdad
 800bd04:	0800bdad 	.word	0x0800bdad
 800bd08:	0800bdad 	.word	0x0800bdad
 800bd0c:	0800bdad 	.word	0x0800bdad
 800bd10:	0800bdad 	.word	0x0800bdad
 800bd14:	0800bdad 	.word	0x0800bdad
 800bd18:	0800bdad 	.word	0x0800bdad
 800bd1c:	0800bdad 	.word	0x0800bdad
 800bd20:	0800bdad 	.word	0x0800bdad
 800bd24:	0800bdad 	.word	0x0800bdad
 800bd28:	0800bdad 	.word	0x0800bdad
 800bd2c:	0800bd9f 	.word	0x0800bd9f
 800bd30:	2b40      	cmp	r3, #64	@ 0x40
 800bd32:	d037      	beq.n	800bda4 <UART_SetConfig+0x6bc>
 800bd34:	e03a      	b.n	800bdac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bd36:	f7fd f93b 	bl	8008fb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800bd3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd3c:	e03c      	b.n	800bdb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fd f94a 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd4c:	e034      	b.n	800bdb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd4e:	f107 0318 	add.w	r3, r7, #24
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fd fa96 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd5c:	e02c      	b.n	800bdb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd5e:	4b09      	ldr	r3, [pc, #36]	@ (800bd84 <UART_SetConfig+0x69c>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 0320 	and.w	r3, r3, #32
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d016      	beq.n	800bd98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd6a:	4b06      	ldr	r3, [pc, #24]	@ (800bd84 <UART_SetConfig+0x69c>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	08db      	lsrs	r3, r3, #3
 800bd70:	f003 0303 	and.w	r3, r3, #3
 800bd74:	4a07      	ldr	r2, [pc, #28]	@ (800bd94 <UART_SetConfig+0x6ac>)
 800bd76:	fa22 f303 	lsr.w	r3, r2, r3
 800bd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd7c:	e01c      	b.n	800bdb8 <UART_SetConfig+0x6d0>
 800bd7e:	bf00      	nop
 800bd80:	40011400 	.word	0x40011400
 800bd84:	58024400 	.word	0x58024400
 800bd88:	40007800 	.word	0x40007800
 800bd8c:	40007c00 	.word	0x40007c00
 800bd90:	58000c00 	.word	0x58000c00
 800bd94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bd98:	4b9d      	ldr	r3, [pc, #628]	@ (800c010 <UART_SetConfig+0x928>)
 800bd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd9c:	e00c      	b.n	800bdb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd9e:	4b9d      	ldr	r3, [pc, #628]	@ (800c014 <UART_SetConfig+0x92c>)
 800bda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bda2:	e009      	b.n	800bdb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bda4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdaa:	e005      	b.n	800bdb8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bdac:	2300      	movs	r3, #0
 800bdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bdb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bdb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 81de 	beq.w	800c17c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc4:	4a94      	ldr	r2, [pc, #592]	@ (800c018 <UART_SetConfig+0x930>)
 800bdc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdce:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdd2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	685a      	ldr	r2, [r3, #4]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	005b      	lsls	r3, r3, #1
 800bddc:	4413      	add	r3, r2
 800bdde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d305      	bcc.n	800bdf0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d903      	bls.n	800bdf8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bdf6:	e1c1      	b.n	800c17c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	60bb      	str	r3, [r7, #8]
 800bdfe:	60fa      	str	r2, [r7, #12]
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be04:	4a84      	ldr	r2, [pc, #528]	@ (800c018 <UART_SetConfig+0x930>)
 800be06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	2200      	movs	r2, #0
 800be0e:	603b      	str	r3, [r7, #0]
 800be10:	607a      	str	r2, [r7, #4]
 800be12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800be1a:	f7f4 fab9 	bl	8000390 <__aeabi_uldivmod>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4610      	mov	r0, r2
 800be24:	4619      	mov	r1, r3
 800be26:	f04f 0200 	mov.w	r2, #0
 800be2a:	f04f 0300 	mov.w	r3, #0
 800be2e:	020b      	lsls	r3, r1, #8
 800be30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be34:	0202      	lsls	r2, r0, #8
 800be36:	6979      	ldr	r1, [r7, #20]
 800be38:	6849      	ldr	r1, [r1, #4]
 800be3a:	0849      	lsrs	r1, r1, #1
 800be3c:	2000      	movs	r0, #0
 800be3e:	460c      	mov	r4, r1
 800be40:	4605      	mov	r5, r0
 800be42:	eb12 0804 	adds.w	r8, r2, r4
 800be46:	eb43 0905 	adc.w	r9, r3, r5
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	2200      	movs	r2, #0
 800be50:	469a      	mov	sl, r3
 800be52:	4693      	mov	fp, r2
 800be54:	4652      	mov	r2, sl
 800be56:	465b      	mov	r3, fp
 800be58:	4640      	mov	r0, r8
 800be5a:	4649      	mov	r1, r9
 800be5c:	f7f4 fa98 	bl	8000390 <__aeabi_uldivmod>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4613      	mov	r3, r2
 800be66:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be6e:	d308      	bcc.n	800be82 <UART_SetConfig+0x79a>
 800be70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be76:	d204      	bcs.n	800be82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be7e:	60da      	str	r2, [r3, #12]
 800be80:	e17c      	b.n	800c17c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800be88:	e178      	b.n	800c17c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be92:	f040 80c5 	bne.w	800c020 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800be96:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	dc48      	bgt.n	800bf30 <UART_SetConfig+0x848>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	db7b      	blt.n	800bf9a <UART_SetConfig+0x8b2>
 800bea2:	2b20      	cmp	r3, #32
 800bea4:	d879      	bhi.n	800bf9a <UART_SetConfig+0x8b2>
 800bea6:	a201      	add	r2, pc, #4	@ (adr r2, 800beac <UART_SetConfig+0x7c4>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bf37 	.word	0x0800bf37
 800beb0:	0800bf3f 	.word	0x0800bf3f
 800beb4:	0800bf9b 	.word	0x0800bf9b
 800beb8:	0800bf9b 	.word	0x0800bf9b
 800bebc:	0800bf47 	.word	0x0800bf47
 800bec0:	0800bf9b 	.word	0x0800bf9b
 800bec4:	0800bf9b 	.word	0x0800bf9b
 800bec8:	0800bf9b 	.word	0x0800bf9b
 800becc:	0800bf57 	.word	0x0800bf57
 800bed0:	0800bf9b 	.word	0x0800bf9b
 800bed4:	0800bf9b 	.word	0x0800bf9b
 800bed8:	0800bf9b 	.word	0x0800bf9b
 800bedc:	0800bf9b 	.word	0x0800bf9b
 800bee0:	0800bf9b 	.word	0x0800bf9b
 800bee4:	0800bf9b 	.word	0x0800bf9b
 800bee8:	0800bf9b 	.word	0x0800bf9b
 800beec:	0800bf67 	.word	0x0800bf67
 800bef0:	0800bf9b 	.word	0x0800bf9b
 800bef4:	0800bf9b 	.word	0x0800bf9b
 800bef8:	0800bf9b 	.word	0x0800bf9b
 800befc:	0800bf9b 	.word	0x0800bf9b
 800bf00:	0800bf9b 	.word	0x0800bf9b
 800bf04:	0800bf9b 	.word	0x0800bf9b
 800bf08:	0800bf9b 	.word	0x0800bf9b
 800bf0c:	0800bf9b 	.word	0x0800bf9b
 800bf10:	0800bf9b 	.word	0x0800bf9b
 800bf14:	0800bf9b 	.word	0x0800bf9b
 800bf18:	0800bf9b 	.word	0x0800bf9b
 800bf1c:	0800bf9b 	.word	0x0800bf9b
 800bf20:	0800bf9b 	.word	0x0800bf9b
 800bf24:	0800bf9b 	.word	0x0800bf9b
 800bf28:	0800bf9b 	.word	0x0800bf9b
 800bf2c:	0800bf8d 	.word	0x0800bf8d
 800bf30:	2b40      	cmp	r3, #64	@ 0x40
 800bf32:	d02e      	beq.n	800bf92 <UART_SetConfig+0x8aa>
 800bf34:	e031      	b.n	800bf9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf36:	f7fb f885 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 800bf3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf3c:	e033      	b.n	800bfa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf3e:	f7fb f897 	bl	8007070 <HAL_RCC_GetPCLK2Freq>
 800bf42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf44:	e02f      	b.n	800bfa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fd f846 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf54:	e027      	b.n	800bfa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf56:	f107 0318 	add.w	r3, r7, #24
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fd f992 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf64:	e01f      	b.n	800bfa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf66:	4b2d      	ldr	r3, [pc, #180]	@ (800c01c <UART_SetConfig+0x934>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 0320 	and.w	r3, r3, #32
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d009      	beq.n	800bf86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf72:	4b2a      	ldr	r3, [pc, #168]	@ (800c01c <UART_SetConfig+0x934>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	08db      	lsrs	r3, r3, #3
 800bf78:	f003 0303 	and.w	r3, r3, #3
 800bf7c:	4a24      	ldr	r2, [pc, #144]	@ (800c010 <UART_SetConfig+0x928>)
 800bf7e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf84:	e00f      	b.n	800bfa6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bf86:	4b22      	ldr	r3, [pc, #136]	@ (800c010 <UART_SetConfig+0x928>)
 800bf88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf8a:	e00c      	b.n	800bfa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf8c:	4b21      	ldr	r3, [pc, #132]	@ (800c014 <UART_SetConfig+0x92c>)
 800bf8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf90:	e009      	b.n	800bfa6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf98:	e005      	b.n	800bfa6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bfa4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bfa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	f000 80e7 	beq.w	800c17c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb2:	4a19      	ldr	r2, [pc, #100]	@ (800c018 <UART_SetConfig+0x930>)
 800bfb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfb8:	461a      	mov	r2, r3
 800bfba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfbc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bfc0:	005a      	lsls	r2, r3, #1
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	085b      	lsrs	r3, r3, #1
 800bfc8:	441a      	add	r2, r3
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd6:	2b0f      	cmp	r3, #15
 800bfd8:	d916      	bls.n	800c008 <UART_SetConfig+0x920>
 800bfda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bfe0:	d212      	bcs.n	800c008 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	f023 030f 	bic.w	r3, r3, #15
 800bfea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bfec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfee:	085b      	lsrs	r3, r3, #1
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	f003 0307 	and.w	r3, r3, #7
 800bff6:	b29a      	uxth	r2, r3
 800bff8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bffa:	4313      	orrs	r3, r2
 800bffc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c004:	60da      	str	r2, [r3, #12]
 800c006:	e0b9      	b.n	800c17c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c00e:	e0b5      	b.n	800c17c <UART_SetConfig+0xa94>
 800c010:	03d09000 	.word	0x03d09000
 800c014:	003d0900 	.word	0x003d0900
 800c018:	0800e89c 	.word	0x0800e89c
 800c01c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c020:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c024:	2b20      	cmp	r3, #32
 800c026:	dc49      	bgt.n	800c0bc <UART_SetConfig+0x9d4>
 800c028:	2b00      	cmp	r3, #0
 800c02a:	db7c      	blt.n	800c126 <UART_SetConfig+0xa3e>
 800c02c:	2b20      	cmp	r3, #32
 800c02e:	d87a      	bhi.n	800c126 <UART_SetConfig+0xa3e>
 800c030:	a201      	add	r2, pc, #4	@ (adr r2, 800c038 <UART_SetConfig+0x950>)
 800c032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c036:	bf00      	nop
 800c038:	0800c0c3 	.word	0x0800c0c3
 800c03c:	0800c0cb 	.word	0x0800c0cb
 800c040:	0800c127 	.word	0x0800c127
 800c044:	0800c127 	.word	0x0800c127
 800c048:	0800c0d3 	.word	0x0800c0d3
 800c04c:	0800c127 	.word	0x0800c127
 800c050:	0800c127 	.word	0x0800c127
 800c054:	0800c127 	.word	0x0800c127
 800c058:	0800c0e3 	.word	0x0800c0e3
 800c05c:	0800c127 	.word	0x0800c127
 800c060:	0800c127 	.word	0x0800c127
 800c064:	0800c127 	.word	0x0800c127
 800c068:	0800c127 	.word	0x0800c127
 800c06c:	0800c127 	.word	0x0800c127
 800c070:	0800c127 	.word	0x0800c127
 800c074:	0800c127 	.word	0x0800c127
 800c078:	0800c0f3 	.word	0x0800c0f3
 800c07c:	0800c127 	.word	0x0800c127
 800c080:	0800c127 	.word	0x0800c127
 800c084:	0800c127 	.word	0x0800c127
 800c088:	0800c127 	.word	0x0800c127
 800c08c:	0800c127 	.word	0x0800c127
 800c090:	0800c127 	.word	0x0800c127
 800c094:	0800c127 	.word	0x0800c127
 800c098:	0800c127 	.word	0x0800c127
 800c09c:	0800c127 	.word	0x0800c127
 800c0a0:	0800c127 	.word	0x0800c127
 800c0a4:	0800c127 	.word	0x0800c127
 800c0a8:	0800c127 	.word	0x0800c127
 800c0ac:	0800c127 	.word	0x0800c127
 800c0b0:	0800c127 	.word	0x0800c127
 800c0b4:	0800c127 	.word	0x0800c127
 800c0b8:	0800c119 	.word	0x0800c119
 800c0bc:	2b40      	cmp	r3, #64	@ 0x40
 800c0be:	d02e      	beq.n	800c11e <UART_SetConfig+0xa36>
 800c0c0:	e031      	b.n	800c126 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0c2:	f7fa ffbf 	bl	8007044 <HAL_RCC_GetPCLK1Freq>
 800c0c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c0c8:	e033      	b.n	800c132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c0ca:	f7fa ffd1 	bl	8007070 <HAL_RCC_GetPCLK2Freq>
 800c0ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c0d0:	e02f      	b.n	800c132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fc ff80 	bl	8008fdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0e0:	e027      	b.n	800c132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0e2:	f107 0318 	add.w	r3, r7, #24
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fd f8cc 	bl	8009284 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0f0:	e01f      	b.n	800c132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0f2:	4b2d      	ldr	r3, [pc, #180]	@ (800c1a8 <UART_SetConfig+0xac0>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0320 	and.w	r3, r3, #32
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d009      	beq.n	800c112 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0fe:	4b2a      	ldr	r3, [pc, #168]	@ (800c1a8 <UART_SetConfig+0xac0>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	08db      	lsrs	r3, r3, #3
 800c104:	f003 0303 	and.w	r3, r3, #3
 800c108:	4a28      	ldr	r2, [pc, #160]	@ (800c1ac <UART_SetConfig+0xac4>)
 800c10a:	fa22 f303 	lsr.w	r3, r2, r3
 800c10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c110:	e00f      	b.n	800c132 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c112:	4b26      	ldr	r3, [pc, #152]	@ (800c1ac <UART_SetConfig+0xac4>)
 800c114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c116:	e00c      	b.n	800c132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c118:	4b25      	ldr	r3, [pc, #148]	@ (800c1b0 <UART_SetConfig+0xac8>)
 800c11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c11c:	e009      	b.n	800c132 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c11e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c124:	e005      	b.n	800c132 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c130:	bf00      	nop
    }

    if (pclk != 0U)
 800c132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c134:	2b00      	cmp	r3, #0
 800c136:	d021      	beq.n	800c17c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13c:	4a1d      	ldr	r2, [pc, #116]	@ (800c1b4 <UART_SetConfig+0xacc>)
 800c13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c142:	461a      	mov	r2, r3
 800c144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c146:	fbb3 f2f2 	udiv	r2, r3, r2
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	085b      	lsrs	r3, r3, #1
 800c150:	441a      	add	r2, r3
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	fbb2 f3f3 	udiv	r3, r2, r3
 800c15a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15e:	2b0f      	cmp	r3, #15
 800c160:	d909      	bls.n	800c176 <UART_SetConfig+0xa8e>
 800c162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c168:	d205      	bcs.n	800c176 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	60da      	str	r2, [r3, #12]
 800c174:	e002      	b.n	800c17c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	2201      	movs	r2, #1
 800c180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2201      	movs	r2, #1
 800c188:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	2200      	movs	r2, #0
 800c190:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2200      	movs	r2, #0
 800c196:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c198:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3748      	adds	r7, #72	@ 0x48
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1a6:	bf00      	nop
 800c1a8:	58024400 	.word	0x58024400
 800c1ac:	03d09000 	.word	0x03d09000
 800c1b0:	003d0900 	.word	0x003d0900
 800c1b4:	0800e89c 	.word	0x0800e89c

0800c1b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c4:	f003 0308 	and.w	r3, r3, #8
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d00a      	beq.n	800c1e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	430a      	orrs	r2, r1
 800c1e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d00a      	beq.n	800c204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	430a      	orrs	r2, r1
 800c202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d00a      	beq.n	800c226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	430a      	orrs	r2, r1
 800c224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c22a:	f003 0304 	and.w	r3, r3, #4
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d00a      	beq.n	800c248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	430a      	orrs	r2, r1
 800c246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c24c:	f003 0310 	and.w	r3, r3, #16
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00a      	beq.n	800c26a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	430a      	orrs	r2, r1
 800c268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c26e:	f003 0320 	and.w	r3, r3, #32
 800c272:	2b00      	cmp	r3, #0
 800c274:	d00a      	beq.n	800c28c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	430a      	orrs	r2, r1
 800c28a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c294:	2b00      	cmp	r3, #0
 800c296:	d01a      	beq.n	800c2ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	430a      	orrs	r2, r1
 800c2ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2b6:	d10a      	bne.n	800c2ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	430a      	orrs	r2, r1
 800c2cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00a      	beq.n	800c2f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	430a      	orrs	r2, r1
 800c2ee:	605a      	str	r2, [r3, #4]
  }
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b098      	sub	sp, #96	@ 0x60
 800c300:	af02      	add	r7, sp, #8
 800c302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c30c:	f7f5 fd3a 	bl	8001d84 <HAL_GetTick>
 800c310:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 0308 	and.w	r3, r3, #8
 800c31c:	2b08      	cmp	r3, #8
 800c31e:	d12f      	bne.n	800c380 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c320:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c328:	2200      	movs	r2, #0
 800c32a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f88e 	bl	800c450 <UART_WaitOnFlagUntilTimeout>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d022      	beq.n	800c380 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c342:	e853 3f00 	ldrex	r3, [r3]
 800c346:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c34a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c34e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	461a      	mov	r2, r3
 800c356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c358:	647b      	str	r3, [r7, #68]	@ 0x44
 800c35a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c35e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e6      	bne.n	800c33a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2220      	movs	r2, #32
 800c370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	e063      	b.n	800c448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0304 	and.w	r3, r3, #4
 800c38a:	2b04      	cmp	r3, #4
 800c38c:	d149      	bne.n	800c422 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c38e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c396:	2200      	movs	r2, #0
 800c398:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 f857 	bl	800c450 <UART_WaitOnFlagUntilTimeout>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d03c      	beq.n	800c422 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b0:	e853 3f00 	ldrex	r3, [r3]
 800c3b4:	623b      	str	r3, [r7, #32]
   return(result);
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c3bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	461a      	mov	r2, r3
 800c3c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c3cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3ce:	e841 2300 	strex	r3, r2, [r1]
 800c3d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c3d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1e6      	bne.n	800c3a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3308      	adds	r3, #8
 800c3e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	e853 3f00 	ldrex	r3, [r3]
 800c3e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f023 0301 	bic.w	r3, r3, #1
 800c3f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3fa:	61fa      	str	r2, [r7, #28]
 800c3fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	69b9      	ldr	r1, [r7, #24]
 800c400:	69fa      	ldr	r2, [r7, #28]
 800c402:	e841 2300 	strex	r3, r2, [r1]
 800c406:	617b      	str	r3, [r7, #20]
   return(result);
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e5      	bne.n	800c3da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2220      	movs	r2, #32
 800c412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c41e:	2303      	movs	r3, #3
 800c420:	e012      	b.n	800c448 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2220      	movs	r2, #32
 800c426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2220      	movs	r2, #32
 800c42e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3758      	adds	r7, #88	@ 0x58
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	603b      	str	r3, [r7, #0]
 800c45c:	4613      	mov	r3, r2
 800c45e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c460:	e04f      	b.n	800c502 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c468:	d04b      	beq.n	800c502 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c46a:	f7f5 fc8b 	bl	8001d84 <HAL_GetTick>
 800c46e:	4602      	mov	r2, r0
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	69ba      	ldr	r2, [r7, #24]
 800c476:	429a      	cmp	r2, r3
 800c478:	d302      	bcc.n	800c480 <UART_WaitOnFlagUntilTimeout+0x30>
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c480:	2303      	movs	r3, #3
 800c482:	e04e      	b.n	800c522 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 0304 	and.w	r3, r3, #4
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d037      	beq.n	800c502 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	2b80      	cmp	r3, #128	@ 0x80
 800c496:	d034      	beq.n	800c502 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b40      	cmp	r3, #64	@ 0x40
 800c49c:	d031      	beq.n	800c502 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	69db      	ldr	r3, [r3, #28]
 800c4a4:	f003 0308 	and.w	r3, r3, #8
 800c4a8:	2b08      	cmp	r3, #8
 800c4aa:	d110      	bne.n	800c4ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2208      	movs	r2, #8
 800c4b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f000 f95b 	bl	800c770 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2208      	movs	r2, #8
 800c4be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e029      	b.n	800c522 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c4d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c4dc:	d111      	bne.n	800c502 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c4e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f000 f941 	bl	800c770 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2220      	movs	r2, #32
 800c4f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e00f      	b.n	800c522 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	69da      	ldr	r2, [r3, #28]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	4013      	ands	r3, r2
 800c50c:	68ba      	ldr	r2, [r7, #8]
 800c50e:	429a      	cmp	r2, r3
 800c510:	bf0c      	ite	eq
 800c512:	2301      	moveq	r3, #1
 800c514:	2300      	movne	r3, #0
 800c516:	b2db      	uxtb	r3, r3
 800c518:	461a      	mov	r2, r3
 800c51a:	79fb      	ldrb	r3, [r7, #7]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d0a0      	beq.n	800c462 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
	...

0800c52c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b0a3      	sub	sp, #140	@ 0x8c
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	4613      	mov	r3, r2
 800c538:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	88fa      	ldrh	r2, [r7, #6]
 800c544:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	88fa      	ldrh	r2, [r7, #6]
 800c54c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	2200      	movs	r2, #0
 800c554:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c55e:	d10e      	bne.n	800c57e <UART_Start_Receive_IT+0x52>
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	691b      	ldr	r3, [r3, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d105      	bne.n	800c574 <UART_Start_Receive_IT+0x48>
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c56e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c572:	e02d      	b.n	800c5d0 <UART_Start_Receive_IT+0xa4>
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	22ff      	movs	r2, #255	@ 0xff
 800c578:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c57c:	e028      	b.n	800c5d0 <UART_Start_Receive_IT+0xa4>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10d      	bne.n	800c5a2 <UART_Start_Receive_IT+0x76>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d104      	bne.n	800c598 <UART_Start_Receive_IT+0x6c>
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	22ff      	movs	r2, #255	@ 0xff
 800c592:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c596:	e01b      	b.n	800c5d0 <UART_Start_Receive_IT+0xa4>
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	227f      	movs	r2, #127	@ 0x7f
 800c59c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5a0:	e016      	b.n	800c5d0 <UART_Start_Receive_IT+0xa4>
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5aa:	d10d      	bne.n	800c5c8 <UART_Start_Receive_IT+0x9c>
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	691b      	ldr	r3, [r3, #16]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d104      	bne.n	800c5be <UART_Start_Receive_IT+0x92>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	227f      	movs	r2, #127	@ 0x7f
 800c5b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5bc:	e008      	b.n	800c5d0 <UART_Start_Receive_IT+0xa4>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	223f      	movs	r2, #63	@ 0x3f
 800c5c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800c5c6:	e003      	b.n	800c5d0 <UART_Start_Receive_IT+0xa4>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2222      	movs	r2, #34	@ 0x22
 800c5dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	3308      	adds	r3, #8
 800c5e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c5ea:	e853 3f00 	ldrex	r3, [r3]
 800c5ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c5f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c5f2:	f043 0301 	orr.w	r3, r3, #1
 800c5f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3308      	adds	r3, #8
 800c600:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c604:	673a      	str	r2, [r7, #112]	@ 0x70
 800c606:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c608:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c60a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c60c:	e841 2300 	strex	r3, r2, [r1]
 800c610:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800c612:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1e3      	bne.n	800c5e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c61c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c620:	d14f      	bne.n	800c6c2 <UART_Start_Receive_IT+0x196>
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800c628:	88fa      	ldrh	r2, [r7, #6]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d349      	bcc.n	800c6c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c636:	d107      	bne.n	800c648 <UART_Start_Receive_IT+0x11c>
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	691b      	ldr	r3, [r3, #16]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d103      	bne.n	800c648 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	4a47      	ldr	r2, [pc, #284]	@ (800c760 <UART_Start_Receive_IT+0x234>)
 800c644:	675a      	str	r2, [r3, #116]	@ 0x74
 800c646:	e002      	b.n	800c64e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4a46      	ldr	r2, [pc, #280]	@ (800c764 <UART_Start_Receive_IT+0x238>)
 800c64c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d01a      	beq.n	800c68c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c65e:	e853 3f00 	ldrex	r3, [r3]
 800c662:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c664:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c666:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c66a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c678:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c67a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c67e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c680:	e841 2300 	strex	r3, r2, [r1]
 800c684:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800c686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1e4      	bne.n	800c656 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	3308      	adds	r3, #8
 800c692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c696:	e853 3f00 	ldrex	r3, [r3]
 800c69a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c69e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c6a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	3308      	adds	r3, #8
 800c6aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c6ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c6ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c6b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6b4:	e841 2300 	strex	r3, r2, [r1]
 800c6b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c6ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1e5      	bne.n	800c68c <UART_Start_Receive_IT+0x160>
 800c6c0:	e046      	b.n	800c750 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6ca:	d107      	bne.n	800c6dc <UART_Start_Receive_IT+0x1b0>
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d103      	bne.n	800c6dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	4a24      	ldr	r2, [pc, #144]	@ (800c768 <UART_Start_Receive_IT+0x23c>)
 800c6d8:	675a      	str	r2, [r3, #116]	@ 0x74
 800c6da:	e002      	b.n	800c6e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	4a23      	ldr	r2, [pc, #140]	@ (800c76c <UART_Start_Receive_IT+0x240>)
 800c6e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d019      	beq.n	800c71e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f2:	e853 3f00 	ldrex	r3, [r3]
 800c6f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800c6fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	461a      	mov	r2, r3
 800c706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c708:	637b      	str	r3, [r7, #52]	@ 0x34
 800c70a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c70e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c710:	e841 2300 	strex	r3, r2, [r1]
 800c714:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1e6      	bne.n	800c6ea <UART_Start_Receive_IT+0x1be>
 800c71c:	e018      	b.n	800c750 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	e853 3f00 	ldrex	r3, [r3]
 800c72a:	613b      	str	r3, [r7, #16]
   return(result);
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	f043 0320 	orr.w	r3, r3, #32
 800c732:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	461a      	mov	r2, r3
 800c73a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c73c:	623b      	str	r3, [r7, #32]
 800c73e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c740:	69f9      	ldr	r1, [r7, #28]
 800c742:	6a3a      	ldr	r2, [r7, #32]
 800c744:	e841 2300 	strex	r3, r2, [r1]
 800c748:	61bb      	str	r3, [r7, #24]
   return(result);
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1e6      	bne.n	800c71e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c750:	2300      	movs	r3, #0
}
 800c752:	4618      	mov	r0, r3
 800c754:	378c      	adds	r7, #140	@ 0x8c
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop
 800c760:	0800d2d5 	.word	0x0800d2d5
 800c764:	0800cf75 	.word	0x0800cf75
 800c768:	0800cdbd 	.word	0x0800cdbd
 800c76c:	0800cc05 	.word	0x0800cc05

0800c770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c770:	b480      	push	{r7}
 800c772:	b095      	sub	sp, #84	@ 0x54
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c780:	e853 3f00 	ldrex	r3, [r3]
 800c784:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c788:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c78c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c796:	643b      	str	r3, [r7, #64]	@ 0x40
 800c798:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c79a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c79c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c79e:	e841 2300 	strex	r3, r2, [r1]
 800c7a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1e6      	bne.n	800c778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	e853 3f00 	ldrex	r3, [r3]
 800c7b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7ba:	69fa      	ldr	r2, [r7, #28]
 800c7bc:	4b1e      	ldr	r3, [pc, #120]	@ (800c838 <UART_EndRxTransfer+0xc8>)
 800c7be:	4013      	ands	r3, r2
 800c7c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3308      	adds	r3, #8
 800c7c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7d2:	e841 2300 	strex	r3, r2, [r1]
 800c7d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d1e5      	bne.n	800c7aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7e2:	2b01      	cmp	r3, #1
 800c7e4:	d118      	bne.n	800c818 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	e853 3f00 	ldrex	r3, [r3]
 800c7f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	f023 0310 	bic.w	r3, r3, #16
 800c7fa:	647b      	str	r3, [r7, #68]	@ 0x44
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	461a      	mov	r2, r3
 800c802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c804:	61bb      	str	r3, [r7, #24]
 800c806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c808:	6979      	ldr	r1, [r7, #20]
 800c80a:	69ba      	ldr	r2, [r7, #24]
 800c80c:	e841 2300 	strex	r3, r2, [r1]
 800c810:	613b      	str	r3, [r7, #16]
   return(result);
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1e6      	bne.n	800c7e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2220      	movs	r2, #32
 800c81c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2200      	movs	r2, #0
 800c82a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c82c:	bf00      	nop
 800c82e:	3754      	adds	r7, #84	@ 0x54
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr
 800c838:	effffffe 	.word	0xeffffffe

0800c83c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c848:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f7fe ff2e 	bl	800b6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c868:	b480      	push	{r7}
 800c86a:	b08f      	sub	sp, #60	@ 0x3c
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c876:	2b21      	cmp	r3, #33	@ 0x21
 800c878:	d14c      	bne.n	800c914 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c880:	b29b      	uxth	r3, r3
 800c882:	2b00      	cmp	r3, #0
 800c884:	d132      	bne.n	800c8ec <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	e853 3f00 	ldrex	r3, [r3]
 800c892:	61fb      	str	r3, [r7, #28]
   return(result);
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c89a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8a6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8ac:	e841 2300 	strex	r3, r2, [r1]
 800c8b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e6      	bne.n	800c886 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	e853 3f00 	ldrex	r3, [r3]
 800c8c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d6:	61bb      	str	r3, [r7, #24]
 800c8d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8da:	6979      	ldr	r1, [r7, #20]
 800c8dc:	69ba      	ldr	r2, [r7, #24]
 800c8de:	e841 2300 	strex	r3, r2, [r1]
 800c8e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1e6      	bne.n	800c8b8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c8ea:	e013      	b.n	800c914 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8f0:	781a      	ldrb	r2, [r3, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8fc:	1c5a      	adds	r2, r3, #1
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c908:	b29b      	uxth	r3, r3
 800c90a:	3b01      	subs	r3, #1
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800c914:	bf00      	nop
 800c916:	373c      	adds	r7, #60	@ 0x3c
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c920:	b480      	push	{r7}
 800c922:	b091      	sub	sp, #68	@ 0x44
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c92e:	2b21      	cmp	r3, #33	@ 0x21
 800c930:	d151      	bne.n	800c9d6 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c938:	b29b      	uxth	r3, r3
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d132      	bne.n	800c9a4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c946:	e853 3f00 	ldrex	r3, [r3]
 800c94a:	623b      	str	r3, [r7, #32]
   return(result);
 800c94c:	6a3b      	ldr	r3, [r7, #32]
 800c94e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c952:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	461a      	mov	r2, r3
 800c95a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c95c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c95e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c960:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c962:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c964:	e841 2300 	strex	r3, r2, [r1]
 800c968:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c96a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1e6      	bne.n	800c93e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	e853 3f00 	ldrex	r3, [r3]
 800c97c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c984:	637b      	str	r3, [r7, #52]	@ 0x34
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	461a      	mov	r2, r3
 800c98c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c98e:	61fb      	str	r3, [r7, #28]
 800c990:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c992:	69b9      	ldr	r1, [r7, #24]
 800c994:	69fa      	ldr	r2, [r7, #28]
 800c996:	e841 2300 	strex	r3, r2, [r1]
 800c99a:	617b      	str	r3, [r7, #20]
   return(result);
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1e6      	bne.n	800c970 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c9a2:	e018      	b.n	800c9d6 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9b8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9be:	1c9a      	adds	r2, r3, #2
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800c9d6:	bf00      	nop
 800c9d8:	3744      	adds	r7, #68	@ 0x44
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b091      	sub	sp, #68	@ 0x44
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9f0:	2b21      	cmp	r3, #33	@ 0x21
 800c9f2:	d160      	bne.n	800cab6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c9fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c9fc:	e057      	b.n	800caae <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ca04:	b29b      	uxth	r3, r3
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d133      	bne.n	800ca72 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3308      	adds	r3, #8
 800ca10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca14:	e853 3f00 	ldrex	r3, [r3]
 800ca18:	623b      	str	r3, [r7, #32]
   return(result);
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ca20:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	3308      	adds	r3, #8
 800ca28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca2a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca32:	e841 2300 	strex	r3, r2, [r1]
 800ca36:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1e5      	bne.n	800ca0a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	e853 3f00 	ldrex	r3, [r3]
 800ca4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca5c:	61fb      	str	r3, [r7, #28]
 800ca5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca60:	69b9      	ldr	r1, [r7, #24]
 800ca62:	69fa      	ldr	r2, [r7, #28]
 800ca64:	e841 2300 	strex	r3, r2, [r1]
 800ca68:	617b      	str	r3, [r7, #20]
   return(result);
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1e6      	bne.n	800ca3e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ca70:	e021      	b.n	800cab6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	69db      	ldr	r3, [r3, #28]
 800ca78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d013      	beq.n	800caa8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca84:	781a      	ldrb	r2, [r3, #0]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800caa8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800caaa:	3b01      	subs	r3, #1
 800caac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800caae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d1a4      	bne.n	800c9fe <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800cab4:	e7ff      	b.n	800cab6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800cab6:	bf00      	nop
 800cab8:	3744      	adds	r7, #68	@ 0x44
 800caba:	46bd      	mov	sp, r7
 800cabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cac2:	b480      	push	{r7}
 800cac4:	b091      	sub	sp, #68	@ 0x44
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cad0:	2b21      	cmp	r3, #33	@ 0x21
 800cad2:	d165      	bne.n	800cba0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800cada:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800cadc:	e05c      	b.n	800cb98 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d133      	bne.n	800cb52 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	3308      	adds	r3, #8
 800caf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caf2:	6a3b      	ldr	r3, [r7, #32]
 800caf4:	e853 3f00 	ldrex	r3, [r3]
 800caf8:	61fb      	str	r3, [r7, #28]
   return(result);
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cb00:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	3308      	adds	r3, #8
 800cb08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb12:	e841 2300 	strex	r3, r2, [r1]
 800cb16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1e5      	bne.n	800caea <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	e853 3f00 	ldrex	r3, [r3]
 800cb2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb32:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3c:	61bb      	str	r3, [r7, #24]
 800cb3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb40:	6979      	ldr	r1, [r7, #20]
 800cb42:	69ba      	ldr	r2, [r7, #24]
 800cb44:	e841 2300 	strex	r3, r2, [r1]
 800cb48:	613b      	str	r3, [r7, #16]
   return(result);
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d1e6      	bne.n	800cb1e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800cb50:	e026      	b.n	800cba0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	69db      	ldr	r3, [r3, #28]
 800cb58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d018      	beq.n	800cb92 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb64:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb68:	881b      	ldrh	r3, [r3, #0]
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb74:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb7a:	1c9a      	adds	r2, r3, #2
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cb92:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cb94:	3b01      	subs	r3, #1
 800cb96:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800cb98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d19f      	bne.n	800cade <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800cb9e:	e7ff      	b.n	800cba0 <UART_TxISR_16BIT_FIFOEN+0xde>
 800cba0:	bf00      	nop
 800cba2:	3744      	adds	r7, #68	@ 0x44
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr

0800cbac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b088      	sub	sp, #32
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	e853 3f00 	ldrex	r3, [r3]
 800cbc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbc8:	61fb      	str	r3, [r7, #28]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	461a      	mov	r2, r3
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	61bb      	str	r3, [r7, #24]
 800cbd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd6:	6979      	ldr	r1, [r7, #20]
 800cbd8:	69ba      	ldr	r2, [r7, #24]
 800cbda:	e841 2300 	strex	r3, r2, [r1]
 800cbde:	613b      	str	r3, [r7, #16]
   return(result);
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1e6      	bne.n	800cbb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2220      	movs	r2, #32
 800cbea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7fe fd57 	bl	800b6a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbfa:	bf00      	nop
 800cbfc:	3720      	adds	r7, #32
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b09c      	sub	sp, #112	@ 0x70
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cc12:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc1c:	2b22      	cmp	r3, #34	@ 0x22
 800cc1e:	f040 80be 	bne.w	800cd9e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cc30:	b2d9      	uxtb	r1, r3
 800cc32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc3c:	400a      	ands	r2, r1
 800cc3e:	b2d2      	uxtb	r2, r2
 800cc40:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc46:	1c5a      	adds	r2, r3, #1
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	3b01      	subs	r3, #1
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f040 80a1 	bne.w	800cdae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc74:	e853 3f00 	ldrex	r3, [r3]
 800cc78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cc7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	461a      	mov	r2, r3
 800cc88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cc8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cc90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc92:	e841 2300 	strex	r3, r2, [r1]
 800cc96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cc98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e6      	bne.n	800cc6c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	3308      	adds	r3, #8
 800cca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca8:	e853 3f00 	ldrex	r3, [r3]
 800ccac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb0:	f023 0301 	bic.w	r3, r3, #1
 800ccb4:	667b      	str	r3, [r7, #100]	@ 0x64
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	3308      	adds	r3, #8
 800ccbc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ccbe:	647a      	str	r2, [r7, #68]	@ 0x44
 800ccc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ccc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ccc6:	e841 2300 	strex	r3, r2, [r1]
 800ccca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1e5      	bne.n	800cc9e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a33      	ldr	r2, [pc, #204]	@ (800cdb8 <UART_RxISR_8BIT+0x1b4>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d01f      	beq.n	800cd30 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d018      	beq.n	800cd30 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd06:	e853 3f00 	ldrex	r3, [r3]
 800cd0a:	623b      	str	r3, [r7, #32]
   return(result);
 800cd0c:	6a3b      	ldr	r3, [r7, #32]
 800cd0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cd12:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	461a      	mov	r2, r3
 800cd1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd24:	e841 2300 	strex	r3, r2, [r1]
 800cd28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d1e6      	bne.n	800ccfe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d12e      	bne.n	800cd96 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	e853 3f00 	ldrex	r3, [r3]
 800cd4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f023 0310 	bic.w	r3, r3, #16
 800cd52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd5c:	61fb      	str	r3, [r7, #28]
 800cd5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd60:	69b9      	ldr	r1, [r7, #24]
 800cd62:	69fa      	ldr	r2, [r7, #28]
 800cd64:	e841 2300 	strex	r3, r2, [r1]
 800cd68:	617b      	str	r3, [r7, #20]
   return(result);
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e6      	bne.n	800cd3e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	69db      	ldr	r3, [r3, #28]
 800cd76:	f003 0310 	and.w	r3, r3, #16
 800cd7a:	2b10      	cmp	r3, #16
 800cd7c:	d103      	bne.n	800cd86 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2210      	movs	r2, #16
 800cd84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7fe fc9e 	bl	800b6d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd94:	e00b      	b.n	800cdae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f7f4 fa58 	bl	800124c <HAL_UART_RxCpltCallback>
}
 800cd9c:	e007      	b.n	800cdae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	699a      	ldr	r2, [r3, #24]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f042 0208 	orr.w	r2, r2, #8
 800cdac:	619a      	str	r2, [r3, #24]
}
 800cdae:	bf00      	nop
 800cdb0:	3770      	adds	r7, #112	@ 0x70
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	58000c00 	.word	0x58000c00

0800cdbc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b09c      	sub	sp, #112	@ 0x70
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cdca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdd4:	2b22      	cmp	r3, #34	@ 0x22
 800cdd6:	f040 80be 	bne.w	800cf56 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cde0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cde8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800cdea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800cdee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdf8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdfe:	1c9a      	adds	r2, r3, #2
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f040 80a1 	bne.w	800cf66 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce2c:	e853 3f00 	ldrex	r3, [r3]
 800ce30:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ce32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce38:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	461a      	mov	r2, r3
 800ce40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce42:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce44:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce4a:	e841 2300 	strex	r3, r2, [r1]
 800ce4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d1e6      	bne.n	800ce24 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	3308      	adds	r3, #8
 800ce5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce60:	e853 3f00 	ldrex	r3, [r3]
 800ce64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce68:	f023 0301 	bic.w	r3, r3, #1
 800ce6c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3308      	adds	r3, #8
 800ce74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce76:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce7e:	e841 2300 	strex	r3, r2, [r1]
 800ce82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1e5      	bne.n	800ce56 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	4a33      	ldr	r2, [pc, #204]	@ (800cf70 <UART_RxISR_16BIT+0x1b4>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d01f      	beq.n	800cee8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d018      	beq.n	800cee8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cebc:	6a3b      	ldr	r3, [r7, #32]
 800cebe:	e853 3f00 	ldrex	r3, [r3]
 800cec2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cec4:	69fb      	ldr	r3, [r7, #28]
 800cec6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ceca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	461a      	mov	r2, r3
 800ced2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ced4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ced6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ceda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cedc:	e841 2300 	strex	r3, r2, [r1]
 800cee0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d1e6      	bne.n	800ceb6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d12e      	bne.n	800cf4e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	e853 3f00 	ldrex	r3, [r3]
 800cf02:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	f023 0310 	bic.w	r3, r3, #16
 800cf0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	461a      	mov	r2, r3
 800cf12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf14:	61bb      	str	r3, [r7, #24]
 800cf16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf18:	6979      	ldr	r1, [r7, #20]
 800cf1a:	69ba      	ldr	r2, [r7, #24]
 800cf1c:	e841 2300 	strex	r3, r2, [r1]
 800cf20:	613b      	str	r3, [r7, #16]
   return(result);
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1e6      	bne.n	800cef6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	f003 0310 	and.w	r3, r3, #16
 800cf32:	2b10      	cmp	r3, #16
 800cf34:	d103      	bne.n	800cf3e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2210      	movs	r2, #16
 800cf3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7fe fbc2 	bl	800b6d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf4c:	e00b      	b.n	800cf66 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f7f4 f97c 	bl	800124c <HAL_UART_RxCpltCallback>
}
 800cf54:	e007      	b.n	800cf66 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	699a      	ldr	r2, [r3, #24]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f042 0208 	orr.w	r2, r2, #8
 800cf64:	619a      	str	r2, [r3, #24]
}
 800cf66:	bf00      	nop
 800cf68:	3770      	adds	r7, #112	@ 0x70
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	58000c00 	.word	0x58000c00

0800cf74 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b0ac      	sub	sp, #176	@ 0xb0
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cf82:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	69db      	ldr	r3, [r3, #28]
 800cf8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cfaa:	2b22      	cmp	r3, #34	@ 0x22
 800cfac:	f040 8180 	bne.w	800d2b0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800cfb6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cfba:	e123      	b.n	800d204 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cfc6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800cfca:	b2d9      	uxtb	r1, r3
 800cfcc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfd6:	400a      	ands	r2, r1
 800cfd8:	b2d2      	uxtb	r2, r2
 800cfda:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfe0:	1c5a      	adds	r2, r3, #1
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	3b01      	subs	r3, #1
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	69db      	ldr	r3, [r3, #28]
 800cffe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d006:	f003 0307 	and.w	r3, r3, #7
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d053      	beq.n	800d0b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d00e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d012:	f003 0301 	and.w	r3, r3, #1
 800d016:	2b00      	cmp	r3, #0
 800d018:	d011      	beq.n	800d03e <UART_RxISR_8BIT_FIFOEN+0xca>
 800d01a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d01e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00b      	beq.n	800d03e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2201      	movs	r2, #1
 800d02c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d034:	f043 0201 	orr.w	r2, r3, #1
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d03e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d042:	f003 0302 	and.w	r3, r3, #2
 800d046:	2b00      	cmp	r3, #0
 800d048:	d011      	beq.n	800d06e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d04a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d04e:	f003 0301 	and.w	r3, r3, #1
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00b      	beq.n	800d06e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2202      	movs	r2, #2
 800d05c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d064:	f043 0204 	orr.w	r2, r3, #4
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d06e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d072:	f003 0304 	and.w	r3, r3, #4
 800d076:	2b00      	cmp	r3, #0
 800d078:	d011      	beq.n	800d09e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d07a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d07e:	f003 0301 	and.w	r3, r3, #1
 800d082:	2b00      	cmp	r3, #0
 800d084:	d00b      	beq.n	800d09e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2204      	movs	r2, #4
 800d08c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d094:	f043 0202 	orr.w	r2, r3, #2
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d006      	beq.n	800d0b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f7fe fb07 	bl	800b6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f040 80a0 	bne.w	800d204 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d0cc:	e853 3f00 	ldrex	r3, [r3]
 800d0d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800d0d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d0d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	461a      	mov	r2, r3
 800d0e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d0e8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d0ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d0ee:	e841 2300 	strex	r3, r2, [r1]
 800d0f2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800d0f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1e4      	bne.n	800d0c4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3308      	adds	r3, #8
 800d100:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d102:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d104:	e853 3f00 	ldrex	r3, [r3]
 800d108:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800d10a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d10c:	4b6e      	ldr	r3, [pc, #440]	@ (800d2c8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d10e:	4013      	ands	r3, r2
 800d110:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3308      	adds	r3, #8
 800d11a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d11e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d120:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800d124:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d12c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e3      	bne.n	800d0fa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2220      	movs	r2, #32
 800d136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	4a60      	ldr	r2, [pc, #384]	@ (800d2cc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d021      	beq.n	800d194 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d01a      	beq.n	800d194 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d166:	e853 3f00 	ldrex	r3, [r3]
 800d16a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d16c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d16e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	461a      	mov	r2, r3
 800d17c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d180:	657b      	str	r3, [r7, #84]	@ 0x54
 800d182:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d184:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d186:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d188:	e841 2300 	strex	r3, r2, [r1]
 800d18c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d18e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1e4      	bne.n	800d15e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d130      	bne.n	800d1fe <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1aa:	e853 3f00 	ldrex	r3, [r3]
 800d1ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b2:	f023 0310 	bic.w	r3, r3, #16
 800d1b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1cc:	e841 2300 	strex	r3, r2, [r1]
 800d1d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1e4      	bne.n	800d1a2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	69db      	ldr	r3, [r3, #28]
 800d1de:	f003 0310 	and.w	r3, r3, #16
 800d1e2:	2b10      	cmp	r3, #16
 800d1e4:	d103      	bne.n	800d1ee <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2210      	movs	r2, #16
 800d1ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7fe fa6a 	bl	800b6d0 <HAL_UARTEx_RxEventCallback>
 800d1fc:	e002      	b.n	800d204 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7f4 f824 	bl	800124c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d204:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d006      	beq.n	800d21a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d20c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d210:	f003 0320 	and.w	r3, r3, #32
 800d214:	2b00      	cmp	r3, #0
 800d216:	f47f aed1 	bne.w	800cfbc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d220:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d224:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d049      	beq.n	800d2c0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d232:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d236:	429a      	cmp	r2, r3
 800d238:	d242      	bcs.n	800d2c0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	3308      	adds	r3, #8
 800d240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d242:	6a3b      	ldr	r3, [r7, #32]
 800d244:	e853 3f00 	ldrex	r3, [r3]
 800d248:	61fb      	str	r3, [r7, #28]
   return(result);
 800d24a:	69fb      	ldr	r3, [r7, #28]
 800d24c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3308      	adds	r3, #8
 800d25a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d25e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d260:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d262:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d266:	e841 2300 	strex	r3, r2, [r1]
 800d26a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d1e3      	bne.n	800d23a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a16      	ldr	r2, [pc, #88]	@ (800d2d0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d276:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	e853 3f00 	ldrex	r3, [r3]
 800d284:	60bb      	str	r3, [r7, #8]
   return(result);
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	f043 0320 	orr.w	r3, r3, #32
 800d28c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	461a      	mov	r2, r3
 800d296:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d29a:	61bb      	str	r3, [r7, #24]
 800d29c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d29e:	6979      	ldr	r1, [r7, #20]
 800d2a0:	69ba      	ldr	r2, [r7, #24]
 800d2a2:	e841 2300 	strex	r3, r2, [r1]
 800d2a6:	613b      	str	r3, [r7, #16]
   return(result);
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d1e4      	bne.n	800d278 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d2ae:	e007      	b.n	800d2c0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	699a      	ldr	r2, [r3, #24]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f042 0208 	orr.w	r2, r2, #8
 800d2be:	619a      	str	r2, [r3, #24]
}
 800d2c0:	bf00      	nop
 800d2c2:	37b0      	adds	r7, #176	@ 0xb0
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	effffffe 	.word	0xeffffffe
 800d2cc:	58000c00 	.word	0x58000c00
 800d2d0:	0800cc05 	.word	0x0800cc05

0800d2d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b0ae      	sub	sp, #184	@ 0xb8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d2e2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	69db      	ldr	r3, [r3, #28]
 800d2ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d30a:	2b22      	cmp	r3, #34	@ 0x22
 800d30c:	f040 8184 	bne.w	800d618 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d316:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d31a:	e127      	b.n	800d56c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d322:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d32a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d32e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800d332:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d336:	4013      	ands	r3, r2
 800d338:	b29a      	uxth	r2, r3
 800d33a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d33e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d344:	1c9a      	adds	r2, r3, #2
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d350:	b29b      	uxth	r3, r3
 800d352:	3b01      	subs	r3, #1
 800d354:	b29a      	uxth	r2, r3
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	69db      	ldr	r3, [r3, #28]
 800d362:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d366:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d36a:	f003 0307 	and.w	r3, r3, #7
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d053      	beq.n	800d41a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d372:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d376:	f003 0301 	and.w	r3, r3, #1
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d011      	beq.n	800d3a2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d37e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00b      	beq.n	800d3a2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2201      	movs	r2, #1
 800d390:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d398:	f043 0201 	orr.w	r2, r3, #1
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3a6:	f003 0302 	and.w	r3, r3, #2
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d011      	beq.n	800d3d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d3ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d3b2:	f003 0301 	and.w	r3, r3, #1
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00b      	beq.n	800d3d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2202      	movs	r2, #2
 800d3c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3c8:	f043 0204 	orr.w	r2, r3, #4
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d3d6:	f003 0304 	and.w	r3, r3, #4
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d011      	beq.n	800d402 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d3de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00b      	beq.n	800d402 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2204      	movs	r2, #4
 800d3f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3f8:	f043 0202 	orr.w	r2, r3, #2
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d006      	beq.n	800d41a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7fe f955 	bl	800b6bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d420:	b29b      	uxth	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	f040 80a2 	bne.w	800d56c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d42e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d430:	e853 3f00 	ldrex	r3, [r3]
 800d434:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d436:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d43c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	461a      	mov	r2, r3
 800d446:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d44a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d44e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d450:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d452:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d456:	e841 2300 	strex	r3, r2, [r1]
 800d45a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d45c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1e2      	bne.n	800d428 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3308      	adds	r3, #8
 800d468:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d46c:	e853 3f00 	ldrex	r3, [r3]
 800d470:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d472:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d474:	4b6e      	ldr	r3, [pc, #440]	@ (800d630 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d476:	4013      	ands	r3, r2
 800d478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	3308      	adds	r3, #8
 800d482:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d486:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d488:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d48c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d48e:	e841 2300 	strex	r3, r2, [r1]
 800d492:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d494:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e3      	bne.n	800d462 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2220      	movs	r2, #32
 800d49e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a60      	ldr	r2, [pc, #384]	@ (800d634 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d021      	beq.n	800d4fc <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d01a      	beq.n	800d4fc <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ce:	e853 3f00 	ldrex	r3, [r3]
 800d4d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d4d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d4da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d4e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4ea:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d4ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4f0:	e841 2300 	strex	r3, r2, [r1]
 800d4f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d4f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1e4      	bne.n	800d4c6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d500:	2b01      	cmp	r3, #1
 800d502:	d130      	bne.n	800d566 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d512:	e853 3f00 	ldrex	r3, [r3]
 800d516:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d51a:	f023 0310 	bic.w	r3, r3, #16
 800d51e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	461a      	mov	r2, r3
 800d528:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d52c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d52e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d530:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d532:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d534:	e841 2300 	strex	r3, r2, [r1]
 800d538:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d53a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1e4      	bne.n	800d50a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	69db      	ldr	r3, [r3, #28]
 800d546:	f003 0310 	and.w	r3, r3, #16
 800d54a:	2b10      	cmp	r3, #16
 800d54c:	d103      	bne.n	800d556 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	2210      	movs	r2, #16
 800d554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d55c:	4619      	mov	r1, r3
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7fe f8b6 	bl	800b6d0 <HAL_UARTEx_RxEventCallback>
 800d564:	e002      	b.n	800d56c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7f3 fe70 	bl	800124c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d56c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800d570:	2b00      	cmp	r3, #0
 800d572:	d006      	beq.n	800d582 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d574:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d578:	f003 0320 	and.w	r3, r3, #32
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f47f aecd 	bne.w	800d31c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d588:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d58c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d590:	2b00      	cmp	r3, #0
 800d592:	d049      	beq.n	800d628 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d59a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d242      	bcs.n	800d628 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	3308      	adds	r3, #8
 800d5a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ac:	e853 3f00 	ldrex	r3, [r3]
 800d5b0:	623b      	str	r3, [r7, #32]
   return(result);
 800d5b2:	6a3b      	ldr	r3, [r7, #32]
 800d5b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d5b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	3308      	adds	r3, #8
 800d5c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800d5c6:	633a      	str	r2, [r7, #48]	@ 0x30
 800d5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5ce:	e841 2300 	strex	r3, r2, [r1]
 800d5d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d1e3      	bne.n	800d5a2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	4a16      	ldr	r2, [pc, #88]	@ (800d638 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d5de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e6:	693b      	ldr	r3, [r7, #16]
 800d5e8:	e853 3f00 	ldrex	r3, [r3]
 800d5ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f043 0320 	orr.w	r3, r3, #32
 800d5f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d602:	61fb      	str	r3, [r7, #28]
 800d604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d606:	69b9      	ldr	r1, [r7, #24]
 800d608:	69fa      	ldr	r2, [r7, #28]
 800d60a:	e841 2300 	strex	r3, r2, [r1]
 800d60e:	617b      	str	r3, [r7, #20]
   return(result);
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d1e4      	bne.n	800d5e0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d616:	e007      	b.n	800d628 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	699a      	ldr	r2, [r3, #24]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f042 0208 	orr.w	r2, r2, #8
 800d626:	619a      	str	r2, [r3, #24]
}
 800d628:	bf00      	nop
 800d62a:	37b8      	adds	r7, #184	@ 0xb8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	effffffe 	.word	0xeffffffe
 800d634:	58000c00 	.word	0x58000c00
 800d638:	0800cdbd 	.word	0x0800cdbd

0800d63c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d644:	bf00      	nop
 800d646:	370c      	adds	r7, #12
 800d648:	46bd      	mov	sp, r7
 800d64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64e:	4770      	bx	lr

0800d650 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr

0800d664 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d678:	b480      	push	{r7}
 800d67a:	b085      	sub	sp, #20
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d686:	2b01      	cmp	r3, #1
 800d688:	d101      	bne.n	800d68e <HAL_UARTEx_DisableFifoMode+0x16>
 800d68a:	2302      	movs	r3, #2
 800d68c:	e027      	b.n	800d6de <HAL_UARTEx_DisableFifoMode+0x66>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2224      	movs	r2, #36	@ 0x24
 800d69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f022 0201 	bic.w	r2, r2, #1
 800d6b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d6bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2220      	movs	r2, #32
 800d6d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6dc:	2300      	movs	r3, #0
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr

0800d6ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b084      	sub	sp, #16
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
 800d6f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d101      	bne.n	800d702 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d6fe:	2302      	movs	r3, #2
 800d700:	e02d      	b.n	800d75e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2201      	movs	r2, #1
 800d706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2224      	movs	r2, #36	@ 0x24
 800d70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	681a      	ldr	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f022 0201 	bic.w	r2, r2, #1
 800d728:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	683a      	ldr	r2, [r7, #0]
 800d73a:	430a      	orrs	r2, r1
 800d73c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 f850 	bl	800d7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68fa      	ldr	r2, [r7, #12]
 800d74a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2220      	movs	r2, #32
 800d750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b084      	sub	sp, #16
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d776:	2b01      	cmp	r3, #1
 800d778:	d101      	bne.n	800d77e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d77a:	2302      	movs	r3, #2
 800d77c:	e02d      	b.n	800d7da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2201      	movs	r2, #1
 800d782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2224      	movs	r2, #36	@ 0x24
 800d78a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f022 0201 	bic.w	r2, r2, #1
 800d7a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	683a      	ldr	r2, [r7, #0]
 800d7b6:	430a      	orrs	r2, r1
 800d7b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f812 	bl	800d7e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2220      	movs	r2, #32
 800d7cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b085      	sub	sp, #20
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d108      	bne.n	800d806 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d804:	e031      	b.n	800d86a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d806:	2310      	movs	r3, #16
 800d808:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d80a:	2310      	movs	r3, #16
 800d80c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	0e5b      	lsrs	r3, r3, #25
 800d816:	b2db      	uxtb	r3, r3
 800d818:	f003 0307 	and.w	r3, r3, #7
 800d81c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	689b      	ldr	r3, [r3, #8]
 800d824:	0f5b      	lsrs	r3, r3, #29
 800d826:	b2db      	uxtb	r3, r3
 800d828:	f003 0307 	and.w	r3, r3, #7
 800d82c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d82e:	7bbb      	ldrb	r3, [r7, #14]
 800d830:	7b3a      	ldrb	r2, [r7, #12]
 800d832:	4911      	ldr	r1, [pc, #68]	@ (800d878 <UARTEx_SetNbDataToProcess+0x94>)
 800d834:	5c8a      	ldrb	r2, [r1, r2]
 800d836:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d83a:	7b3a      	ldrb	r2, [r7, #12]
 800d83c:	490f      	ldr	r1, [pc, #60]	@ (800d87c <UARTEx_SetNbDataToProcess+0x98>)
 800d83e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d840:	fb93 f3f2 	sdiv	r3, r3, r2
 800d844:	b29a      	uxth	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	7b7a      	ldrb	r2, [r7, #13]
 800d850:	4909      	ldr	r1, [pc, #36]	@ (800d878 <UARTEx_SetNbDataToProcess+0x94>)
 800d852:	5c8a      	ldrb	r2, [r1, r2]
 800d854:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d858:	7b7a      	ldrb	r2, [r7, #13]
 800d85a:	4908      	ldr	r1, [pc, #32]	@ (800d87c <UARTEx_SetNbDataToProcess+0x98>)
 800d85c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d85e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d862:	b29a      	uxth	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d86a:	bf00      	nop
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	0800e8b4 	.word	0x0800e8b4
 800d87c:	0800e8bc 	.word	0x0800e8bc

0800d880 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d880:	b084      	sub	sp, #16
 800d882:	b580      	push	{r7, lr}
 800d884:	b084      	sub	sp, #16
 800d886:	af00      	add	r7, sp, #0
 800d888:	6078      	str	r0, [r7, #4]
 800d88a:	f107 001c 	add.w	r0, r7, #28
 800d88e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d892:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d896:	2b01      	cmp	r3, #1
 800d898:	d121      	bne.n	800d8de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d89e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	68da      	ldr	r2, [r3, #12]
 800d8aa:	4b2c      	ldr	r3, [pc, #176]	@ (800d95c <USB_CoreInit+0xdc>)
 800d8ac:	4013      	ands	r3, r2
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	68db      	ldr	r3, [r3, #12]
 800d8b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d8be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d105      	bne.n	800d8d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 faaa 	bl	800de2c <USB_CoreReset>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73fb      	strb	r3, [r7, #15]
 800d8dc:	e01b      	b.n	800d916 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f000 fa9e 	bl	800de2c <USB_CoreReset>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d8f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d106      	bne.n	800d90a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d900:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	639a      	str	r2, [r3, #56]	@ 0x38
 800d908:	e005      	b.n	800d916 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d90e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d916:	7fbb      	ldrb	r3, [r7, #30]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d116      	bne.n	800d94a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d920:	b29a      	uxth	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d92a:	4b0d      	ldr	r3, [pc, #52]	@ (800d960 <USB_CoreInit+0xe0>)
 800d92c:	4313      	orrs	r3, r2
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	f043 0206 	orr.w	r2, r3, #6
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	f043 0220 	orr.w	r2, r3, #32
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3710      	adds	r7, #16
 800d950:	46bd      	mov	sp, r7
 800d952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d956:	b004      	add	sp, #16
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	ffbdffbf 	.word	0xffbdffbf
 800d960:	03ee0000 	.word	0x03ee0000

0800d964 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d964:	b480      	push	{r7}
 800d966:	b083      	sub	sp, #12
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	f023 0201 	bic.w	r2, r3, #1
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d978:	2300      	movs	r3, #0
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr

0800d986 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b084      	sub	sp, #16
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	460b      	mov	r3, r1
 800d990:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d992:	2300      	movs	r3, #0
 800d994:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	68db      	ldr	r3, [r3, #12]
 800d99a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d9a2:	78fb      	ldrb	r3, [r7, #3]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d115      	bne.n	800d9d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d9b4:	200a      	movs	r0, #10
 800d9b6:	f7f4 f9f1 	bl	8001d9c <HAL_Delay>
      ms += 10U;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	330a      	adds	r3, #10
 800d9be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 fa25 	bl	800de10 <USB_GetMode>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d01e      	beq.n	800da0a <USB_SetCurrentMode+0x84>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2bc7      	cmp	r3, #199	@ 0xc7
 800d9d0:	d9f0      	bls.n	800d9b4 <USB_SetCurrentMode+0x2e>
 800d9d2:	e01a      	b.n	800da0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d9d4:	78fb      	ldrb	r3, [r7, #3]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d115      	bne.n	800da06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d9e6:	200a      	movs	r0, #10
 800d9e8:	f7f4 f9d8 	bl	8001d9c <HAL_Delay>
      ms += 10U;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	330a      	adds	r3, #10
 800d9f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fa0c 	bl	800de10 <USB_GetMode>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d005      	beq.n	800da0a <USB_SetCurrentMode+0x84>
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2bc7      	cmp	r3, #199	@ 0xc7
 800da02:	d9f0      	bls.n	800d9e6 <USB_SetCurrentMode+0x60>
 800da04:	e001      	b.n	800da0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800da06:	2301      	movs	r3, #1
 800da08:	e005      	b.n	800da16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2bc8      	cmp	r3, #200	@ 0xc8
 800da0e:	d101      	bne.n	800da14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800da10:	2301      	movs	r3, #1
 800da12:	e000      	b.n	800da16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
	...

0800da20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da20:	b084      	sub	sp, #16
 800da22:	b580      	push	{r7, lr}
 800da24:	b086      	sub	sp, #24
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
 800da2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800da2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800da3a:	2300      	movs	r3, #0
 800da3c:	613b      	str	r3, [r7, #16]
 800da3e:	e009      	b.n	800da54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800da40:	687a      	ldr	r2, [r7, #4]
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	3340      	adds	r3, #64	@ 0x40
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4413      	add	r3, r2
 800da4a:	2200      	movs	r2, #0
 800da4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	3301      	adds	r3, #1
 800da52:	613b      	str	r3, [r7, #16]
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	2b0e      	cmp	r3, #14
 800da58:	d9f2      	bls.n	800da40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800da5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d11c      	bne.n	800da9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800da70:	f043 0302 	orr.w	r3, r3, #2
 800da74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	e005      	b.n	800daa8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daa0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800daae:	461a      	mov	r2, r3
 800dab0:	2300      	movs	r3, #0
 800dab2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dab4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d10d      	bne.n	800dad8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dabc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d104      	bne.n	800dace <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dac4:	2100      	movs	r1, #0
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f000 f968 	bl	800dd9c <USB_SetDevSpeed>
 800dacc:	e008      	b.n	800dae0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dace:	2101      	movs	r1, #1
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 f963 	bl	800dd9c <USB_SetDevSpeed>
 800dad6:	e003      	b.n	800dae0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dad8:	2103      	movs	r1, #3
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f95e 	bl	800dd9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dae0:	2110      	movs	r1, #16
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f8fa 	bl	800dcdc <USB_FlushTxFifo>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	d001      	beq.n	800daf2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f924 	bl	800dd40 <USB_FlushRxFifo>
 800daf8:	4603      	mov	r3, r0
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d001      	beq.n	800db02 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db08:	461a      	mov	r2, r3
 800db0a:	2300      	movs	r3, #0
 800db0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db14:	461a      	mov	r2, r3
 800db16:	2300      	movs	r3, #0
 800db18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db20:	461a      	mov	r2, r3
 800db22:	2300      	movs	r3, #0
 800db24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db26:	2300      	movs	r3, #0
 800db28:	613b      	str	r3, [r7, #16]
 800db2a:	e043      	b.n	800dbb4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	015a      	lsls	r2, r3, #5
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	4413      	add	r3, r2
 800db34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db42:	d118      	bne.n	800db76 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10a      	bne.n	800db60 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	015a      	lsls	r2, r3, #5
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	4413      	add	r3, r2
 800db52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db56:	461a      	mov	r2, r3
 800db58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db5c:	6013      	str	r3, [r2, #0]
 800db5e:	e013      	b.n	800db88 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	015a      	lsls	r2, r3, #5
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	4413      	add	r3, r2
 800db68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db6c:	461a      	mov	r2, r3
 800db6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800db72:	6013      	str	r3, [r2, #0]
 800db74:	e008      	b.n	800db88 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	015a      	lsls	r2, r3, #5
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	4413      	add	r3, r2
 800db7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db82:	461a      	mov	r2, r3
 800db84:	2300      	movs	r3, #0
 800db86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	015a      	lsls	r2, r3, #5
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	4413      	add	r3, r2
 800db90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db94:	461a      	mov	r2, r3
 800db96:	2300      	movs	r3, #0
 800db98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	015a      	lsls	r2, r3, #5
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	4413      	add	r3, r2
 800dba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dba6:	461a      	mov	r2, r3
 800dba8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dbac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	613b      	str	r3, [r7, #16]
 800dbb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dbb8:	461a      	mov	r2, r3
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d3b5      	bcc.n	800db2c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	613b      	str	r3, [r7, #16]
 800dbc4:	e043      	b.n	800dc4e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	015a      	lsls	r2, r3, #5
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	4413      	add	r3, r2
 800dbce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dbd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dbdc:	d118      	bne.n	800dc10 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d10a      	bne.n	800dbfa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	015a      	lsls	r2, r3, #5
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	4413      	add	r3, r2
 800dbec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	e013      	b.n	800dc22 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	015a      	lsls	r2, r3, #5
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	4413      	add	r3, r2
 800dc02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc06:	461a      	mov	r2, r3
 800dc08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dc0c:	6013      	str	r3, [r2, #0]
 800dc0e:	e008      	b.n	800dc22 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	015a      	lsls	r2, r3, #5
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	4413      	add	r3, r2
 800dc18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc1c:	461a      	mov	r2, r3
 800dc1e:	2300      	movs	r3, #0
 800dc20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	015a      	lsls	r2, r3, #5
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	4413      	add	r3, r2
 800dc2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc2e:	461a      	mov	r2, r3
 800dc30:	2300      	movs	r3, #0
 800dc32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	015a      	lsls	r2, r3, #5
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	4413      	add	r3, r2
 800dc3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dc40:	461a      	mov	r2, r3
 800dc42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dc46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	613b      	str	r3, [r7, #16]
 800dc4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dc52:	461a      	mov	r2, r3
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d3b5      	bcc.n	800dbc6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dc68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dc7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dc7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d105      	bne.n	800dc90 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	f043 0210 	orr.w	r2, r3, #16
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	699a      	ldr	r2, [r3, #24]
 800dc94:	4b0f      	ldr	r3, [pc, #60]	@ (800dcd4 <USB_DevInit+0x2b4>)
 800dc96:	4313      	orrs	r3, r2
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dc9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d005      	beq.n	800dcb0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	f043 0208 	orr.w	r2, r3, #8
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dcb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d105      	bne.n	800dcc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	699a      	ldr	r2, [r3, #24]
 800dcbc:	4b06      	ldr	r3, [pc, #24]	@ (800dcd8 <USB_DevInit+0x2b8>)
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dcc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3718      	adds	r7, #24
 800dcca:	46bd      	mov	sp, r7
 800dccc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dcd0:	b004      	add	sp, #16
 800dcd2:	4770      	bx	lr
 800dcd4:	803c3800 	.word	0x803c3800
 800dcd8:	40000004 	.word	0x40000004

0800dcdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dce6:	2300      	movs	r3, #0
 800dce8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	3301      	adds	r3, #1
 800dcee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dcf6:	d901      	bls.n	800dcfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	e01b      	b.n	800dd34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	daf2      	bge.n	800dcea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dd04:	2300      	movs	r3, #0
 800dd06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	019b      	lsls	r3, r3, #6
 800dd0c:	f043 0220 	orr.w	r2, r3, #32
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	3301      	adds	r3, #1
 800dd18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dd20:	d901      	bls.n	800dd26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dd22:	2303      	movs	r3, #3
 800dd24:	e006      	b.n	800dd34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	691b      	ldr	r3, [r3, #16]
 800dd2a:	f003 0320 	and.w	r3, r3, #32
 800dd2e:	2b20      	cmp	r3, #32
 800dd30:	d0f0      	beq.n	800dd14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dd32:	2300      	movs	r3, #0
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dd58:	d901      	bls.n	800dd5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	e018      	b.n	800dd90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	daf2      	bge.n	800dd4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dd66:	2300      	movs	r3, #0
 800dd68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2210      	movs	r2, #16
 800dd6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	3301      	adds	r3, #1
 800dd74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dd7c:	d901      	bls.n	800dd82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dd7e:	2303      	movs	r3, #3
 800dd80:	e006      	b.n	800dd90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	f003 0310 	and.w	r3, r3, #16
 800dd8a:	2b10      	cmp	r3, #16
 800dd8c:	d0f0      	beq.n	800dd70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dd8e:	2300      	movs	r3, #0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3714      	adds	r7, #20
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b085      	sub	sp, #20
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	460b      	mov	r3, r1
 800dda6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	78fb      	ldrb	r3, [r7, #3]
 800ddb6:	68f9      	ldr	r1, [r7, #12]
 800ddb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ddc0:	2300      	movs	r3, #0
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3714      	adds	r7, #20
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr

0800ddce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ddce:	b480      	push	{r7}
 800ddd0:	b085      	sub	sp, #20
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dde8:	f023 0303 	bic.w	r3, r3, #3
 800ddec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ddfc:	f043 0302 	orr.w	r3, r3, #2
 800de00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	3714      	adds	r7, #20
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	f003 0301 	and.w	r3, r3, #1
}
 800de20:	4618      	mov	r0, r3
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr

0800de2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800de2c:	b480      	push	{r7}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de34:	2300      	movs	r3, #0
 800de36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	3301      	adds	r3, #1
 800de3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de44:	d901      	bls.n	800de4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800de46:	2303      	movs	r3, #3
 800de48:	e01b      	b.n	800de82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	691b      	ldr	r3, [r3, #16]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	daf2      	bge.n	800de38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800de52:	2300      	movs	r3, #0
 800de54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	f043 0201 	orr.w	r2, r3, #1
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	3301      	adds	r3, #1
 800de66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de6e:	d901      	bls.n	800de74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800de70:	2303      	movs	r3, #3
 800de72:	e006      	b.n	800de82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	691b      	ldr	r3, [r3, #16]
 800de78:	f003 0301 	and.w	r3, r3, #1
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d0f0      	beq.n	800de62 <USB_CoreReset+0x36>

  return HAL_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3714      	adds	r7, #20
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr
	...

0800de90 <sniprintf>:
 800de90:	b40c      	push	{r2, r3}
 800de92:	b530      	push	{r4, r5, lr}
 800de94:	4b17      	ldr	r3, [pc, #92]	@ (800def4 <sniprintf+0x64>)
 800de96:	1e0c      	subs	r4, r1, #0
 800de98:	681d      	ldr	r5, [r3, #0]
 800de9a:	b09d      	sub	sp, #116	@ 0x74
 800de9c:	da08      	bge.n	800deb0 <sniprintf+0x20>
 800de9e:	238b      	movs	r3, #139	@ 0x8b
 800dea0:	602b      	str	r3, [r5, #0]
 800dea2:	f04f 30ff 	mov.w	r0, #4294967295
 800dea6:	b01d      	add	sp, #116	@ 0x74
 800dea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800deac:	b002      	add	sp, #8
 800deae:	4770      	bx	lr
 800deb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800deb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800deb8:	bf14      	ite	ne
 800deba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800debe:	4623      	moveq	r3, r4
 800dec0:	9304      	str	r3, [sp, #16]
 800dec2:	9307      	str	r3, [sp, #28]
 800dec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dec8:	9002      	str	r0, [sp, #8]
 800deca:	9006      	str	r0, [sp, #24]
 800decc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ded0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ded2:	ab21      	add	r3, sp, #132	@ 0x84
 800ded4:	a902      	add	r1, sp, #8
 800ded6:	4628      	mov	r0, r5
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	f000 f9a7 	bl	800e22c <_svfiprintf_r>
 800dede:	1c43      	adds	r3, r0, #1
 800dee0:	bfbc      	itt	lt
 800dee2:	238b      	movlt	r3, #139	@ 0x8b
 800dee4:	602b      	strlt	r3, [r5, #0]
 800dee6:	2c00      	cmp	r4, #0
 800dee8:	d0dd      	beq.n	800dea6 <sniprintf+0x16>
 800deea:	9b02      	ldr	r3, [sp, #8]
 800deec:	2200      	movs	r2, #0
 800deee:	701a      	strb	r2, [r3, #0]
 800def0:	e7d9      	b.n	800dea6 <sniprintf+0x16>
 800def2:	bf00      	nop
 800def4:	24000014 	.word	0x24000014

0800def8 <memset>:
 800def8:	4402      	add	r2, r0
 800defa:	4603      	mov	r3, r0
 800defc:	4293      	cmp	r3, r2
 800defe:	d100      	bne.n	800df02 <memset+0xa>
 800df00:	4770      	bx	lr
 800df02:	f803 1b01 	strb.w	r1, [r3], #1
 800df06:	e7f9      	b.n	800defc <memset+0x4>

0800df08 <strncmp>:
 800df08:	b510      	push	{r4, lr}
 800df0a:	b16a      	cbz	r2, 800df28 <strncmp+0x20>
 800df0c:	3901      	subs	r1, #1
 800df0e:	1884      	adds	r4, r0, r2
 800df10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df14:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df18:	429a      	cmp	r2, r3
 800df1a:	d103      	bne.n	800df24 <strncmp+0x1c>
 800df1c:	42a0      	cmp	r0, r4
 800df1e:	d001      	beq.n	800df24 <strncmp+0x1c>
 800df20:	2a00      	cmp	r2, #0
 800df22:	d1f5      	bne.n	800df10 <strncmp+0x8>
 800df24:	1ad0      	subs	r0, r2, r3
 800df26:	bd10      	pop	{r4, pc}
 800df28:	4610      	mov	r0, r2
 800df2a:	e7fc      	b.n	800df26 <strncmp+0x1e>

0800df2c <__errno>:
 800df2c:	4b01      	ldr	r3, [pc, #4]	@ (800df34 <__errno+0x8>)
 800df2e:	6818      	ldr	r0, [r3, #0]
 800df30:	4770      	bx	lr
 800df32:	bf00      	nop
 800df34:	24000014 	.word	0x24000014

0800df38 <__libc_init_array>:
 800df38:	b570      	push	{r4, r5, r6, lr}
 800df3a:	4d0d      	ldr	r5, [pc, #52]	@ (800df70 <__libc_init_array+0x38>)
 800df3c:	4c0d      	ldr	r4, [pc, #52]	@ (800df74 <__libc_init_array+0x3c>)
 800df3e:	1b64      	subs	r4, r4, r5
 800df40:	10a4      	asrs	r4, r4, #2
 800df42:	2600      	movs	r6, #0
 800df44:	42a6      	cmp	r6, r4
 800df46:	d109      	bne.n	800df5c <__libc_init_array+0x24>
 800df48:	4d0b      	ldr	r5, [pc, #44]	@ (800df78 <__libc_init_array+0x40>)
 800df4a:	4c0c      	ldr	r4, [pc, #48]	@ (800df7c <__libc_init_array+0x44>)
 800df4c:	f000 fc66 	bl	800e81c <_init>
 800df50:	1b64      	subs	r4, r4, r5
 800df52:	10a4      	asrs	r4, r4, #2
 800df54:	2600      	movs	r6, #0
 800df56:	42a6      	cmp	r6, r4
 800df58:	d105      	bne.n	800df66 <__libc_init_array+0x2e>
 800df5a:	bd70      	pop	{r4, r5, r6, pc}
 800df5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800df60:	4798      	blx	r3
 800df62:	3601      	adds	r6, #1
 800df64:	e7ee      	b.n	800df44 <__libc_init_array+0xc>
 800df66:	f855 3b04 	ldr.w	r3, [r5], #4
 800df6a:	4798      	blx	r3
 800df6c:	3601      	adds	r6, #1
 800df6e:	e7f2      	b.n	800df56 <__libc_init_array+0x1e>
 800df70:	0800e900 	.word	0x0800e900
 800df74:	0800e900 	.word	0x0800e900
 800df78:	0800e900 	.word	0x0800e900
 800df7c:	0800e904 	.word	0x0800e904

0800df80 <__retarget_lock_acquire_recursive>:
 800df80:	4770      	bx	lr

0800df82 <__retarget_lock_release_recursive>:
 800df82:	4770      	bx	lr

0800df84 <_free_r>:
 800df84:	b538      	push	{r3, r4, r5, lr}
 800df86:	4605      	mov	r5, r0
 800df88:	2900      	cmp	r1, #0
 800df8a:	d041      	beq.n	800e010 <_free_r+0x8c>
 800df8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df90:	1f0c      	subs	r4, r1, #4
 800df92:	2b00      	cmp	r3, #0
 800df94:	bfb8      	it	lt
 800df96:	18e4      	addlt	r4, r4, r3
 800df98:	f000 f8e0 	bl	800e15c <__malloc_lock>
 800df9c:	4a1d      	ldr	r2, [pc, #116]	@ (800e014 <_free_r+0x90>)
 800df9e:	6813      	ldr	r3, [r2, #0]
 800dfa0:	b933      	cbnz	r3, 800dfb0 <_free_r+0x2c>
 800dfa2:	6063      	str	r3, [r4, #4]
 800dfa4:	6014      	str	r4, [r2, #0]
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfac:	f000 b8dc 	b.w	800e168 <__malloc_unlock>
 800dfb0:	42a3      	cmp	r3, r4
 800dfb2:	d908      	bls.n	800dfc6 <_free_r+0x42>
 800dfb4:	6820      	ldr	r0, [r4, #0]
 800dfb6:	1821      	adds	r1, r4, r0
 800dfb8:	428b      	cmp	r3, r1
 800dfba:	bf01      	itttt	eq
 800dfbc:	6819      	ldreq	r1, [r3, #0]
 800dfbe:	685b      	ldreq	r3, [r3, #4]
 800dfc0:	1809      	addeq	r1, r1, r0
 800dfc2:	6021      	streq	r1, [r4, #0]
 800dfc4:	e7ed      	b.n	800dfa2 <_free_r+0x1e>
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	b10b      	cbz	r3, 800dfd0 <_free_r+0x4c>
 800dfcc:	42a3      	cmp	r3, r4
 800dfce:	d9fa      	bls.n	800dfc6 <_free_r+0x42>
 800dfd0:	6811      	ldr	r1, [r2, #0]
 800dfd2:	1850      	adds	r0, r2, r1
 800dfd4:	42a0      	cmp	r0, r4
 800dfd6:	d10b      	bne.n	800dff0 <_free_r+0x6c>
 800dfd8:	6820      	ldr	r0, [r4, #0]
 800dfda:	4401      	add	r1, r0
 800dfdc:	1850      	adds	r0, r2, r1
 800dfde:	4283      	cmp	r3, r0
 800dfe0:	6011      	str	r1, [r2, #0]
 800dfe2:	d1e0      	bne.n	800dfa6 <_free_r+0x22>
 800dfe4:	6818      	ldr	r0, [r3, #0]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	6053      	str	r3, [r2, #4]
 800dfea:	4408      	add	r0, r1
 800dfec:	6010      	str	r0, [r2, #0]
 800dfee:	e7da      	b.n	800dfa6 <_free_r+0x22>
 800dff0:	d902      	bls.n	800dff8 <_free_r+0x74>
 800dff2:	230c      	movs	r3, #12
 800dff4:	602b      	str	r3, [r5, #0]
 800dff6:	e7d6      	b.n	800dfa6 <_free_r+0x22>
 800dff8:	6820      	ldr	r0, [r4, #0]
 800dffa:	1821      	adds	r1, r4, r0
 800dffc:	428b      	cmp	r3, r1
 800dffe:	bf04      	itt	eq
 800e000:	6819      	ldreq	r1, [r3, #0]
 800e002:	685b      	ldreq	r3, [r3, #4]
 800e004:	6063      	str	r3, [r4, #4]
 800e006:	bf04      	itt	eq
 800e008:	1809      	addeq	r1, r1, r0
 800e00a:	6021      	streq	r1, [r4, #0]
 800e00c:	6054      	str	r4, [r2, #4]
 800e00e:	e7ca      	b.n	800dfa6 <_free_r+0x22>
 800e010:	bd38      	pop	{r3, r4, r5, pc}
 800e012:	bf00      	nop
 800e014:	24000a70 	.word	0x24000a70

0800e018 <sbrk_aligned>:
 800e018:	b570      	push	{r4, r5, r6, lr}
 800e01a:	4e0f      	ldr	r6, [pc, #60]	@ (800e058 <sbrk_aligned+0x40>)
 800e01c:	460c      	mov	r4, r1
 800e01e:	6831      	ldr	r1, [r6, #0]
 800e020:	4605      	mov	r5, r0
 800e022:	b911      	cbnz	r1, 800e02a <sbrk_aligned+0x12>
 800e024:	f000 fba6 	bl	800e774 <_sbrk_r>
 800e028:	6030      	str	r0, [r6, #0]
 800e02a:	4621      	mov	r1, r4
 800e02c:	4628      	mov	r0, r5
 800e02e:	f000 fba1 	bl	800e774 <_sbrk_r>
 800e032:	1c43      	adds	r3, r0, #1
 800e034:	d103      	bne.n	800e03e <sbrk_aligned+0x26>
 800e036:	f04f 34ff 	mov.w	r4, #4294967295
 800e03a:	4620      	mov	r0, r4
 800e03c:	bd70      	pop	{r4, r5, r6, pc}
 800e03e:	1cc4      	adds	r4, r0, #3
 800e040:	f024 0403 	bic.w	r4, r4, #3
 800e044:	42a0      	cmp	r0, r4
 800e046:	d0f8      	beq.n	800e03a <sbrk_aligned+0x22>
 800e048:	1a21      	subs	r1, r4, r0
 800e04a:	4628      	mov	r0, r5
 800e04c:	f000 fb92 	bl	800e774 <_sbrk_r>
 800e050:	3001      	adds	r0, #1
 800e052:	d1f2      	bne.n	800e03a <sbrk_aligned+0x22>
 800e054:	e7ef      	b.n	800e036 <sbrk_aligned+0x1e>
 800e056:	bf00      	nop
 800e058:	24000a6c 	.word	0x24000a6c

0800e05c <_malloc_r>:
 800e05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e060:	1ccd      	adds	r5, r1, #3
 800e062:	f025 0503 	bic.w	r5, r5, #3
 800e066:	3508      	adds	r5, #8
 800e068:	2d0c      	cmp	r5, #12
 800e06a:	bf38      	it	cc
 800e06c:	250c      	movcc	r5, #12
 800e06e:	2d00      	cmp	r5, #0
 800e070:	4606      	mov	r6, r0
 800e072:	db01      	blt.n	800e078 <_malloc_r+0x1c>
 800e074:	42a9      	cmp	r1, r5
 800e076:	d904      	bls.n	800e082 <_malloc_r+0x26>
 800e078:	230c      	movs	r3, #12
 800e07a:	6033      	str	r3, [r6, #0]
 800e07c:	2000      	movs	r0, #0
 800e07e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e082:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e158 <_malloc_r+0xfc>
 800e086:	f000 f869 	bl	800e15c <__malloc_lock>
 800e08a:	f8d8 3000 	ldr.w	r3, [r8]
 800e08e:	461c      	mov	r4, r3
 800e090:	bb44      	cbnz	r4, 800e0e4 <_malloc_r+0x88>
 800e092:	4629      	mov	r1, r5
 800e094:	4630      	mov	r0, r6
 800e096:	f7ff ffbf 	bl	800e018 <sbrk_aligned>
 800e09a:	1c43      	adds	r3, r0, #1
 800e09c:	4604      	mov	r4, r0
 800e09e:	d158      	bne.n	800e152 <_malloc_r+0xf6>
 800e0a0:	f8d8 4000 	ldr.w	r4, [r8]
 800e0a4:	4627      	mov	r7, r4
 800e0a6:	2f00      	cmp	r7, #0
 800e0a8:	d143      	bne.n	800e132 <_malloc_r+0xd6>
 800e0aa:	2c00      	cmp	r4, #0
 800e0ac:	d04b      	beq.n	800e146 <_malloc_r+0xea>
 800e0ae:	6823      	ldr	r3, [r4, #0]
 800e0b0:	4639      	mov	r1, r7
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	eb04 0903 	add.w	r9, r4, r3
 800e0b8:	f000 fb5c 	bl	800e774 <_sbrk_r>
 800e0bc:	4581      	cmp	r9, r0
 800e0be:	d142      	bne.n	800e146 <_malloc_r+0xea>
 800e0c0:	6821      	ldr	r1, [r4, #0]
 800e0c2:	1a6d      	subs	r5, r5, r1
 800e0c4:	4629      	mov	r1, r5
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	f7ff ffa6 	bl	800e018 <sbrk_aligned>
 800e0cc:	3001      	adds	r0, #1
 800e0ce:	d03a      	beq.n	800e146 <_malloc_r+0xea>
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	442b      	add	r3, r5
 800e0d4:	6023      	str	r3, [r4, #0]
 800e0d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	bb62      	cbnz	r2, 800e138 <_malloc_r+0xdc>
 800e0de:	f8c8 7000 	str.w	r7, [r8]
 800e0e2:	e00f      	b.n	800e104 <_malloc_r+0xa8>
 800e0e4:	6822      	ldr	r2, [r4, #0]
 800e0e6:	1b52      	subs	r2, r2, r5
 800e0e8:	d420      	bmi.n	800e12c <_malloc_r+0xd0>
 800e0ea:	2a0b      	cmp	r2, #11
 800e0ec:	d917      	bls.n	800e11e <_malloc_r+0xc2>
 800e0ee:	1961      	adds	r1, r4, r5
 800e0f0:	42a3      	cmp	r3, r4
 800e0f2:	6025      	str	r5, [r4, #0]
 800e0f4:	bf18      	it	ne
 800e0f6:	6059      	strne	r1, [r3, #4]
 800e0f8:	6863      	ldr	r3, [r4, #4]
 800e0fa:	bf08      	it	eq
 800e0fc:	f8c8 1000 	streq.w	r1, [r8]
 800e100:	5162      	str	r2, [r4, r5]
 800e102:	604b      	str	r3, [r1, #4]
 800e104:	4630      	mov	r0, r6
 800e106:	f000 f82f 	bl	800e168 <__malloc_unlock>
 800e10a:	f104 000b 	add.w	r0, r4, #11
 800e10e:	1d23      	adds	r3, r4, #4
 800e110:	f020 0007 	bic.w	r0, r0, #7
 800e114:	1ac2      	subs	r2, r0, r3
 800e116:	bf1c      	itt	ne
 800e118:	1a1b      	subne	r3, r3, r0
 800e11a:	50a3      	strne	r3, [r4, r2]
 800e11c:	e7af      	b.n	800e07e <_malloc_r+0x22>
 800e11e:	6862      	ldr	r2, [r4, #4]
 800e120:	42a3      	cmp	r3, r4
 800e122:	bf0c      	ite	eq
 800e124:	f8c8 2000 	streq.w	r2, [r8]
 800e128:	605a      	strne	r2, [r3, #4]
 800e12a:	e7eb      	b.n	800e104 <_malloc_r+0xa8>
 800e12c:	4623      	mov	r3, r4
 800e12e:	6864      	ldr	r4, [r4, #4]
 800e130:	e7ae      	b.n	800e090 <_malloc_r+0x34>
 800e132:	463c      	mov	r4, r7
 800e134:	687f      	ldr	r7, [r7, #4]
 800e136:	e7b6      	b.n	800e0a6 <_malloc_r+0x4a>
 800e138:	461a      	mov	r2, r3
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	42a3      	cmp	r3, r4
 800e13e:	d1fb      	bne.n	800e138 <_malloc_r+0xdc>
 800e140:	2300      	movs	r3, #0
 800e142:	6053      	str	r3, [r2, #4]
 800e144:	e7de      	b.n	800e104 <_malloc_r+0xa8>
 800e146:	230c      	movs	r3, #12
 800e148:	6033      	str	r3, [r6, #0]
 800e14a:	4630      	mov	r0, r6
 800e14c:	f000 f80c 	bl	800e168 <__malloc_unlock>
 800e150:	e794      	b.n	800e07c <_malloc_r+0x20>
 800e152:	6005      	str	r5, [r0, #0]
 800e154:	e7d6      	b.n	800e104 <_malloc_r+0xa8>
 800e156:	bf00      	nop
 800e158:	24000a70 	.word	0x24000a70

0800e15c <__malloc_lock>:
 800e15c:	4801      	ldr	r0, [pc, #4]	@ (800e164 <__malloc_lock+0x8>)
 800e15e:	f7ff bf0f 	b.w	800df80 <__retarget_lock_acquire_recursive>
 800e162:	bf00      	nop
 800e164:	24000a68 	.word	0x24000a68

0800e168 <__malloc_unlock>:
 800e168:	4801      	ldr	r0, [pc, #4]	@ (800e170 <__malloc_unlock+0x8>)
 800e16a:	f7ff bf0a 	b.w	800df82 <__retarget_lock_release_recursive>
 800e16e:	bf00      	nop
 800e170:	24000a68 	.word	0x24000a68

0800e174 <__ssputs_r>:
 800e174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e178:	688e      	ldr	r6, [r1, #8]
 800e17a:	461f      	mov	r7, r3
 800e17c:	42be      	cmp	r6, r7
 800e17e:	680b      	ldr	r3, [r1, #0]
 800e180:	4682      	mov	sl, r0
 800e182:	460c      	mov	r4, r1
 800e184:	4690      	mov	r8, r2
 800e186:	d82d      	bhi.n	800e1e4 <__ssputs_r+0x70>
 800e188:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e18c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e190:	d026      	beq.n	800e1e0 <__ssputs_r+0x6c>
 800e192:	6965      	ldr	r5, [r4, #20]
 800e194:	6909      	ldr	r1, [r1, #16]
 800e196:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e19a:	eba3 0901 	sub.w	r9, r3, r1
 800e19e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1a2:	1c7b      	adds	r3, r7, #1
 800e1a4:	444b      	add	r3, r9
 800e1a6:	106d      	asrs	r5, r5, #1
 800e1a8:	429d      	cmp	r5, r3
 800e1aa:	bf38      	it	cc
 800e1ac:	461d      	movcc	r5, r3
 800e1ae:	0553      	lsls	r3, r2, #21
 800e1b0:	d527      	bpl.n	800e202 <__ssputs_r+0x8e>
 800e1b2:	4629      	mov	r1, r5
 800e1b4:	f7ff ff52 	bl	800e05c <_malloc_r>
 800e1b8:	4606      	mov	r6, r0
 800e1ba:	b360      	cbz	r0, 800e216 <__ssputs_r+0xa2>
 800e1bc:	6921      	ldr	r1, [r4, #16]
 800e1be:	464a      	mov	r2, r9
 800e1c0:	f000 fae8 	bl	800e794 <memcpy>
 800e1c4:	89a3      	ldrh	r3, [r4, #12]
 800e1c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e1ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1ce:	81a3      	strh	r3, [r4, #12]
 800e1d0:	6126      	str	r6, [r4, #16]
 800e1d2:	6165      	str	r5, [r4, #20]
 800e1d4:	444e      	add	r6, r9
 800e1d6:	eba5 0509 	sub.w	r5, r5, r9
 800e1da:	6026      	str	r6, [r4, #0]
 800e1dc:	60a5      	str	r5, [r4, #8]
 800e1de:	463e      	mov	r6, r7
 800e1e0:	42be      	cmp	r6, r7
 800e1e2:	d900      	bls.n	800e1e6 <__ssputs_r+0x72>
 800e1e4:	463e      	mov	r6, r7
 800e1e6:	6820      	ldr	r0, [r4, #0]
 800e1e8:	4632      	mov	r2, r6
 800e1ea:	4641      	mov	r1, r8
 800e1ec:	f000 faa8 	bl	800e740 <memmove>
 800e1f0:	68a3      	ldr	r3, [r4, #8]
 800e1f2:	1b9b      	subs	r3, r3, r6
 800e1f4:	60a3      	str	r3, [r4, #8]
 800e1f6:	6823      	ldr	r3, [r4, #0]
 800e1f8:	4433      	add	r3, r6
 800e1fa:	6023      	str	r3, [r4, #0]
 800e1fc:	2000      	movs	r0, #0
 800e1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e202:	462a      	mov	r2, r5
 800e204:	f000 fad4 	bl	800e7b0 <_realloc_r>
 800e208:	4606      	mov	r6, r0
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d1e0      	bne.n	800e1d0 <__ssputs_r+0x5c>
 800e20e:	6921      	ldr	r1, [r4, #16]
 800e210:	4650      	mov	r0, sl
 800e212:	f7ff feb7 	bl	800df84 <_free_r>
 800e216:	230c      	movs	r3, #12
 800e218:	f8ca 3000 	str.w	r3, [sl]
 800e21c:	89a3      	ldrh	r3, [r4, #12]
 800e21e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e222:	81a3      	strh	r3, [r4, #12]
 800e224:	f04f 30ff 	mov.w	r0, #4294967295
 800e228:	e7e9      	b.n	800e1fe <__ssputs_r+0x8a>
	...

0800e22c <_svfiprintf_r>:
 800e22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e230:	4698      	mov	r8, r3
 800e232:	898b      	ldrh	r3, [r1, #12]
 800e234:	061b      	lsls	r3, r3, #24
 800e236:	b09d      	sub	sp, #116	@ 0x74
 800e238:	4607      	mov	r7, r0
 800e23a:	460d      	mov	r5, r1
 800e23c:	4614      	mov	r4, r2
 800e23e:	d510      	bpl.n	800e262 <_svfiprintf_r+0x36>
 800e240:	690b      	ldr	r3, [r1, #16]
 800e242:	b973      	cbnz	r3, 800e262 <_svfiprintf_r+0x36>
 800e244:	2140      	movs	r1, #64	@ 0x40
 800e246:	f7ff ff09 	bl	800e05c <_malloc_r>
 800e24a:	6028      	str	r0, [r5, #0]
 800e24c:	6128      	str	r0, [r5, #16]
 800e24e:	b930      	cbnz	r0, 800e25e <_svfiprintf_r+0x32>
 800e250:	230c      	movs	r3, #12
 800e252:	603b      	str	r3, [r7, #0]
 800e254:	f04f 30ff 	mov.w	r0, #4294967295
 800e258:	b01d      	add	sp, #116	@ 0x74
 800e25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25e:	2340      	movs	r3, #64	@ 0x40
 800e260:	616b      	str	r3, [r5, #20]
 800e262:	2300      	movs	r3, #0
 800e264:	9309      	str	r3, [sp, #36]	@ 0x24
 800e266:	2320      	movs	r3, #32
 800e268:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e26c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e270:	2330      	movs	r3, #48	@ 0x30
 800e272:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e410 <_svfiprintf_r+0x1e4>
 800e276:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e27a:	f04f 0901 	mov.w	r9, #1
 800e27e:	4623      	mov	r3, r4
 800e280:	469a      	mov	sl, r3
 800e282:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e286:	b10a      	cbz	r2, 800e28c <_svfiprintf_r+0x60>
 800e288:	2a25      	cmp	r2, #37	@ 0x25
 800e28a:	d1f9      	bne.n	800e280 <_svfiprintf_r+0x54>
 800e28c:	ebba 0b04 	subs.w	fp, sl, r4
 800e290:	d00b      	beq.n	800e2aa <_svfiprintf_r+0x7e>
 800e292:	465b      	mov	r3, fp
 800e294:	4622      	mov	r2, r4
 800e296:	4629      	mov	r1, r5
 800e298:	4638      	mov	r0, r7
 800e29a:	f7ff ff6b 	bl	800e174 <__ssputs_r>
 800e29e:	3001      	adds	r0, #1
 800e2a0:	f000 80a7 	beq.w	800e3f2 <_svfiprintf_r+0x1c6>
 800e2a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e2a6:	445a      	add	r2, fp
 800e2a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e2aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f000 809f 	beq.w	800e3f2 <_svfiprintf_r+0x1c6>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2be:	f10a 0a01 	add.w	sl, sl, #1
 800e2c2:	9304      	str	r3, [sp, #16]
 800e2c4:	9307      	str	r3, [sp, #28]
 800e2c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e2ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800e2cc:	4654      	mov	r4, sl
 800e2ce:	2205      	movs	r2, #5
 800e2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2d4:	484e      	ldr	r0, [pc, #312]	@ (800e410 <_svfiprintf_r+0x1e4>)
 800e2d6:	f7f2 f80b 	bl	80002f0 <memchr>
 800e2da:	9a04      	ldr	r2, [sp, #16]
 800e2dc:	b9d8      	cbnz	r0, 800e316 <_svfiprintf_r+0xea>
 800e2de:	06d0      	lsls	r0, r2, #27
 800e2e0:	bf44      	itt	mi
 800e2e2:	2320      	movmi	r3, #32
 800e2e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2e8:	0711      	lsls	r1, r2, #28
 800e2ea:	bf44      	itt	mi
 800e2ec:	232b      	movmi	r3, #43	@ 0x2b
 800e2ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2f8:	d015      	beq.n	800e326 <_svfiprintf_r+0xfa>
 800e2fa:	9a07      	ldr	r2, [sp, #28]
 800e2fc:	4654      	mov	r4, sl
 800e2fe:	2000      	movs	r0, #0
 800e300:	f04f 0c0a 	mov.w	ip, #10
 800e304:	4621      	mov	r1, r4
 800e306:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e30a:	3b30      	subs	r3, #48	@ 0x30
 800e30c:	2b09      	cmp	r3, #9
 800e30e:	d94b      	bls.n	800e3a8 <_svfiprintf_r+0x17c>
 800e310:	b1b0      	cbz	r0, 800e340 <_svfiprintf_r+0x114>
 800e312:	9207      	str	r2, [sp, #28]
 800e314:	e014      	b.n	800e340 <_svfiprintf_r+0x114>
 800e316:	eba0 0308 	sub.w	r3, r0, r8
 800e31a:	fa09 f303 	lsl.w	r3, r9, r3
 800e31e:	4313      	orrs	r3, r2
 800e320:	9304      	str	r3, [sp, #16]
 800e322:	46a2      	mov	sl, r4
 800e324:	e7d2      	b.n	800e2cc <_svfiprintf_r+0xa0>
 800e326:	9b03      	ldr	r3, [sp, #12]
 800e328:	1d19      	adds	r1, r3, #4
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	9103      	str	r1, [sp, #12]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	bfbb      	ittet	lt
 800e332:	425b      	neglt	r3, r3
 800e334:	f042 0202 	orrlt.w	r2, r2, #2
 800e338:	9307      	strge	r3, [sp, #28]
 800e33a:	9307      	strlt	r3, [sp, #28]
 800e33c:	bfb8      	it	lt
 800e33e:	9204      	strlt	r2, [sp, #16]
 800e340:	7823      	ldrb	r3, [r4, #0]
 800e342:	2b2e      	cmp	r3, #46	@ 0x2e
 800e344:	d10a      	bne.n	800e35c <_svfiprintf_r+0x130>
 800e346:	7863      	ldrb	r3, [r4, #1]
 800e348:	2b2a      	cmp	r3, #42	@ 0x2a
 800e34a:	d132      	bne.n	800e3b2 <_svfiprintf_r+0x186>
 800e34c:	9b03      	ldr	r3, [sp, #12]
 800e34e:	1d1a      	adds	r2, r3, #4
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	9203      	str	r2, [sp, #12]
 800e354:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e358:	3402      	adds	r4, #2
 800e35a:	9305      	str	r3, [sp, #20]
 800e35c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e420 <_svfiprintf_r+0x1f4>
 800e360:	7821      	ldrb	r1, [r4, #0]
 800e362:	2203      	movs	r2, #3
 800e364:	4650      	mov	r0, sl
 800e366:	f7f1 ffc3 	bl	80002f0 <memchr>
 800e36a:	b138      	cbz	r0, 800e37c <_svfiprintf_r+0x150>
 800e36c:	9b04      	ldr	r3, [sp, #16]
 800e36e:	eba0 000a 	sub.w	r0, r0, sl
 800e372:	2240      	movs	r2, #64	@ 0x40
 800e374:	4082      	lsls	r2, r0
 800e376:	4313      	orrs	r3, r2
 800e378:	3401      	adds	r4, #1
 800e37a:	9304      	str	r3, [sp, #16]
 800e37c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e380:	4824      	ldr	r0, [pc, #144]	@ (800e414 <_svfiprintf_r+0x1e8>)
 800e382:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e386:	2206      	movs	r2, #6
 800e388:	f7f1 ffb2 	bl	80002f0 <memchr>
 800e38c:	2800      	cmp	r0, #0
 800e38e:	d036      	beq.n	800e3fe <_svfiprintf_r+0x1d2>
 800e390:	4b21      	ldr	r3, [pc, #132]	@ (800e418 <_svfiprintf_r+0x1ec>)
 800e392:	bb1b      	cbnz	r3, 800e3dc <_svfiprintf_r+0x1b0>
 800e394:	9b03      	ldr	r3, [sp, #12]
 800e396:	3307      	adds	r3, #7
 800e398:	f023 0307 	bic.w	r3, r3, #7
 800e39c:	3308      	adds	r3, #8
 800e39e:	9303      	str	r3, [sp, #12]
 800e3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3a2:	4433      	add	r3, r6
 800e3a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3a6:	e76a      	b.n	800e27e <_svfiprintf_r+0x52>
 800e3a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3ac:	460c      	mov	r4, r1
 800e3ae:	2001      	movs	r0, #1
 800e3b0:	e7a8      	b.n	800e304 <_svfiprintf_r+0xd8>
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	3401      	adds	r4, #1
 800e3b6:	9305      	str	r3, [sp, #20]
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	f04f 0c0a 	mov.w	ip, #10
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3c4:	3a30      	subs	r2, #48	@ 0x30
 800e3c6:	2a09      	cmp	r2, #9
 800e3c8:	d903      	bls.n	800e3d2 <_svfiprintf_r+0x1a6>
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d0c6      	beq.n	800e35c <_svfiprintf_r+0x130>
 800e3ce:	9105      	str	r1, [sp, #20]
 800e3d0:	e7c4      	b.n	800e35c <_svfiprintf_r+0x130>
 800e3d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3d6:	4604      	mov	r4, r0
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e7f0      	b.n	800e3be <_svfiprintf_r+0x192>
 800e3dc:	ab03      	add	r3, sp, #12
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	462a      	mov	r2, r5
 800e3e2:	4b0e      	ldr	r3, [pc, #56]	@ (800e41c <_svfiprintf_r+0x1f0>)
 800e3e4:	a904      	add	r1, sp, #16
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	f3af 8000 	nop.w
 800e3ec:	1c42      	adds	r2, r0, #1
 800e3ee:	4606      	mov	r6, r0
 800e3f0:	d1d6      	bne.n	800e3a0 <_svfiprintf_r+0x174>
 800e3f2:	89ab      	ldrh	r3, [r5, #12]
 800e3f4:	065b      	lsls	r3, r3, #25
 800e3f6:	f53f af2d 	bmi.w	800e254 <_svfiprintf_r+0x28>
 800e3fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e3fc:	e72c      	b.n	800e258 <_svfiprintf_r+0x2c>
 800e3fe:	ab03      	add	r3, sp, #12
 800e400:	9300      	str	r3, [sp, #0]
 800e402:	462a      	mov	r2, r5
 800e404:	4b05      	ldr	r3, [pc, #20]	@ (800e41c <_svfiprintf_r+0x1f0>)
 800e406:	a904      	add	r1, sp, #16
 800e408:	4638      	mov	r0, r7
 800e40a:	f000 f879 	bl	800e500 <_printf_i>
 800e40e:	e7ed      	b.n	800e3ec <_svfiprintf_r+0x1c0>
 800e410:	0800e8c4 	.word	0x0800e8c4
 800e414:	0800e8ce 	.word	0x0800e8ce
 800e418:	00000000 	.word	0x00000000
 800e41c:	0800e175 	.word	0x0800e175
 800e420:	0800e8ca 	.word	0x0800e8ca

0800e424 <_printf_common>:
 800e424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e428:	4616      	mov	r6, r2
 800e42a:	4698      	mov	r8, r3
 800e42c:	688a      	ldr	r2, [r1, #8]
 800e42e:	690b      	ldr	r3, [r1, #16]
 800e430:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e434:	4293      	cmp	r3, r2
 800e436:	bfb8      	it	lt
 800e438:	4613      	movlt	r3, r2
 800e43a:	6033      	str	r3, [r6, #0]
 800e43c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e440:	4607      	mov	r7, r0
 800e442:	460c      	mov	r4, r1
 800e444:	b10a      	cbz	r2, 800e44a <_printf_common+0x26>
 800e446:	3301      	adds	r3, #1
 800e448:	6033      	str	r3, [r6, #0]
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	0699      	lsls	r1, r3, #26
 800e44e:	bf42      	ittt	mi
 800e450:	6833      	ldrmi	r3, [r6, #0]
 800e452:	3302      	addmi	r3, #2
 800e454:	6033      	strmi	r3, [r6, #0]
 800e456:	6825      	ldr	r5, [r4, #0]
 800e458:	f015 0506 	ands.w	r5, r5, #6
 800e45c:	d106      	bne.n	800e46c <_printf_common+0x48>
 800e45e:	f104 0a19 	add.w	sl, r4, #25
 800e462:	68e3      	ldr	r3, [r4, #12]
 800e464:	6832      	ldr	r2, [r6, #0]
 800e466:	1a9b      	subs	r3, r3, r2
 800e468:	42ab      	cmp	r3, r5
 800e46a:	dc26      	bgt.n	800e4ba <_printf_common+0x96>
 800e46c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e470:	6822      	ldr	r2, [r4, #0]
 800e472:	3b00      	subs	r3, #0
 800e474:	bf18      	it	ne
 800e476:	2301      	movne	r3, #1
 800e478:	0692      	lsls	r2, r2, #26
 800e47a:	d42b      	bmi.n	800e4d4 <_printf_common+0xb0>
 800e47c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e480:	4641      	mov	r1, r8
 800e482:	4638      	mov	r0, r7
 800e484:	47c8      	blx	r9
 800e486:	3001      	adds	r0, #1
 800e488:	d01e      	beq.n	800e4c8 <_printf_common+0xa4>
 800e48a:	6823      	ldr	r3, [r4, #0]
 800e48c:	6922      	ldr	r2, [r4, #16]
 800e48e:	f003 0306 	and.w	r3, r3, #6
 800e492:	2b04      	cmp	r3, #4
 800e494:	bf02      	ittt	eq
 800e496:	68e5      	ldreq	r5, [r4, #12]
 800e498:	6833      	ldreq	r3, [r6, #0]
 800e49a:	1aed      	subeq	r5, r5, r3
 800e49c:	68a3      	ldr	r3, [r4, #8]
 800e49e:	bf0c      	ite	eq
 800e4a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4a4:	2500      	movne	r5, #0
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	bfc4      	itt	gt
 800e4aa:	1a9b      	subgt	r3, r3, r2
 800e4ac:	18ed      	addgt	r5, r5, r3
 800e4ae:	2600      	movs	r6, #0
 800e4b0:	341a      	adds	r4, #26
 800e4b2:	42b5      	cmp	r5, r6
 800e4b4:	d11a      	bne.n	800e4ec <_printf_common+0xc8>
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	e008      	b.n	800e4cc <_printf_common+0xa8>
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	4652      	mov	r2, sl
 800e4be:	4641      	mov	r1, r8
 800e4c0:	4638      	mov	r0, r7
 800e4c2:	47c8      	blx	r9
 800e4c4:	3001      	adds	r0, #1
 800e4c6:	d103      	bne.n	800e4d0 <_printf_common+0xac>
 800e4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4d0:	3501      	adds	r5, #1
 800e4d2:	e7c6      	b.n	800e462 <_printf_common+0x3e>
 800e4d4:	18e1      	adds	r1, r4, r3
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	2030      	movs	r0, #48	@ 0x30
 800e4da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e4de:	4422      	add	r2, r4
 800e4e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e4e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e4e8:	3302      	adds	r3, #2
 800e4ea:	e7c7      	b.n	800e47c <_printf_common+0x58>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	4622      	mov	r2, r4
 800e4f0:	4641      	mov	r1, r8
 800e4f2:	4638      	mov	r0, r7
 800e4f4:	47c8      	blx	r9
 800e4f6:	3001      	adds	r0, #1
 800e4f8:	d0e6      	beq.n	800e4c8 <_printf_common+0xa4>
 800e4fa:	3601      	adds	r6, #1
 800e4fc:	e7d9      	b.n	800e4b2 <_printf_common+0x8e>
	...

0800e500 <_printf_i>:
 800e500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e504:	7e0f      	ldrb	r7, [r1, #24]
 800e506:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e508:	2f78      	cmp	r7, #120	@ 0x78
 800e50a:	4691      	mov	r9, r2
 800e50c:	4680      	mov	r8, r0
 800e50e:	460c      	mov	r4, r1
 800e510:	469a      	mov	sl, r3
 800e512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e516:	d807      	bhi.n	800e528 <_printf_i+0x28>
 800e518:	2f62      	cmp	r7, #98	@ 0x62
 800e51a:	d80a      	bhi.n	800e532 <_printf_i+0x32>
 800e51c:	2f00      	cmp	r7, #0
 800e51e:	f000 80d2 	beq.w	800e6c6 <_printf_i+0x1c6>
 800e522:	2f58      	cmp	r7, #88	@ 0x58
 800e524:	f000 80b9 	beq.w	800e69a <_printf_i+0x19a>
 800e528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e52c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e530:	e03a      	b.n	800e5a8 <_printf_i+0xa8>
 800e532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e536:	2b15      	cmp	r3, #21
 800e538:	d8f6      	bhi.n	800e528 <_printf_i+0x28>
 800e53a:	a101      	add	r1, pc, #4	@ (adr r1, 800e540 <_printf_i+0x40>)
 800e53c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e540:	0800e599 	.word	0x0800e599
 800e544:	0800e5ad 	.word	0x0800e5ad
 800e548:	0800e529 	.word	0x0800e529
 800e54c:	0800e529 	.word	0x0800e529
 800e550:	0800e529 	.word	0x0800e529
 800e554:	0800e529 	.word	0x0800e529
 800e558:	0800e5ad 	.word	0x0800e5ad
 800e55c:	0800e529 	.word	0x0800e529
 800e560:	0800e529 	.word	0x0800e529
 800e564:	0800e529 	.word	0x0800e529
 800e568:	0800e529 	.word	0x0800e529
 800e56c:	0800e6ad 	.word	0x0800e6ad
 800e570:	0800e5d7 	.word	0x0800e5d7
 800e574:	0800e667 	.word	0x0800e667
 800e578:	0800e529 	.word	0x0800e529
 800e57c:	0800e529 	.word	0x0800e529
 800e580:	0800e6cf 	.word	0x0800e6cf
 800e584:	0800e529 	.word	0x0800e529
 800e588:	0800e5d7 	.word	0x0800e5d7
 800e58c:	0800e529 	.word	0x0800e529
 800e590:	0800e529 	.word	0x0800e529
 800e594:	0800e66f 	.word	0x0800e66f
 800e598:	6833      	ldr	r3, [r6, #0]
 800e59a:	1d1a      	adds	r2, r3, #4
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	6032      	str	r2, [r6, #0]
 800e5a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e09d      	b.n	800e6e8 <_printf_i+0x1e8>
 800e5ac:	6833      	ldr	r3, [r6, #0]
 800e5ae:	6820      	ldr	r0, [r4, #0]
 800e5b0:	1d19      	adds	r1, r3, #4
 800e5b2:	6031      	str	r1, [r6, #0]
 800e5b4:	0606      	lsls	r6, r0, #24
 800e5b6:	d501      	bpl.n	800e5bc <_printf_i+0xbc>
 800e5b8:	681d      	ldr	r5, [r3, #0]
 800e5ba:	e003      	b.n	800e5c4 <_printf_i+0xc4>
 800e5bc:	0645      	lsls	r5, r0, #25
 800e5be:	d5fb      	bpl.n	800e5b8 <_printf_i+0xb8>
 800e5c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e5c4:	2d00      	cmp	r5, #0
 800e5c6:	da03      	bge.n	800e5d0 <_printf_i+0xd0>
 800e5c8:	232d      	movs	r3, #45	@ 0x2d
 800e5ca:	426d      	negs	r5, r5
 800e5cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5d0:	4859      	ldr	r0, [pc, #356]	@ (800e738 <_printf_i+0x238>)
 800e5d2:	230a      	movs	r3, #10
 800e5d4:	e011      	b.n	800e5fa <_printf_i+0xfa>
 800e5d6:	6821      	ldr	r1, [r4, #0]
 800e5d8:	6833      	ldr	r3, [r6, #0]
 800e5da:	0608      	lsls	r0, r1, #24
 800e5dc:	f853 5b04 	ldr.w	r5, [r3], #4
 800e5e0:	d402      	bmi.n	800e5e8 <_printf_i+0xe8>
 800e5e2:	0649      	lsls	r1, r1, #25
 800e5e4:	bf48      	it	mi
 800e5e6:	b2ad      	uxthmi	r5, r5
 800e5e8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e5ea:	4853      	ldr	r0, [pc, #332]	@ (800e738 <_printf_i+0x238>)
 800e5ec:	6033      	str	r3, [r6, #0]
 800e5ee:	bf14      	ite	ne
 800e5f0:	230a      	movne	r3, #10
 800e5f2:	2308      	moveq	r3, #8
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e5fa:	6866      	ldr	r6, [r4, #4]
 800e5fc:	60a6      	str	r6, [r4, #8]
 800e5fe:	2e00      	cmp	r6, #0
 800e600:	bfa2      	ittt	ge
 800e602:	6821      	ldrge	r1, [r4, #0]
 800e604:	f021 0104 	bicge.w	r1, r1, #4
 800e608:	6021      	strge	r1, [r4, #0]
 800e60a:	b90d      	cbnz	r5, 800e610 <_printf_i+0x110>
 800e60c:	2e00      	cmp	r6, #0
 800e60e:	d04b      	beq.n	800e6a8 <_printf_i+0x1a8>
 800e610:	4616      	mov	r6, r2
 800e612:	fbb5 f1f3 	udiv	r1, r5, r3
 800e616:	fb03 5711 	mls	r7, r3, r1, r5
 800e61a:	5dc7      	ldrb	r7, [r0, r7]
 800e61c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e620:	462f      	mov	r7, r5
 800e622:	42bb      	cmp	r3, r7
 800e624:	460d      	mov	r5, r1
 800e626:	d9f4      	bls.n	800e612 <_printf_i+0x112>
 800e628:	2b08      	cmp	r3, #8
 800e62a:	d10b      	bne.n	800e644 <_printf_i+0x144>
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	07df      	lsls	r7, r3, #31
 800e630:	d508      	bpl.n	800e644 <_printf_i+0x144>
 800e632:	6923      	ldr	r3, [r4, #16]
 800e634:	6861      	ldr	r1, [r4, #4]
 800e636:	4299      	cmp	r1, r3
 800e638:	bfde      	ittt	le
 800e63a:	2330      	movle	r3, #48	@ 0x30
 800e63c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e640:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e644:	1b92      	subs	r2, r2, r6
 800e646:	6122      	str	r2, [r4, #16]
 800e648:	f8cd a000 	str.w	sl, [sp]
 800e64c:	464b      	mov	r3, r9
 800e64e:	aa03      	add	r2, sp, #12
 800e650:	4621      	mov	r1, r4
 800e652:	4640      	mov	r0, r8
 800e654:	f7ff fee6 	bl	800e424 <_printf_common>
 800e658:	3001      	adds	r0, #1
 800e65a:	d14a      	bne.n	800e6f2 <_printf_i+0x1f2>
 800e65c:	f04f 30ff 	mov.w	r0, #4294967295
 800e660:	b004      	add	sp, #16
 800e662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	f043 0320 	orr.w	r3, r3, #32
 800e66c:	6023      	str	r3, [r4, #0]
 800e66e:	4833      	ldr	r0, [pc, #204]	@ (800e73c <_printf_i+0x23c>)
 800e670:	2778      	movs	r7, #120	@ 0x78
 800e672:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	6831      	ldr	r1, [r6, #0]
 800e67a:	061f      	lsls	r7, r3, #24
 800e67c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e680:	d402      	bmi.n	800e688 <_printf_i+0x188>
 800e682:	065f      	lsls	r7, r3, #25
 800e684:	bf48      	it	mi
 800e686:	b2ad      	uxthmi	r5, r5
 800e688:	6031      	str	r1, [r6, #0]
 800e68a:	07d9      	lsls	r1, r3, #31
 800e68c:	bf44      	itt	mi
 800e68e:	f043 0320 	orrmi.w	r3, r3, #32
 800e692:	6023      	strmi	r3, [r4, #0]
 800e694:	b11d      	cbz	r5, 800e69e <_printf_i+0x19e>
 800e696:	2310      	movs	r3, #16
 800e698:	e7ac      	b.n	800e5f4 <_printf_i+0xf4>
 800e69a:	4827      	ldr	r0, [pc, #156]	@ (800e738 <_printf_i+0x238>)
 800e69c:	e7e9      	b.n	800e672 <_printf_i+0x172>
 800e69e:	6823      	ldr	r3, [r4, #0]
 800e6a0:	f023 0320 	bic.w	r3, r3, #32
 800e6a4:	6023      	str	r3, [r4, #0]
 800e6a6:	e7f6      	b.n	800e696 <_printf_i+0x196>
 800e6a8:	4616      	mov	r6, r2
 800e6aa:	e7bd      	b.n	800e628 <_printf_i+0x128>
 800e6ac:	6833      	ldr	r3, [r6, #0]
 800e6ae:	6825      	ldr	r5, [r4, #0]
 800e6b0:	6961      	ldr	r1, [r4, #20]
 800e6b2:	1d18      	adds	r0, r3, #4
 800e6b4:	6030      	str	r0, [r6, #0]
 800e6b6:	062e      	lsls	r6, r5, #24
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	d501      	bpl.n	800e6c0 <_printf_i+0x1c0>
 800e6bc:	6019      	str	r1, [r3, #0]
 800e6be:	e002      	b.n	800e6c6 <_printf_i+0x1c6>
 800e6c0:	0668      	lsls	r0, r5, #25
 800e6c2:	d5fb      	bpl.n	800e6bc <_printf_i+0x1bc>
 800e6c4:	8019      	strh	r1, [r3, #0]
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	6123      	str	r3, [r4, #16]
 800e6ca:	4616      	mov	r6, r2
 800e6cc:	e7bc      	b.n	800e648 <_printf_i+0x148>
 800e6ce:	6833      	ldr	r3, [r6, #0]
 800e6d0:	1d1a      	adds	r2, r3, #4
 800e6d2:	6032      	str	r2, [r6, #0]
 800e6d4:	681e      	ldr	r6, [r3, #0]
 800e6d6:	6862      	ldr	r2, [r4, #4]
 800e6d8:	2100      	movs	r1, #0
 800e6da:	4630      	mov	r0, r6
 800e6dc:	f7f1 fe08 	bl	80002f0 <memchr>
 800e6e0:	b108      	cbz	r0, 800e6e6 <_printf_i+0x1e6>
 800e6e2:	1b80      	subs	r0, r0, r6
 800e6e4:	6060      	str	r0, [r4, #4]
 800e6e6:	6863      	ldr	r3, [r4, #4]
 800e6e8:	6123      	str	r3, [r4, #16]
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6f0:	e7aa      	b.n	800e648 <_printf_i+0x148>
 800e6f2:	6923      	ldr	r3, [r4, #16]
 800e6f4:	4632      	mov	r2, r6
 800e6f6:	4649      	mov	r1, r9
 800e6f8:	4640      	mov	r0, r8
 800e6fa:	47d0      	blx	sl
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	d0ad      	beq.n	800e65c <_printf_i+0x15c>
 800e700:	6823      	ldr	r3, [r4, #0]
 800e702:	079b      	lsls	r3, r3, #30
 800e704:	d413      	bmi.n	800e72e <_printf_i+0x22e>
 800e706:	68e0      	ldr	r0, [r4, #12]
 800e708:	9b03      	ldr	r3, [sp, #12]
 800e70a:	4298      	cmp	r0, r3
 800e70c:	bfb8      	it	lt
 800e70e:	4618      	movlt	r0, r3
 800e710:	e7a6      	b.n	800e660 <_printf_i+0x160>
 800e712:	2301      	movs	r3, #1
 800e714:	4632      	mov	r2, r6
 800e716:	4649      	mov	r1, r9
 800e718:	4640      	mov	r0, r8
 800e71a:	47d0      	blx	sl
 800e71c:	3001      	adds	r0, #1
 800e71e:	d09d      	beq.n	800e65c <_printf_i+0x15c>
 800e720:	3501      	adds	r5, #1
 800e722:	68e3      	ldr	r3, [r4, #12]
 800e724:	9903      	ldr	r1, [sp, #12]
 800e726:	1a5b      	subs	r3, r3, r1
 800e728:	42ab      	cmp	r3, r5
 800e72a:	dcf2      	bgt.n	800e712 <_printf_i+0x212>
 800e72c:	e7eb      	b.n	800e706 <_printf_i+0x206>
 800e72e:	2500      	movs	r5, #0
 800e730:	f104 0619 	add.w	r6, r4, #25
 800e734:	e7f5      	b.n	800e722 <_printf_i+0x222>
 800e736:	bf00      	nop
 800e738:	0800e8d5 	.word	0x0800e8d5
 800e73c:	0800e8e6 	.word	0x0800e8e6

0800e740 <memmove>:
 800e740:	4288      	cmp	r0, r1
 800e742:	b510      	push	{r4, lr}
 800e744:	eb01 0402 	add.w	r4, r1, r2
 800e748:	d902      	bls.n	800e750 <memmove+0x10>
 800e74a:	4284      	cmp	r4, r0
 800e74c:	4623      	mov	r3, r4
 800e74e:	d807      	bhi.n	800e760 <memmove+0x20>
 800e750:	1e43      	subs	r3, r0, #1
 800e752:	42a1      	cmp	r1, r4
 800e754:	d008      	beq.n	800e768 <memmove+0x28>
 800e756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e75a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e75e:	e7f8      	b.n	800e752 <memmove+0x12>
 800e760:	4402      	add	r2, r0
 800e762:	4601      	mov	r1, r0
 800e764:	428a      	cmp	r2, r1
 800e766:	d100      	bne.n	800e76a <memmove+0x2a>
 800e768:	bd10      	pop	{r4, pc}
 800e76a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e76e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e772:	e7f7      	b.n	800e764 <memmove+0x24>

0800e774 <_sbrk_r>:
 800e774:	b538      	push	{r3, r4, r5, lr}
 800e776:	4d06      	ldr	r5, [pc, #24]	@ (800e790 <_sbrk_r+0x1c>)
 800e778:	2300      	movs	r3, #0
 800e77a:	4604      	mov	r4, r0
 800e77c:	4608      	mov	r0, r1
 800e77e:	602b      	str	r3, [r5, #0]
 800e780:	f7f3 f992 	bl	8001aa8 <_sbrk>
 800e784:	1c43      	adds	r3, r0, #1
 800e786:	d102      	bne.n	800e78e <_sbrk_r+0x1a>
 800e788:	682b      	ldr	r3, [r5, #0]
 800e78a:	b103      	cbz	r3, 800e78e <_sbrk_r+0x1a>
 800e78c:	6023      	str	r3, [r4, #0]
 800e78e:	bd38      	pop	{r3, r4, r5, pc}
 800e790:	24000a64 	.word	0x24000a64

0800e794 <memcpy>:
 800e794:	440a      	add	r2, r1
 800e796:	4291      	cmp	r1, r2
 800e798:	f100 33ff 	add.w	r3, r0, #4294967295
 800e79c:	d100      	bne.n	800e7a0 <memcpy+0xc>
 800e79e:	4770      	bx	lr
 800e7a0:	b510      	push	{r4, lr}
 800e7a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7aa:	4291      	cmp	r1, r2
 800e7ac:	d1f9      	bne.n	800e7a2 <memcpy+0xe>
 800e7ae:	bd10      	pop	{r4, pc}

0800e7b0 <_realloc_r>:
 800e7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7b4:	4680      	mov	r8, r0
 800e7b6:	4615      	mov	r5, r2
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	b921      	cbnz	r1, 800e7c6 <_realloc_r+0x16>
 800e7bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c0:	4611      	mov	r1, r2
 800e7c2:	f7ff bc4b 	b.w	800e05c <_malloc_r>
 800e7c6:	b92a      	cbnz	r2, 800e7d4 <_realloc_r+0x24>
 800e7c8:	f7ff fbdc 	bl	800df84 <_free_r>
 800e7cc:	2400      	movs	r4, #0
 800e7ce:	4620      	mov	r0, r4
 800e7d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d4:	f000 f81a 	bl	800e80c <_malloc_usable_size_r>
 800e7d8:	4285      	cmp	r5, r0
 800e7da:	4606      	mov	r6, r0
 800e7dc:	d802      	bhi.n	800e7e4 <_realloc_r+0x34>
 800e7de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e7e2:	d8f4      	bhi.n	800e7ce <_realloc_r+0x1e>
 800e7e4:	4629      	mov	r1, r5
 800e7e6:	4640      	mov	r0, r8
 800e7e8:	f7ff fc38 	bl	800e05c <_malloc_r>
 800e7ec:	4607      	mov	r7, r0
 800e7ee:	2800      	cmp	r0, #0
 800e7f0:	d0ec      	beq.n	800e7cc <_realloc_r+0x1c>
 800e7f2:	42b5      	cmp	r5, r6
 800e7f4:	462a      	mov	r2, r5
 800e7f6:	4621      	mov	r1, r4
 800e7f8:	bf28      	it	cs
 800e7fa:	4632      	movcs	r2, r6
 800e7fc:	f7ff ffca 	bl	800e794 <memcpy>
 800e800:	4621      	mov	r1, r4
 800e802:	4640      	mov	r0, r8
 800e804:	f7ff fbbe 	bl	800df84 <_free_r>
 800e808:	463c      	mov	r4, r7
 800e80a:	e7e0      	b.n	800e7ce <_realloc_r+0x1e>

0800e80c <_malloc_usable_size_r>:
 800e80c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e810:	1f18      	subs	r0, r3, #4
 800e812:	2b00      	cmp	r3, #0
 800e814:	bfbc      	itt	lt
 800e816:	580b      	ldrlt	r3, [r1, r0]
 800e818:	18c0      	addlt	r0, r0, r3
 800e81a:	4770      	bx	lr

0800e81c <_init>:
 800e81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e81e:	bf00      	nop
 800e820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e822:	bc08      	pop	{r3}
 800e824:	469e      	mov	lr, r3
 800e826:	4770      	bx	lr

0800e828 <_fini>:
 800e828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e82a:	bf00      	nop
 800e82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e82e:	bc08      	pop	{r3}
 800e830:	469e      	mov	lr, r3
 800e832:	4770      	bx	lr
